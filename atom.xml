<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Originally</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://github.com/vp1009/vp1009.github.io.git/"/>
  <updated>2020-07-29T23:47:43.397Z</updated>
  <id>https://github.com/vp1009/vp1009.github.io.git/</id>
  
  <author>
    <name>Mr.L</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>面向对象五大原则SOLID</title>
    <link href="https://github.com/vp1009/vp1009.github.io.git/2020/07/29/s_i/"/>
    <id>https://github.com/vp1009/vp1009.github.io.git/2020/07/29/s_i/</id>
    <published>2020-07-29T15:40:20.000Z</published>
    <updated>2020-07-29T23:47:43.397Z</updated>
    
    <content type="html"><![CDATA[<h4 id="浅谈面向对象五大原则-S-O-L-I-D"><a href="#浅谈面向对象五大原则-S-O-L-I-D" class="headerlink" title="浅谈面向对象五大原则 S.O.L.I.D"></a>浅谈面向对象五大原则 S.O.L.I.D</h4><p>设计模式中的SOLID原则，分别是单一原则、开闭原则、里氏替换原则、接口隔离原则、依赖倒置原则。前辈们总结出来的，遵循五大原则可以使程序解决紧耦合，更加健壮。<br>s<br>SRP    单一责任原则<br>OCP    开放封闭原则<br>LSP    里氏替换原则<br>ISP    接口隔离原则<br>DIP    依赖倒置原则</p><h4 id="单一责任原则"><a href="#单一责任原则" class="headerlink" title="单一责任原则"></a>单一责任原则</h4><p>指的是一个类或者一个方法只做一件事。如果一个类承担的职责过多，就等于把这些职责耦合在一起，一个职责的变化就可能抑制或者削弱这个类完成其他职责的能力。例如餐厅服务员负责把订单给厨师去做，而不是服务员又要订单又要炒菜。</p><h4 id="开放封闭原则"><a href="#开放封闭原则" class="headerlink" title="开放封闭原则"></a>开放封闭原则</h4><p>对扩展开放，对修改关闭。意为一个类独立之后就不应该去修改它，而是以扩展的方式适应新需求。例如一开始做了普通计算器程序，突然添加新需求，要再做一个程序员计算器，这时不应该修改普通计算器内部，应该使用面向接口编程，组合实现扩展</p><h4 id="里氏替换原则"><a href="#里氏替换原则" class="headerlink" title="里氏替换原则"></a>里氏替换原则</h4><p>所有基类出现的地方都可以用派生类替换而不会程序产生错误。子类可以扩展父类的功能，但不能改变父类原有的功能。例如机动车必须有轮胎和发动机，子类宝马和奔驰不应该改写没轮胎或者没发动机。</p><h4 id="依赖倒置原则"><a href="#依赖倒置原则" class="headerlink" title="依赖倒置原则"></a>依赖倒置原则</h4><p>指的是高级模块不应该依赖低级模块，而是依赖抽象。抽象不能依赖细节，细节要依赖抽象。比如类A内有类B对象，称为类A依赖类B，但是不应该这样做，而是选择类A去依赖抽象。例如垃圾收集器不管垃圾是什么类型，要是垃圾就行。</p><h4 id="总述"><a href="#总述" class="headerlink" title="总述"></a>总述</h4><p>没人写一款程序能完全遵守SOLID原则，甚至有些设计模式是违反SOLID原则。如何权衡就要看利是否大于弊。不足之处望指教。s</p><p>转载于：<a><a href="https://www.cnblogs.com/suli0827/p/9515842.html" target="_blank" rel="noopener">https://www.cnblogs.com/suli0827/p/9515842.html</a></a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;浅谈面向对象五大原则-S-O-L-I-D&quot;&gt;&lt;a href=&quot;#浅谈面向对象五大原则-S-O-L-I-D&quot; class=&quot;headerlink&quot; title=&quot;浅谈面向对象五大原则 S.O.L.I.D&quot;&gt;&lt;/a&gt;浅谈面向对象五大原则 S.O.L.I.D&lt;/h4&gt;&lt;
      
    
    </summary>
    
    
    
      <category term="python" scheme="https://github.com/vp1009/vp1009.github.io.git/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>微服务</title>
    <link href="https://github.com/vp1009/vp1009.github.io.git/2020/07/29/v_w/"/>
    <id>https://github.com/vp1009/vp1009.github.io.git/2020/07/29/v_w/</id>
    <published>2020-07-29T15:24:30.000Z</published>
    <updated>2020-07-29T23:40:12.076Z</updated>
    
    <content type="html"><![CDATA[<p>微服务（Microservice）这个概念是2012年出现的，作为加快Web和移动应用程序开发进程的一种方法，2014年开始受到各方的关注，而2015年，可以说是微服务的元年；</p><p>越来越多的论坛、社区、blog以及互联网行业巨头开始对微服务进行讨论、实践，可以说这样更近一步推动了微服务的发展和创新。而微服务的流行，Martin Fowler功不可没。</p><p>1 互联网的快速发展</p><p>2 敏捷开发 精益方法的深入人心</p><p>3 容器技术的成熟</p><h4 id="传统的项目架构？"><a href="#传统的项目架构？" class="headerlink" title="传统的项目架构？"></a>传统的项目架构？</h4><p><strong>优点：</strong></p><p>①开发简单，集中式管理</p><p>②基本不会重复开发</p><p>③功能都在本地，没有分布式的管理和调用消耗</p><p><strong>缺点：</strong></p><p>1、效率低：开发都在同一个项目改代码，相互等待，冲突不断</p><p>2、维护难：代码功功能耦合在一起，新人不知道何从下手</p><p>3、不灵活：构建时间长，任何小修改都要重构整个项目，耗时</p><p>4、稳定性差：一个微小的问题，都可能导致整个应用挂掉</p><p>5、扩展性不够：无法满足高并发下的业务需求</p><p><strong>常见的系统架构遵循的三个标准和业务驱动力：</strong></p><p>1、提高敏捷性：及时响应业务需求，促进企业发展</p><p>2、提升用户体验：提升用户体验，减少用户流失</p><p>3、降低成本：降低增加产品、客户或业务方案的成本</p><h4 id="现在我们来看一下微服务必须需要的原则？"><a href="#现在我们来看一下微服务必须需要的原则？" class="headerlink" title="现在我们来看一下微服务必须需要的原则？"></a>现在我们来看一下微服务必须需要的原则？</h4><p>1，单一功能职责</p><p>   单一功能职责是SOLID设计模式之一，它意味着一个单元，无论是类、函数还是微服务，都应该有且只有一个职责。在任何时候，一个微服务都不应该有一个以上的职责。</p><p>2，围绕着业务功能设计</p><p>   微服务应该专注于特定的业务功能，并确保它有助于完成任务。微服务绝不应限制自己采用最适合解决业务目的的适当技术栈或后端数据库存储。当我们设计单个应用程序时，这常常是一个约束，我们试图在某些领域中使用一些折中来解决多个业务解决方案。微服务使您能够选择最适合当前问题的解决方案。（某个微服务不仅仅只为一个微服务来服务，他要为其他的微服务提供支持，也就是全局的架构）</p><p>3，你建造它，你拥有它。</p><p>这种设计的另一个重要方面与开发前后的职责有关。在大型组织中，通常由一个团队开发app location(应用)，经过一些知识转移会议后，将项目移交给维护团队。在微服务中，构建服务的团队拥有它，并负责在将来维护它。这使开发人员能够接触到他们的软件的日常操作，并且他们能够更好地理解他们构建的产品在现实世界中是如何被客户使用的。</p><p>4，基础设施自动化</p><p>准备和构建微服务的基础设施是另一个非常重要的需求，服务应该是可独立部署的，并且应该捆绑所有依赖项，包括库依赖项，甚至是执行环境，如抽象物理资源（web服务器和容器或虚拟机）。</p><p>微服务和SOA之间的一个主要区别在于它们的自治级别。虽然大多数SOA实现提供了服务级抽象，但是微服务更进一步抽象了实现和执行环境。</p><p>在传统的应用程序开发中，我们构建一个WAR或EAR，然后将其部署到JEE应用程序服务器中，例如使用JBoss、WebLogic、WebSphere等等。我们可以将多个应用程序部署到同一个JEE容器中。在理想的场景中，在微服务方法中，每个微服务将构建为一个胖Jar，嵌入所有依赖项，并作为独立的Java进程运行。</p><p>5，容错设计</p><p>微服务的设计应考虑到故障情况。如果服务失败，或者宕机一段时间，该怎么办?这些都是非常重要的问题，必须在实际编码开始之前解决——以便清楚地估计服务故障将如何影响用户体验。</p><p>快速故障是另一个用于构建容错、弹性系统的概念。这种哲学提倡预期失败的系统，而不是构建永远不会失败的系统。由于服务在任何时候都可能失败，因此能够快速检测故障并在可能的情况下自动恢复服务非常重要。</p><p>微服务应用程序非常重视应用程序的实时监控，检查体系结构元素(数据库每秒接收多少请求)和业务相关指标(例如每分钟接收多少订单)。语义监视可以提供出错的早期预警系统，从而触发开发团队进行跟踪和调查。</p><h4 id="微服务的目的？"><a href="#微服务的目的？" class="headerlink" title="微服务的目的？"></a>微服务的目的？</h4><p><strong>目的：</strong>有效的拆分应用，实现敏捷开发和部署</p><h4 id="微服务的优点-？"><a href="#微服务的优点-？" class="headerlink" title="微服务的优点 ？"></a>微服务的优点 ？</h4><p>微服务有许多优点相比传统的多层架构（单体庞大应用），微服务的优点如下：</p><p>1，使用微服务，架构师和开发人员可以为每个微服务选择适合于特定用途的架构和技术(通晓多种语言对应的熟悉语言的架构)。这为以更经济有效的方式设计更适合的解决方案提供了灵活性。</p><p>2，由于服务相当简单，而且规模更小，企业可以试验新的流程、算法、业务逻辑等等。它通过提供快速试验和失败的能力，使企业能够进行颠覆性创新。</p><p>3，微服务能够实现选择性的可伸缩性，即每个服务都可以独立地伸缩，而且伸缩的成本相对于单体应用方面要低。</p><p>4，微服务是自包含的、独立的部署模块，当第二个微服务没有按照我们的需要执行时，可以使用另一个类似的微服务替换一个微服务。它有助于做出正确的“购买构建”决策，而这通常是许多企业面临的挑战。</p><p>5，微服务帮助我们构建本质上是有机的系统(有机的系统是通过添加越来越多的功能在一段时间内横向增长的系统)。因为微服务都是关于独立可管理的服务——它允许在需要时添加越来越多的服务，而对现有服务的影响最小。</p><p>6，技术变化是软件开发中的障碍之一。使用微服务，可以单独更改或升级每个服务的技术，而不是升级整个应用程序。</p><p>7，由于microservices将服务运行时环境和服务本身打包在一起，因此允许在同一环境中共存多个版本的服务。</p><p>8，最后，微服务还支持更小、更专注的敏捷开发团队。团队将根据微服务的边界进行组织。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;微服务（Microservice）这个概念是2012年出现的，作为加快Web和移动应用程序开发进程的一种方法，2014年开始受到各方的关注，而2015年，可以说是微服务的元年；&lt;/p&gt;
&lt;p&gt;越来越多的论坛、社区、blog以及互联网行业巨头开始对微服务进行讨论、实践，可以说
      
    
    </summary>
    
    
    
      <category term="python" scheme="https://github.com/vp1009/vp1009.github.io.git/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>项目成员了解</title>
    <link href="https://github.com/vp1009/vp1009.github.io.git/2020/07/23/l_m/"/>
    <id>https://github.com/vp1009/vp1009.github.io.git/2020/07/23/l_m/</id>
    <published>2020-07-23T11:20:20.000Z</published>
    <updated>2020-09-02T11:01:00.113Z</updated>
    
    <content type="html"><![CDATA[<h4 id="一个项目成员"><a href="#一个项目成员" class="headerlink" title="一个项目成员:"></a>一个项目成员:</h4><ul><li>老板: 考虑市场预期, 决定资金使用</li><li>项目负责人: 协调资源, 和外部客户确定大概需求, 大概工期, 费用. </li><li>技术负责人: 确定使用的技术, 确定技术架构</li><li>产品: 确定产品功能, 业务逻辑, 产出原型图</li><li>ui:   (vi),  产品相关的页面出设计图</li><li>h5:  根据设计图, 写html,css ,js</li><li>安卓: 实现app的界面</li><li>ISO: 实现app的界面</li><li>接口开发: 实现业务api, 需要和前端联调, 出接口文档</li><li>后台开发: 实现管理后台, 都是前后端不分离, (业务人员: 老板, 财务, 运营, 客服, 管理员)</li><li>测试: 管理测试数据, 测试环境, 运行一些测试用例, (自动化测试用例: 开发人员写好的)</li><li>运维:专门搞环境, 一个公司开发环境, 一个灰度测试环境, 一个线上环境,  分析日志, 备份数据, 权限设置(服务器权限, 数据库权限), </li></ul><h4 id="项目生命周期"><a href="#项目生命周期" class="headerlink" title="项目生命周期"></a>项目生命周期</h4><ul><li><p>传统项目生命周期</p><ul><li>优点:</li><li>阶段分明, 注意力集中, 单个阶段内更容易把控</li><li>缺点:<ul><li>每个阶段完成后才能进行下个阶段, 周期长, 风险大</li><li>灵活性低,不能适应用户需求的变化</li></ul></li></ul></li><li><p>新型项目生命周期(敏捷开发)</p><ul><li>优点:</li><li>快速应对市场变化, 更契合市场需求</li><li>缺点:<ul><li>需求阶段的产出不完整,容易产生技术瓶颈</li><li>需要有资深人员合理架构</li></ul></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;一个项目成员&quot;&gt;&lt;a href=&quot;#一个项目成员&quot; class=&quot;headerlink&quot; title=&quot;一个项目成员:&quot;&gt;&lt;/a&gt;一个项目成员:&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;老板: 考虑市场预期, 决定资金使用&lt;/li&gt;
&lt;li&gt;项目负责人: 协调资源, 和外部客户
      
    
    </summary>
    
    
    
      <category term="python" scheme="https://github.com/vp1009/vp1009.github.io.git/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Django工程搭建</title>
    <link href="https://github.com/vp1009/vp1009.github.io.git/2020/07/23/d_g/"/>
    <id>https://github.com/vp1009/vp1009.github.io.git/2020/07/23/d_g/</id>
    <published>2020-07-22T17:20:23.000Z</published>
    <updated>2020-09-02T10:55:52.656Z</updated>
    
    <content type="html"><![CDATA[<h3 id="后端django工程"><a href="#后端django工程" class="headerlink" title="后端django工程"></a>后端django工程</h3><ol><li><p>框架</p><ul><li>django</li></ul></li><li><p>用户模型</p><ul><li>django内置的user模型<ul><li>添加导包路径 apps 目录添加到 sys.path里</li><li>配置pycharm的包搜索路径</li></ul></li><li>扩展用户模型: 增加手机号,昵称,头像,地址,…..</li></ul></li><li><p>认证模型</p><ul><li>前后端不分离: session认证(基于cookie, 服务端存储session信息)</li><li>前后端分离: jwt认证(不受限于跨域, 服务端不存储信息)</li></ul></li><li><p>基础结构及配置</p><ul><li>基础目录配置</li><li>cors配置</li></ul></li><li><p>drf初始化</p><ul><li><p>安装: pip install djangorestframework, django-filter</p></li><li><p>注册应用: INSTALLED_APPS 中 […’rest_framework’, ‘django_filters’]</p></li><li><p>添加配置:</p><pre class="highlight"><span class="line"><span class="comment"># 过滤器</span></span><br><span class="line"><span class="comment"># 1,安装 django-filter</span></span><br><span class="line"><span class="comment"># 2,注册应用</span></span><br><span class="line"><span class="comment"># 3,配置settings, 在view里配置可过滤的字段</span></span><br><span class="line"><span class="comment"># 4,使用 查询字符串携带过滤信息</span></span><br><span class="line"></span><br><span class="line">REST_FRAMEWORK = &#123;</span><br><span class="line">    <span class="comment"># 文档报错： AttributeError: ‘AutoSchema’ object has no attribute ‘get_link’</span></span><br><span class="line">    <span class="comment"># 用下面的设置可以解决</span></span><br><span class="line">    <span class="string">'DEFAULT_SCHEMA_CLASS'</span>: <span class="string">'rest_framework.schemas.AutoSchema'</span>,</span><br><span class="line">    <span class="comment"># 默认设置是:</span></span><br><span class="line">    <span class="comment"># 'DEFAULT_SCHEMA_CLASS': 'rest_framework.schemas.openapi.AutoSchema',</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 异常处理器</span></span><br><span class="line">    <span class="comment"># 'EXCEPTION_HANDLER': 'user.utils.exception_handler',</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Base API policies</span></span><br><span class="line">    <span class="string">'DEFAULT_RENDERER_CLASSES'</span>: [</span><br><span class="line">        <span class="string">'rest_framework.renderers.JSONRenderer'</span>,</span><br><span class="line">        <span class="string">'rest_framework.renderers.BrowsableAPIRenderer'</span>,</span><br><span class="line">    ],</span><br><span class="line">    <span class="string">'DEFAULT_PARSER_CLASSES'</span>: [</span><br><span class="line">        <span class="string">'rest_framework.parsers.JSONParser'</span>,</span><br><span class="line">        <span class="string">'rest_framework.parsers.FormParser'</span>,</span><br><span class="line">        <span class="string">'rest_framework.parsers.MultiPartParser'</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="string">'DEFAULT_AUTHENTICATION_CLASSES'</span>: [  <span class="comment"># 认证器</span></span><br><span class="line">        <span class="string">'rest_framework.authentication.SessionAuthentication'</span>,  <span class="comment"># 使用session时的认证器</span></span><br><span class="line">        <span class="string">'rest_framework.authentication.BasicAuthentication'</span>  <span class="comment"># 提交表单时的认证器</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="string">'DEFAULT_PERMISSION_CLASSES'</span>: [  <span class="comment"># 权限配置, 顺序靠上的严格</span></span><br><span class="line">        <span class="string">'rest_framework.permissions.IsAdminUser'</span>,  <span class="comment"># 管理员可以访问</span></span><br><span class="line">        <span class="string">'rest_framework.permissions.IsAuthenticated'</span>,  <span class="comment"># 认证用户可以访问</span></span><br><span class="line">        <span class="string">'rest_framework.permissions.IsAuthenticatedOrReadOnly'</span>,  <span class="comment"># 认证用户可以访问, 否则只能读取</span></span><br><span class="line">        <span class="string">'rest_framework.permissions.AllowAny'</span>,  <span class="comment"># 所有用户都可以访问</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="comment"># 限流</span></span><br><span class="line">    <span class="string">'DEFAULT_THROTTLE_CLASSES'</span>: [</span><br><span class="line">        <span class="string">'rest_framework.throttling.AnonRateThrottle'</span>,</span><br><span class="line">        <span class="string">'rest_framework.throttling.UserRateThrottle'</span>,</span><br><span class="line">    ],</span><br><span class="line">    <span class="comment"># 限流策略</span></span><br><span class="line">    <span class="string">'DEFAULT_THROTTLE_RATES'</span>: &#123;</span><br><span class="line">        <span class="string">'user'</span>: <span class="string">'10/hour'</span>,</span><br><span class="line">        <span class="string">'anon'</span>: <span class="string">'3/day'</span>,</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="string">'DEFAULT_CONTENT_NEGOTIATION_CLASS'</span>: <span class="string">'rest_framework.negotiation.DefaultContentNegotiation'</span>,</span><br><span class="line">    <span class="string">'DEFAULT_METADATA_CLASS'</span>: <span class="string">'rest_framework.metadata.SimpleMetadata'</span>,</span><br><span class="line">    <span class="string">'DEFAULT_VERSIONING_CLASS'</span>: <span class="literal">None</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 全局分页器, 例如 省市区的数据自定义分页器, 不需要分页</span></span><br><span class="line">    <span class="string">'DEFAULT_PAGINATION_CLASS'</span>: <span class="string">'rest_framework.pagination.PageNumberPagination'</span>,</span><br><span class="line">    <span class="comment"># 每页返回数量</span></span><br><span class="line">    <span class="string">'PAGE_SIZE'</span>: <span class="number">10</span>,  <span class="comment"># 默认 None</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 过滤器后端</span></span><br><span class="line">    <span class="string">'DEFAULT_FILTER_BACKENDS'</span>: [</span><br><span class="line">        <span class="string">'django_filters.rest_framework.DjangoFilterBackend'</span>,</span><br><span class="line">        <span class="comment"># 'django_filters.rest_framework.backends.DjangoFilterBackend', 包路径有变化</span></span><br><span class="line">    ],</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Filtering 过滤排序</span></span><br><span class="line">    <span class="string">'SEARCH_PARAM'</span>: <span class="string">'search'</span>,</span><br><span class="line">    <span class="string">'ORDERING_PARAM'</span>: <span class="string">'ordering'</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">'NUM_PROXIES'</span>: <span class="literal">None</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Versioning  接口版本控制</span></span><br><span class="line">    <span class="string">'DEFAULT_VERSION'</span>: <span class="literal">None</span>,</span><br><span class="line">    <span class="string">'ALLOWED_VERSIONS'</span>: <span class="literal">None</span>,</span><br><span class="line">    <span class="string">'VERSION_PARAM'</span>: <span class="string">'version'</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Authentication  认证</span></span><br><span class="line">    <span class="comment"># 未认证用户使用的用户类型</span></span><br><span class="line">    <span class="string">'UNAUTHENTICATED_USER'</span>: <span class="string">'django.contrib.auth.models.AnonymousUser'</span>,</span><br><span class="line">    <span class="comment"># 未认证用户使用的Token值</span></span><br><span class="line">    <span class="string">'UNAUTHENTICATED_TOKEN'</span>: <span class="literal">None</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment"># View configuration</span></span><br><span class="line">    <span class="string">'VIEW_NAME_FUNCTION'</span>: <span class="string">'rest_framework.views.get_view_name'</span>,</span><br><span class="line">    <span class="string">'VIEW_DESCRIPTION_FUNCTION'</span>: <span class="string">'rest_framework.views.get_view_description'</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">'NON_FIELD_ERRORS_KEY'</span>: <span class="string">'non_field_errors'</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Testing</span></span><br><span class="line">    <span class="string">'TEST_REQUEST_RENDERER_CLASSES'</span>: [</span><br><span class="line">        <span class="string">'rest_framework.renderers.MultiPartRenderer'</span>,</span><br><span class="line">        <span class="string">'rest_framework.renderers.JSONRenderer'</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="string">'TEST_REQUEST_DEFAULT_FORMAT'</span>: <span class="string">'multipart'</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Hyperlink settings</span></span><br><span class="line">    <span class="string">'URL_FORMAT_OVERRIDE'</span>: <span class="string">'format'</span>,</span><br><span class="line">    <span class="string">'FORMAT_SUFFIX_KWARG'</span>: <span class="string">'format'</span>,</span><br><span class="line">    <span class="string">'URL_FIELD_NAME'</span>: <span class="string">'url'</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Input and output formats</span></span><br><span class="line">    <span class="string">'DATE_FORMAT'</span>: ISO_8601,</span><br><span class="line">    <span class="string">'DATE_INPUT_FORMATS'</span>: [ISO_8601],</span><br><span class="line"></span><br><span class="line">    <span class="string">'DATETIME_FORMAT'</span>: ISO_8601,</span><br><span class="line">    <span class="string">'DATETIME_INPUT_FORMATS'</span>: [ISO_8601],</span><br><span class="line"></span><br><span class="line">    <span class="string">'TIME_FORMAT'</span>: ISO_8601,</span><br><span class="line">    <span class="string">'TIME_INPUT_FORMATS'</span>: [ISO_8601],</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Encoding</span></span><br><span class="line">    <span class="string">'UNICODE_JSON'</span>: <span class="literal">True</span>,</span><br><span class="line">    <span class="string">'COMPACT_JSON'</span>: <span class="literal">True</span>,</span><br><span class="line">    <span class="string">'STRICT_JSON'</span>: <span class="literal">True</span>,</span><br><span class="line">    <span class="string">'COERCE_DECIMAL_TO_STRING'</span>: <span class="literal">True</span>,</span><br><span class="line">    <span class="string">'UPLOADED_FILES_USE_URL'</span>: <span class="literal">True</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Browseable API</span></span><br><span class="line">    <span class="string">'HTML_SELECT_CUTOFF'</span>: <span class="number">1000</span>,</span><br><span class="line">    <span class="string">'HTML_SELECT_CUTOFF_TEXT'</span>: <span class="string">"More than &#123;count&#125; items..."</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Schemas</span></span><br><span class="line">    <span class="string">'SCHEMA_COERCE_PATH_PK'</span>: <span class="literal">True</span>,</span><br><span class="line">    <span class="string">'SCHEMA_COERCE_METHOD_NAMES'</span>: &#123;</span><br><span class="line">        <span class="string">'retrieve'</span>: <span class="string">'read'</span>,</span><br><span class="line">        <span class="string">'destroy'</span>: <span class="string">'delete'</span></span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br></pre></li></ul></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;后端django工程&quot;&gt;&lt;a href=&quot;#后端django工程&quot; class=&quot;headerlink&quot; title=&quot;后端django工程&quot;&gt;&lt;/a&gt;后端django工程&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;框架&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;django&lt;/li&gt;
&lt;
      
    
    </summary>
    
    
    
      <category term="Django" scheme="https://github.com/vp1009/vp1009.github.io.git/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>集群or分布式</title>
    <link href="https://github.com/vp1009/vp1009.github.io.git/2020/07/20/r_d/"/>
    <id>https://github.com/vp1009/vp1009.github.io.git/2020/07/20/r_d/</id>
    <published>2020-07-19T19:09:23.000Z</published>
    <updated>2020-09-02T10:56:48.223Z</updated>
    
    <content type="html"><![CDATA[<h3 id="集群-or-分布式"><a href="#集群-or-分布式" class="headerlink" title="集群 or 分布式"></a>集群 or 分布式</h3><p>一开始, 一个人干</p><p>能力不足了,  为了提高性能</p><p>一群人一起干,   干同样的事情,   集群( 一个地点)</p><p>分布式(分步式),  炒菜</p><p>每个人擅长的部分不一样, </p><p>买菜,  一个人</p><p>洗菜,  一个人</p><p>切菜, 两个人(集群)</p><p>炒菜, 五个人(集群)</p><p>分布式 (很多业务, 每个业务又是一个集群)</p><p>结论:  </p><p>​    集群: (很多机器, 合作起来提供一个服务)</p><p>​    分布式: 分步骤, 合作完成一个功能 </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;集群-or-分布式&quot;&gt;&lt;a href=&quot;#集群-or-分布式&quot; class=&quot;headerlink&quot; title=&quot;集群 or 分布式&quot;&gt;&lt;/a&gt;集群 or 分布式&lt;/h3&gt;&lt;p&gt;一开始, 一个人干&lt;/p&gt;
&lt;p&gt;能力不足了,  为了提高性能&lt;/p&gt;
&lt;p&gt;一群人
      
    
    </summary>
    
    
    
      <category term="Django" scheme="https://github.com/vp1009/vp1009.github.io.git/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>Celery+Redis</title>
    <link href="https://github.com/vp1009/vp1009.github.io.git/2020/07/17/c_y/"/>
    <id>https://github.com/vp1009/vp1009.github.io.git/2020/07/17/c_y/</id>
    <published>2020-07-17T05:53:00.000Z</published>
    <updated>2020-07-23T04:05:08.444Z</updated>
    
    <content type="html"><![CDATA[<p>1、任务（tasks）–用户定义的函数，用于实现用户的功能，比如执行一个耗时很长的任务</p><p>2、中间介（Broker）–用于存放tasks的地方，但是这个中间介需要解决一个问题，就是可能需要存放非常非常多的tasks，而且要保证Worker能够从这里拿取</p><p>3、执行者（Worker）–用于执行tasks，也就是真正调用我们在tasks中定义的函数</p><p>4、存储（Backend）–把执行tasks返回的结果进行存储，以供用户查看或调用</p><h2 id="1、各模块功能"><a href="#1、各模块功能" class="headerlink" title="1、各模块功能"></a>1、各模块功能</h2><p>Celery中，以上组件具体功能如下：</p><p><strong>任务模块 Task</strong></p><p>包含异步任务和定时任务。其中，异步任务通常在业务逻辑中被触发并发往任务队列，而定时任务由 Celery Beat 进程周期性地将任务发往任务队列。</p><p><strong>消息中间件 Broker</strong></p><p>Broker，即为任务调度队列，接收任务生产者发来的消息（即任务），将任务存入队列。Celery 本身不提供队列服务，官方推荐使用 RabbitMQ 和 Redis 等。</p><p><strong>任务执行单元 Worker</strong></p><p>Worker 是执行任务的处理单元，它实时监控消息队列，获取队列中调度的任务，并执行它。</p><p><strong>任务结果存储 Backend</strong></p><p>Backend 用于存储任务的执行结果，以供查询。同消息中间件一样，存储也可使用 RabbitMQ, Redis 和 MongoDB 等。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;1、任务（tasks）–用户定义的函数，用于实现用户的功能，比如执行一个耗时很长的任务&lt;/p&gt;
&lt;p&gt;2、中间介（Broker）–用于存放tasks的地方，但是这个中间介需要解决一个问题，就是可能需要存放非常非常多的tasks，而且要保证Worker能够从这里拿取&lt;/p&gt;

      
    
    </summary>
    
    
    
      <category term="Redis" scheme="https://github.com/vp1009/vp1009.github.io.git/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>django之redis和django-redis的使用</title>
    <link href="https://github.com/vp1009/vp1009.github.io.git/2020/07/15/r_z/"/>
    <id>https://github.com/vp1009/vp1009.github.io.git/2020/07/15/r_z/</id>
    <published>2020-07-15T13:10:20.000Z</published>
    <updated>2020-07-15T13:39:33.973Z</updated>
    
    <content type="html"><![CDATA[<p>-redis</p><p>　　-非关系型内存数据（nosql:mongodb,redis），key-value的存储<br>　　-单线程单进程，qps:10w<br>　　-Memcached：多线程，支持的数据类型少：只支持字符串类型，不支持持久化<br>　　-redis：5大数据类型<br>　　　　k1:‘123‘, 字符串<br>　　　　k2:[1,2,3,4], 列表/数组<br>　　　　k3:{1,2,3,4} 集合：去重，爬虫去重<br>　　　　k4:{name:lqz,age:12} 字典/哈希表<br>　　　　k5:{(‘lqz‘,18),(‘egon‘,33)} 有序集合：游戏排行榜<br>　　-redis支持持久化：两种持久化的方案</p><p>-python操作redis<br>　　from redis import Redis<br>　　conn=Redis()</p><p>-redis连接池<br>　　#pool需要做成单例<br>　　pool=ConnectionPool(host=‘127.0.0.1‘,port=6379,max_connections=100)<br>　　conn=Redis(connection_pool=pool)</p><p>-redis之字符串操作<br>　　-set<br>　　-get<br>　　-mset<br>　　-mget<br>　　-incr<br>　　-decr<br>　　-append</p><p>-redis之hash操作<br>　　-hset<br>　　-hmset<br>　　-hget<br>　　-hmget<br>　　-hgetall<br>　　-hlen<br>　　-hdel<br>　　-hincrby<br>　　-hscan<br>　　-hscan_iter</p><p>-redis之列表操作<br>　　-lpush<br>　　-llen<br>　　-linsert<br>　　-lpop<br>　　-blpop</p><p>　　-自定义增量迭代</p><p>只支持一层的5大数据类型：也就是说字典的value值只能是字符串，列表的value值只能是字符串</p><p>-redis的其他操作<br>　　-delete<br>　　-exisit<br>　　-rename<br>　　-keys 模糊匹配key值<br>　　-expire<br>　　-type</p><p>-事务（重点）<br>　　conn=Redis()<br>　　pipe = conn.pipeline(transaction=True)<br>　　pipe.multi()<br>　　pipe.set(‘name‘, ‘alex‘)<br>　　pipe.set(‘role‘, ‘sb‘)<br>　　pipe.execute()</p><p>-在django中使用redis<br>　　-所有框架都能用的方式：<br>　　　　-先新建一个py文件，生成一个redis连接池<br>　　　　-在哪用，导过来，<br>　　　　　　conn=Redis(connection_pool=POOL)<br>　　　　　　conn.set(‘xxx‘,‘yyyy‘)<br>　　-django中使用：django-redis模块<br>　　　　-在setting中配置：<br>　　　　　　CACHES = {<br>　　　　　　　　“default”: {<br>　　　　　　　　　　“BACKEND”: “django_redis.cache.RedisCache”,<br>　　　　　　　　　　“LOCATION”: “redis://127.0.0.1:6379”,<br>　　　　　　　　　　“OPTIONS”: {<br>　　　　　　　　　　　　“CLIENT_CLASS”: “django_redis.client.DefaultClient”,<br>　　　　　　　　　　　　“CONNECTION_POOL_KWARGS”: {“max_connections”: 100}}}}<br>　　　　-使用<br>　　　　　　在使用的位置：<br>　　　　　　from django_redis import get_redis_connection<br>　　　　　　conn=get_redis_connection()<br>　　　　　　conn.set</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;-redis&lt;/p&gt;
&lt;p&gt;　　-非关系型内存数据（nosql:mongodb,redis），key-value的存储&lt;br&gt;　　-单线程单进程，qps:10w&lt;br&gt;　　-Memcached：多线程，支持的数据类型少：只支持字符串类型，不支持持久化&lt;br&gt;　　-redis
      
    
    </summary>
    
    
    
      <category term="Redis" scheme="https://github.com/vp1009/vp1009.github.io.git/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>验证码的时效性</title>
    <link href="https://github.com/vp1009/vp1009.github.io.git/2020/07/14/r_s/"/>
    <id>https://github.com/vp1009/vp1009.github.io.git/2020/07/14/r_s/</id>
    <published>2020-07-14T01:02:20.000Z</published>
    <updated>2020-07-22T12:00:29.936Z</updated>
    
    <content type="html"><![CDATA[<p>redis场景，服务器内存不够了，怎么办（或者说被人干蹦了），我们的redis信息是不是就没了，redis服务hi不是挂了，如何优化？容灾方式？分配redis多大内存，是否满足我们的生产的需求，一般我们会缓存到多大的一个数据量，峰值是多少？</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>Redis场景，服务器内存不够了：</p><p>一，增加内存</p><p>redis存储在内存中，数据太多，占用大多内存，那么增加内存就是直接的方法，但是这个方法一般不采用，因为内存满了就加内存，满了就加，那代价太大，相当于用钱解决的问题，不首先考虑，一般有方面都做到最优化，才考虑此方法。</p><p>二，搭建Redis集群</p><ol><li>所有的redis节点批次互联（PING-PONG机制),内部使用二进制协议优化传输速度和宽带。</li><li>节点的fail是通过集群中超过半数的节点检测时效时才生效。</li><li>客户端与redis节点智联，不需要中间proxy层，客户端不需要连接集群所有的节点，连接集群中任何一个可用的节点即可。</li><li>redis-cluster把所有的物理节点映射到[0-16383]slot上，cluster负责维护node&lt;-&gt;slot&lt;-&gt;value</li></ol><p>Redis 集群中内置了 16384 个哈希槽，当需要在 Redis 集群中放置一个 key-value 时，redis 先对 key 使用 crc16 算法算出一个结果，然后把结果对 16384 求余数，这样每个 key 都会对应一个编号在 0-16383 之间的哈希槽，redis 会根据节点数量大致均等的将哈希槽映射到不同的节点，最多16384个节点。</p><p>节点间相互通信，一半以上节点ping不同一个节点，则说明此节点挂掉，从节点顶上</p><p>(1)集群中所有master参与投票,如果半数以上master节点与其中一个master节点通信超过(cluster-node-timeout),认为该master节点挂掉.</p><p>(2):什么时候整个集群不可用(cluster_state:fail)? </p><ul><li>如果集群任意master挂掉,且当前master没有slave，则集群进入fail状态。也可以理解成集群的[0-16383]slot映射不完全时进入fail状态。</li><li>如果集群超过半数以上master挂掉，无论是否有slave，集群进入fail状态。</li></ul><h4 id="Redis服务器因某种原因崩掉了，redis的信息是不是就没了-（容灾方式）"><a href="#Redis服务器因某种原因崩掉了，redis的信息是不是就没了-（容灾方式）" class="headerlink" title="Redis服务器因某种原因崩掉了，redis的信息是不是就没了 （容灾方式）"></a>Redis服务器因某种原因崩掉了，redis的信息是不是就没了 （容灾方式）</h4><p>redis 持久化策略：</p><p>　　RDB：对redis中的数据周期性的持久化</p><h4 id="优点"><a href="#优点" class="headerlink" title="　　　优点"></a>　　　优点</h4><p>​              1、会生成多个数据文件，每个数据文件都代表了某一个时间的全部数据。非常适合做冷备。可以将数据上传到云服务备份。</p><p>　　　　2、RDB对redis对外提供的服务影响小，可以让redis保持高性能。</p><p>　　　　3、相比较来说，基于RDB文件重启恢复redis更快</p><p>　　AOF：对每条写入命令作为日志。以append-only模式写入日志。</p><h4 id="优点-1"><a href="#优点-1" class="headerlink" title="　　　优点"></a>　　　优点</h4><p>​              1、可以更好的保护数据不丢失，一般AOF每隔1秒，通过后台线程执行一次fsync操作。最多丢失1s数据</p><p>　　　　2、文件以append-only模式写入，没有io开销。文件不容易损坏。损坏也很容易恢复。</p><p>　　　　3、AOF日志文件即使过大的时候，出现后台重写操作，也不会影响客户端的读写。因为在rewrite log的时候，会对其中的指导进行压缩，创建出一份需要恢复数据的最小日志出来。再创建新日志文件的时候，老的日志文件还是照常写入。当新的merge后的日志文件ready的时候，再交换新老日志文件即可。</p><p>　　　　4、日志文件可读性强。适合做灾难性的误删除的紧急恢复。</p><p>一般线上环境我们会将2中机制都开启。具体的RDB策略和AOF策略都可以在redis.conf里面配置</p><p>RDB： save 60 1000 : 表示每60s有超过1000条数据更新就备份。</p><p>AOF： append-only : true 开启aof策略</p><p>　　　　everysec: 每秒备份</p><p>　　　　auto-aof-rewrite-percentage 100 : 当aof大小膨胀到上次2倍就备份</p><p>　　　　auto-aof-rewrite-min-size 64mb ： 和上面是 且 关系。 aof文件必须超过64m才会备份</p><h4 id="通过RDB恢复数据的步骤："><a href="#通过RDB恢复数据的步骤：" class="headerlink" title="通过RDB恢复数据的步骤："></a>通过RDB恢复数据的步骤：</h4><p>先将云服务的RDB备份数据copy到redis配置的备份目录。然后将aof关闭（一定要关闭，否则优先从aof日志文件本分，但是如果没有的话就创建空的。所以redis是无法加载rdb备份文件的）。然后重启redis，此时我们redis-cli 进入redis发现redis已经自动加载备份的rdb文件数据了。这时候手动命令启动aof。这时候redis就会备份aof日志。这启动aof是暂时的。我们停掉redis，在配置文件中修改将aof开启，然后再开启，现在redis已经恢复数据，且AOF已经开启了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;redis场景，服务器内存不够了，怎么办（或者说被人干蹦了），我们的redis信息是不是就没了，redis服务hi不是挂了，如何优化？容灾方式？分配redis多大内存，是否满足我们的生产的需求，一般我们会缓存到多大的一个数据量，峰值是多少？&lt;/p&gt;
&lt;h3 id=&quot;思路&quot;&gt;
      
    
    </summary>
    
    
    
      <category term="Redis" scheme="https://github.com/vp1009/vp1009.github.io.git/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>关于mysql优化</title>
    <link href="https://github.com/vp1009/vp1009.github.io.git/2020/07/14/m_s/"/>
    <id>https://github.com/vp1009/vp1009.github.io.git/2020/07/14/m_s/</id>
    <published>2020-07-14T01:02:20.000Z</published>
    <updated>2020-07-21T16:01:22.708Z</updated>
    
    <content type="html"><![CDATA[<h4 id="优化数据的访问"><a href="#优化数据的访问" class="headerlink" title="优化数据的访问"></a>优化数据的访问</h4><ol><li><p>确认应用程序是否检索了大量超过需要的数据。通常以为访问太多的行，或者访问太多的列</p></li><li><p>确认mysql服务器层是否存在分析大量超过需要的数据行</p></li><li><p>当访问量过大时，考虑数据库读写分离原则，当我们使用分离，数据库的压力还是很大的时候，这就需要使用数据拆分了。数据库的拆分原则：就是通过某种特定的条件，按照某个维度，将我们存放同一个数据库中的数据分散存到多个数据库（主机）上面已达到分散单裤（主机）负载的效果。</p><ul><li><p>首选是垂直拆分：一个数据库是由多个表组成，每个表对应着不同的业务，垂直切分指按照业务进行分类，分布到不同的数据库上面，这样也就将压力分布到不同的数据库上。 <strong>优点</strong> ：1 拆分后业务清晰，拆分规则明确 2 系统之间整合或扩展容易 3 数据维护简单 <strong>缺点</strong> ：1 部分代码无法join，只能通过接口方式解决，提高了系统复杂度 2 事物处理复杂</p></li><li><p>水平拆分：相似与垂直拆分，水平拆分不是将表的数据做分类，而是按照某个字段的某种规则分散到多个库之中，每个表包含一部分数据。简单来说，我们可以将数据的水平切分理解为是按照数据行进行切分，就是讲表中的某些行切分到一个数据库，而另外的某些行又切分到其他的数据库中。</p></li><li><p><strong>总</strong> ： 如果分库后仍然查的满的话，按照分库的思想做分表的工作数据库采用分布式数据库（所有的节点加起来才是整体数据），服务器满足不了大型系统增长的业务需求，数据库读写分离随着业务的发展，最终也无法满足，需要分布式数据库及分布式文件系统来支撑。</p><p>优先考虑缓存讲题对数据库的操作</p><p>在考录读写分离，降低数据库写操作</p><p>首先垂直拆分在水平拆分</p><p>先分库在分表</p></li></ul></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;优化数据的访问&quot;&gt;&lt;a href=&quot;#优化数据的访问&quot; class=&quot;headerlink&quot; title=&quot;优化数据的访问&quot;&gt;&lt;/a&gt;优化数据的访问&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;确认应用程序是否检索了大量超过需要的数据。通常以为访问太多的行，或者访问太多的列&lt;
      
    
    </summary>
    
    
    
      <category term="Mysql" scheme="https://github.com/vp1009/vp1009.github.io.git/tags/Mysql/"/>
    
  </entry>
  
  <entry>
    <title>Linux文件操作</title>
    <link href="https://github.com/vp1009/vp1009.github.io.git/2020/07/14/l_n/"/>
    <id>https://github.com/vp1009/vp1009.github.io.git/2020/07/14/l_n/</id>
    <published>2020-07-14T01:02:20.000Z</published>
    <updated>2020-07-14T14:18:11.143Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Linux文件操作（看大小，tail-f-n-grep-head-cut-wc-sort）"><a href="#Linux文件操作（看大小，tail-f-n-grep-head-cut-wc-sort）" class="headerlink" title="Linux文件操作（看大小，tail -f -n grep head cut wc sort）"></a>Linux文件操作（看大小，tail -f -n grep head cut wc sort）</h2><p>命令head默认是查看文件的前10行，通过命令head /etc/passwd查看文件的前10行，也可以增加参数-n 15查看前15行，参数n在这里是指定行数的意思。我们可以通过命令man head查看更多的参数使用方法。</p><p>命令tail默认是查看文件的最后10行，通过命令tail /etc/passwd查看文件的最后10行，也可以增加参数-n 5查看最后5行，参数n在这里是指定行数的意思。我们可以通过man tail查看更多的参数使用方法。命令tail经常被用来查看最新的日志信息。可以用tailf命令或者tail –f来实时查看日志信息。</p><p>命令grep用来过滤信息，通过命令cat /etc/passwd | grep thomas从passwd文件中快速找到还有thomas信息的内容。通过命令cat /etc/passwd | grep –n tcpdump从passwd文件中快速找到tcpdump信息的内容并显示出行号，参数-v是取反，如上面2个例子找的信息里面不包括thomas和tcpdump的信息，我们通过man grep可以学习更多的参数使用方法。</p><p>命令cut可以只显示某一列的内容，如果我们只想看某个文件的第一列的话可以用cut –d: -f1 /etc/passwd,参数f1在这里的意思是第一列，我们可以通过man cut来查看更多的参数使用方法。</p><p>命令wc是用来统计字符数的，为文件信息的搜集提供帮助，如我们想知道根目录下有多少个目录，直接可以用ls / | wc –l直接计算出根目录下有多少行数，在目录和文件数特别多的时候非常好用。如我们用ls –R /etc | wc –l来查看/etc目录和文件数行数是多少，其中参数R是递归查找，意思是可以查到目录下面的文件。通过man wc查看更多的参数使用方法。</p><p>命令sort是用来排序的，我们用命令sort –n 参数n是以数字排列顺序，参数t是以什么为分隔符，参数k是选择第几列，通过命令sort –n –t: -k3 /etc/passwd来对/etc/目录下passwd文件已冒号为分界符第3列用数字排序。我们通过man sort可以查看更多的参数使用方法。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Linux文件操作（看大小，tail-f-n-grep-head-cut-wc-sort）&quot;&gt;&lt;a href=&quot;#Linux文件操作（看大小，tail-f-n-grep-head-cut-wc-sort）&quot; class=&quot;headerlink&quot; title=&quot;Li
      
    
    </summary>
    
    
    
      <category term="Linux" scheme="https://github.com/vp1009/vp1009.github.io.git/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Python面试算法题</title>
    <link href="https://github.com/vp1009/vp1009.github.io.git/2020/07/06/p_y/"/>
    <id>https://github.com/vp1009/vp1009.github.io.git/2020/07/06/p_y/</id>
    <published>2020-07-06T03:00:20.000Z</published>
    <updated>2020-07-06T03:59:14.143Z</updated>
    
    <content type="html"><![CDATA[<pre class="highlight"><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">num</span><span class="params">()</span>:</span></span><br><span class="line">          <span class="keyword">return</span> [<span class="keyword">lambda</span> x: i*x <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>)]</span><br><span class="line">print([m(<span class="number">2</span>) <span class="keyword">for</span> m <span class="keyword">in</span> num()])     <span class="comment"># 输出: [6, 6, 6, 6]</span></span><br></pre><h3 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h3><p>这题涉及到了闭包延时绑定，当循环执行完了之后才会执行传参，循环四次，每一次循环完 i=3 然后再和x相乘 所以结果是6，6，6，6。 如果把 [ lambda x: i<em>x for i in range(4) ] 改成 （ lambda x: i</em>x for i in range(4) ）这样就变成了一个生成器 自动实现迭代器协议，一边循环一边计算的机制， 这样结果就是 0，2，4，6.</p><hr><h2 id="两数之和"><a href="#两数之和" class="headerlink" title="两数之和"></a>两数之和</h2><pre class="highlight"><span class="line">给定 nums &#x3D; [2, 7, 11, 15], target &#x3D; 9</span><br><span class="line">因为 nums[0] + nums[1] &#x3D; 2 + 7 &#x3D; 9</span><br><span class="line">所以返回 [0, 1]</span><br></pre><h3 id="思路：-1"><a href="#思路：-1" class="headerlink" title="思路："></a>思路：</h3><p>这里可以使用字典来解题，通过enumerate方法遍历获取数据的下标包括对应值，然后以key，value形式把该数据的下标和对应值存入字典，然后再出通过enumerate方法遍历数据，每一次获取数据就从字典拿出一个值，用目标值减去从字典拿出的这个值得到一个结果值，如果结果值存在字典当中，那么返回两个数的下标，如果为None，说明字典中没有这个值。</p><h3 id="实现代码："><a href="#实现代码：" class="headerlink" title="实现代码："></a>实现代码：</h3><pre class="highlight"><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_index_list</span><span class="params">(nums, target)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Todo 作为一个方法来实现，批量解决这个获取索引的问题</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    :params nums：传的参数的列表</span></span><br><span class="line"><span class="string">    :params target: 目标值</span></span><br><span class="line"><span class="string">    :return: 返回索引</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    dic = &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> a, b <span class="keyword">in</span> enumerate(nums):  <span class="comment"># a是下标 b是对应值</span></span><br><span class="line"></span><br><span class="line">        dic[b] = a  <span class="comment"># 对应值存入字典</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i, b <span class="keyword">in</span> enumerate(nums):</span><br><span class="line"></span><br><span class="line">        j = dic.get(target-b)  <span class="comment"># 从字典中拿出对应值 用目标值减去对应值</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> j <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:  <span class="comment"># 判断如果减去的对应值不为空，则返回下标</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> [i, j]</span><br></pre><hr><h2 id="数组中重复的数字"><a href="#数组中重复的数字" class="headerlink" title="数组中重复的数字"></a>数组中重复的数字</h2><p>示例：</p><pre class="highlight"><span class="line">输入:</span><br><span class="line">[<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">3</span>]</span><br><span class="line">输出: <span class="number">2</span> 或 <span class="number">3</span></span><br></pre><h3 id="思路：-2"><a href="#思路：-2" class="headerlink" title="思路："></a>思路：</h3><p>这道题想到的是，使用列表中的count方法，定义一个空列表，遍历数据然后进行判断，如果数据值出现个数大于或等于2，说明该数据是重复的，然后把重复的筛取出来之后存入空列表，再进行返回输出。</p><h3 id="实现代码：-1"><a href="#实现代码：-1" class="headerlink" title="实现代码："></a>实现代码：</h3><pre class="highlight"><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_number</span><span class="params">(nums)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    :params nums：传的参数的数组</span></span><br><span class="line"><span class="string">    :return: 返回重复数字</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    nub = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> nums:</span><br><span class="line">        <span class="keyword">if</span> nums.count(i) &gt;= <span class="number">2</span>:</span><br><span class="line">            <span class="keyword">if</span> str(i) <span class="keyword">not</span> <span class="keyword">in</span> nub:</span><br><span class="line">                nub.append(str(i))</span><br><span class="line"></span><br><span class="line">    print(<span class="string">'或'</span>.join(nub))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    get_number([<span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">3</span>])</span><br></pre><h2 id="队列实现一个栈"><a href="#队列实现一个栈" class="headerlink" title="队列实现一个栈"></a>队列实现一个栈</h2><h3 id="思路：-3"><a href="#思路：-3" class="headerlink" title="思路："></a>思路：</h3><p>使用一个队列，实现栈的一些基本操作，栈（后进先出）的特性。</p><h3 id="实现代码：-2"><a href="#实现代码：-2" class="headerlink" title="实现代码："></a>实现代码：</h3><pre class="highlight"><span class="line"><span class="comment"># 队列实现一个栈 （栈：后进先出）</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Stack</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 定义一个队列</span></span><br><span class="line">        self.lst = []</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">is_None</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 判断栈是否为空 返回 ture false</span></span><br><span class="line">        <span class="keyword">return</span> self.lst == []</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">push</span><span class="params">(self, i)</span>:</span></span><br><span class="line">        <span class="comment"># 加入元素</span></span><br><span class="line">        self.lst.append(i)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pop</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 出栈</span></span><br><span class="line">        <span class="keyword">return</span> self.lst.pop()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">stack_top</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 返回栈顶元素</span></span><br><span class="line">        <span class="keyword">return</span> self.lst[<span class="number">-1</span>]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">size</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 栈的大小</span></span><br><span class="line">        <span class="keyword">return</span> len(self.lst)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line"></span><br><span class="line">    stack = Stack()</span><br><span class="line">    print(stack.is_None())</span><br><span class="line">    stack.push(<span class="number">1</span>)</span><br><span class="line">    stack.push(<span class="number">2</span>)</span><br><span class="line">    stack.push(<span class="number">3</span>)</span><br><span class="line">    print(stack.lst)</span><br><span class="line">    print(stack.pop())</span><br><span class="line">    print(stack.stack_top())</span><br><span class="line">    print(stack.size())</span><br></pre><hr><h2 id="回文数"><a href="#回文数" class="headerlink" title="回文数"></a>回文数</h2><p>判断一个整数是否是回文数。回文数是指正序（从左向右）和倒序（从右向左）读都是一样的整数。</p><p>示例1：</p><pre class="highlight"><span class="line">输入: <span class="number">121</span></span><br><span class="line">输出: true</span><br></pre><p>示例2：</p><pre class="highlight"><span class="line">输入: <span class="number">-121</span></span><br><span class="line">输出: false</span><br><span class="line">解释: 从左向右，为 <span class="number">-121</span> 。 从右向左读，为<span class="number">121</span>- 。 因此它不是一个回文数</span><br></pre><p>示例3：</p><pre class="highlight"><span class="line">输入: 10</span><br><span class="line">输出: false</span><br><span class="line">解释: 从右向左读，为 01 。 因此它不是一个回文数</span><br></pre><h3 id="思路：-4"><a href="#思路：-4" class="headerlink" title="思路："></a>思路：</h3><p>这题可以使用字符串 双指针的方法 将数据转化为字符串 首先定义好第一个元素下标和最后一个元素下标，while循环 只要条件不满足 一直循环 循环判断第一个和最后一个元素是否相等 不相等返回false 相等继续循环，如果循环条件满足之后都相等，返回 false</p><h3 id="实现代码：-3"><a href="#实现代码：-3" class="headerlink" title="实现代码："></a>实现代码：</h3><pre class="highlight"><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">palindromic_number</span><span class="params">(x)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    :params x：传的参数的列表</span></span><br><span class="line"><span class="string">    :return: 返回Ture False</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    lst = list(str(x))</span><br><span class="line">    print(lst)</span><br><span class="line">    L, R = <span class="number">0</span>, len(lst)<span class="number">-1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> L &lt;= R:</span><br><span class="line">        print(L, R)</span><br><span class="line">        <span class="keyword">if</span> lst[L] != lst[R]:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">        L += <span class="number">1</span></span><br><span class="line">        R -= <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    print(palindromic_number(<span class="number">1231</span>))</span><br></pre><hr><h2 id="分别用生成器和迭代器生成斐波那契数列"><a href="#分别用生成器和迭代器生成斐波那契数列" class="headerlink" title="分别用生成器和迭代器生成斐波那契数列"></a>分别用生成器和迭代器生成斐波那契数列</h2><p>示例：</p><pre class="highlight"><span class="line">输出: 1 1 2 3 5 8 13</span><br></pre><pre class="highlight"><span class="line"><span class="comment"># 使用迭代器生成斐波那契数列</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fibonacii</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,all_num)</span>:</span></span><br><span class="line">        self.all_num = all_num</span><br><span class="line">        self.cur_idx = <span class="number">0</span></span><br><span class="line">        self.a = <span class="number">0</span>  </span><br><span class="line">        self.b = <span class="number">1</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__iter__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__next__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.cur_idx &gt;= self.all_num:</span><br><span class="line">            <span class="keyword">raise</span> StopIteration</span><br><span class="line">        ret = self.a</span><br><span class="line">        </span><br><span class="line">        self.a, self.b = self.b, self.a + self.b</span><br><span class="line">        self.cur_idx += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> ret</span><br><span class="line"> </span><br><span class="line">fibo = Fibonacii(<span class="number">10</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> fibo:</span><br><span class="line">    print(i)</span><br></pre><pre class="highlight"><span class="line"><span class="comment"># 使用生成器生成斐波那契数列</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fibnacii</span><span class="params">(count)</span>:</span></span><br><span class="line">    num = <span class="number">0</span></span><br><span class="line">    a, b = <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> num &lt; count:</span><br><span class="line">        <span class="keyword">yield</span> a</span><br><span class="line">        a, b = b, a+b</span><br><span class="line">        num += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">fi = fibnacii(<span class="number">10</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> fi:</span><br><span class="line">    print(i)</span><br></pre><h2 id="反转字符数组"><a href="#反转字符数组" class="headerlink" title="反转字符数组"></a>反转字符数组</h2><h3 id="思路：-5"><a href="#思路：-5" class="headerlink" title="思路："></a>思路：</h3><p>直接使用反转</p><h3 id="实现代码：-4"><a href="#实现代码：-4" class="headerlink" title="实现代码："></a>实现代码：</h3><pre class="highlight"><span class="line"><span class="comment"># 反转字符串</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">reverseString</span><span class="params">(s)</span>:</span></span><br><span class="line">    s[<span class="number">0</span>::] = s[::<span class="number">-1</span>]</span><br><span class="line">    print(s)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    reverseString([<span class="string">'b'</span>, <span class="string">''</span>, <span class="string">'a'</span>, <span class="string">'r'</span>])</span><br></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;pre class=&quot;highlight&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;num&lt;/span&gt;&lt;span class=
      
    
    </summary>
    
    
    
      <category term="python" scheme="https://github.com/vp1009/vp1009.github.io.git/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Python五大排序算法</title>
    <link href="https://github.com/vp1009/vp1009.github.io.git/2020/07/06/suan/"/>
    <id>https://github.com/vp1009/vp1009.github.io.git/2020/07/06/suan/</id>
    <published>2020-07-06T02:00:20.000Z</published>
    <updated>2020-07-06T02:35:52.121Z</updated>
    
    <content type="html"><![CDATA[<h5 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h5><p>插入排序：插入排序的基本操作就是将一个数据插入到已经排好序的有序数据中，从而得到一个新的、个数加一的有序数据，算法适用于少量数据的排序；首先将第一个作为已经排好序的，然后每次从后的取出插入到前面并排序；</p><p>时间复杂度：O(n²)</p><p>空间复杂度：O(1)</p><p>稳定性：稳定</p><pre class="highlight"><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">insert_sort</span><span class="params">(ilist)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(ilist)):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(i):</span><br><span class="line">            <span class="keyword">if</span> ilist[i] &lt; ilist[j]:</span><br><span class="line">                ilist.insert(j, ilist.pop(i))</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">return</span> ilist</span><br></pre><h4 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h4><p>冒泡排序：它重复地走访过要排序的数列，一次比较两个元素，如果他们的顺序错误就把他们交换过来。走访数列的工作是重复地进行直到没有再需要交换，也就是说该数列已经排序完成</p><p>时间复杂度：O(n²)</p><p>空间复杂度：O(1)</p><p>稳定性：稳定</p><pre class="highlight"><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bubble_sort</span><span class="params">(blist)</span>:</span></span><br><span class="line">    count = len(blist)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, count):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(i + <span class="number">1</span>, count):</span><br><span class="line">            <span class="keyword">if</span> blist[i] &gt; blist[j]:</span><br><span class="line">                blist[i], blist[j] = blist[j], blist[i]</span><br><span class="line">    <span class="keyword">return</span> blist</span><br><span class="line"></span><br><span class="line">blist = bubble_sort([<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">6</span>,<span class="number">9</span>,<span class="number">8</span>])</span><br><span class="line">print(blist)</span><br></pre><h4 id="快排"><a href="#快排" class="headerlink" title="快排"></a>快排</h4><p>快速排序：通过一趟排序将要排序的数据分割成独立的两部分，其中一部分的所有数据都比另外一部分的所有数据都要小，然后再按此方法对这两部分数据分别进行快速排序，整个排序过程可以递归进行，以此达到整个数据变成有序序列</p><p>时间复杂度：O(nlog₂n)</p><p>空间复杂度：O(nlog₂n)</p><p>稳定性：不稳定</p><pre class="highlight"><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">quick_sort</span><span class="params">(qlist)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> qlist == []:</span><br><span class="line">        <span class="keyword">return</span> []</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        qfirst = qlist[<span class="number">0</span>]</span><br><span class="line">        qless = quick_sort([l <span class="keyword">for</span> l <span class="keyword">in</span> qlist[<span class="number">1</span>:] <span class="keyword">if</span> l &lt; qfirst])</span><br><span class="line">        qmore = quick_sort([m <span class="keyword">for</span> m <span class="keyword">in</span> qlist[<span class="number">1</span>:] <span class="keyword">if</span> m &gt;= qfirst])</span><br><span class="line">        <span class="keyword">return</span> qless + [qfirst] + qmore</span><br><span class="line"></span><br><span class="line">qlist = quick_sort([<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">6</span>,<span class="number">9</span>,<span class="number">8</span>])</span><br></pre><h4 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h4><p>选择排序：第1趟，在待排序记录r1 ~ r[n]中选出最小的记录，将它与r1交换；第2趟，在待排序记录r2 ~ r[n]中选出最小的记录，将它与r2交换；以此类推，第i趟在待排序记录r[i] ~ r[n]中选出最小的记录，将它与r[i]交换，使有序序列不断增长直到全部排序完毕</p><p>时间复杂度：O(n²)</p><p>空间复杂度：O(1)</p><p>稳定性：不稳定</p><pre class="highlight"><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">select_sort</span><span class="params">(slist)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(slist)):</span><br><span class="line">        x = i</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(i, len(slist)):</span><br><span class="line">            <span class="keyword">if</span> slist[j] &lt; slist[x]:</span><br><span class="line">                x = j</span><br><span class="line">        slist[i], slist[x] = slist[x], slist[i]</span><br><span class="line">    <span class="keyword">return</span> slist</span><br><span class="line"></span><br><span class="line">slist = select_sort([<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">6</span>,<span class="number">9</span>,<span class="number">8</span>])</span><br></pre><h4 id="归并算法"><a href="#归并算法" class="headerlink" title="归并算法"></a>归并算法</h4><p>归并排序：采用分治法（Divide and Conquer）的一个非常典型的应用。将已有序的子序列合并，得到完全有序的序列；即先使每个子序列有序，再使子序列段间有序。若将两个有序表合并成一个有序表，称为二路归并</p><p>时间复杂度：O(nlog₂n)</p><p>空间复杂度：O(1)</p><p>稳定性：稳定</p><pre class="highlight"><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">merge_sort</span><span class="params">(array)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">merge_arr</span><span class="params">(arr_l, arr_r)</span>:</span></span><br><span class="line">        array = []</span><br><span class="line">        <span class="keyword">while</span> len(arr_l) <span class="keyword">and</span> len(arr_r):</span><br><span class="line">            <span class="keyword">if</span> arr_l[<span class="number">0</span>] &lt;= arr_r[<span class="number">0</span>]:</span><br><span class="line">                array.append(arr_l.pop(<span class="number">0</span>))</span><br><span class="line">            <span class="keyword">elif</span> arr_l[<span class="number">0</span>] &gt; arr_r[<span class="number">0</span>]:</span><br><span class="line">                array.append(arr_r.pop(<span class="number">0</span>))</span><br><span class="line">        <span class="keyword">if</span> len(arr_l) != <span class="number">0</span>:</span><br><span class="line">            array += arr_l</span><br><span class="line">        <span class="keyword">elif</span> len(arr_r) != <span class="number">0</span>:</span><br><span class="line">            array += arr_r</span><br><span class="line">        <span class="keyword">return</span> array</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">recursive</span><span class="params">(array)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> len(array) == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> array</span><br><span class="line">        mid = len(array) // <span class="number">2</span></span><br><span class="line">        arr_l = recursive(array[:mid])</span><br><span class="line">        arr_r = recursive(array[mid:])</span><br><span class="line">        <span class="keyword">return</span> merge_arr(arr_l, arr_r)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> recursive(array)</span><br></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h5 id=&quot;插入排序&quot;&gt;&lt;a href=&quot;#插入排序&quot; class=&quot;headerlink&quot; title=&quot;插入排序&quot;&gt;&lt;/a&gt;插入排序&lt;/h5&gt;&lt;p&gt;插入排序：插入排序的基本操作就是将一个数据插入到已经排好序的有序数据中，从而得到一个新的、个数加一的有序数据，算法适用于少量
      
    
    </summary>
    
    
    
      <category term="python" scheme="https://github.com/vp1009/vp1009.github.io.git/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Python算法时间复杂度</title>
    <link href="https://github.com/vp1009/vp1009.github.io.git/2020/07/06/s_d/"/>
    <id>https://github.com/vp1009/vp1009.github.io.git/2020/07/06/s_d/</id>
    <published>2020-07-06T01:20:20.000Z</published>
    <updated>2020-07-06T03:51:50.184Z</updated>
    
    <content type="html"><![CDATA[<p> 时间复杂度分为：</p><ul><li><p>时间复杂度</p></li><li><p>空间复杂度</p><p>时间复杂度用于度量算法的计算工作量，空间复杂度用于度量算法占用的内存空间。 </p></li></ul><p><strong>渐进时间复杂度</strong></p><p>时间复杂度是算法运算所消耗的时间，因为不同大小的输入数据，算法处理所要消耗的时间是不同的，因此评估一个算运行时间是比较困难的，所以通常关注的是时间频度，即算法运行计算操作的次数，记为T(n)，其中n称为问题的规模。</p><p>同样，因为n是一个变量，n发生变化时，时间频度T(n) 也在发生变化，我们称时间复杂度的极限情形称为算法的渐近时间复杂度，记为O(n)，不包含函数的低阶和首项系数。</p><h5 id="时间复杂度分为："><a href="#时间复杂度分为：" class="headerlink" title="时间复杂度分为："></a>时间复杂度分为：</h5><ul><li>常数阶 O(1) </li><li>线性阶 O(n) </li><li>平方阶 O(n^2) </li><li>立方阶 O(n^3) </li><li>对数阶 O(logn) </li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt; 时间复杂度分为：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;时间复杂度&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;空间复杂度&lt;/p&gt;
&lt;p&gt;时间复杂度用于度量算法的计算工作量，空间复杂度用于度量算法占用的内存空间。 &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;渐进时间复杂度&lt;/
      
    
    </summary>
    
    
    
      <category term="python" scheme="https://github.com/vp1009/vp1009.github.io.git/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Python基础数据类型</title>
    <link href="https://github.com/vp1009/vp1009.github.io.git/2020/07/06/s_u/"/>
    <id>https://github.com/vp1009/vp1009.github.io.git/2020/07/06/s_u/</id>
    <published>2020-07-06T01:02:20.000Z</published>
    <updated>2020-07-06T01:38:14.387Z</updated>
    
    <content type="html"><![CDATA[<h4 id="python的主要数据类型包括："><a href="#python的主要数据类型包括：" class="headerlink" title="python的主要数据类型包括："></a>python的主要数据类型包括：</h4><ol><li>int (整形)</li><li>long(长整型)</li><li>float(浮点型)</li><li>complex（复数）</li><li>字符串</li><li>布尔型</li><li>列表</li><li>元组</li><li>字典</li><li>集合</li></ol><h5 id="int（整型）"><a href="#int（整型）" class="headerlink" title="int（整型）"></a>int（整型）</h5><p>在32位机器上，整数的位数是32位，取值范围是-231<del>231-1，即-2147483648</del>214748364；在64位系统上，整数的位数为64位，取值范围为-263<del>263-1，即9223372036854775808</del>9223372036854775807。</p><h5 id="long（长整型）"><a href="#long（长整型）" class="headerlink" title="long（长整型）"></a>long（长整型）</h5><p>Python长整型没有指定位宽，但是由于机器内存有限，使用长的长整数数值也不可能无限大。</p><h5 id="float（浮点型）"><a href="#float（浮点型）" class="headerlink" title="float（浮点型）"></a>float（浮点型）</h5><p>浮点型也就是带有小数点的数，其精度和机器有关。</p><h5 id="complex（复数）"><a href="#complex（复数）" class="headerlink" title="complex（复数）"></a>complex（复数）</h5><p>Python还支持复数，复数由实数部分和虚数部分构成，可以用 a + bj,或者 complex(a,b) 表示， 复数的实部 a 和虚部 b 都是浮点型。</p><h5 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h5><p>Python中的字符串有两种数据类型，分别是str类型和unicode类型，str类型采用的ASCII编码，无法表示中文，unicode类型采用unicode编码，能够表示任意字符，包括中文和其他语言。</p><pre class="highlight"><span class="line">状态获取：islower，isupper，isdigit，isalpha，isalnum，istitle，startswith，endswith</span><br><span class="line">状态转换：lower，casefold，upper，swapcase，title(单词首字母大写)，capitalize(字符串首字母大写)</span><br><span class="line">格式转换：strip(去掉左右两边参数字符串中的字符)，ljust，rjust，center，zfill（左侧补零）</span><br><span class="line">拆分：partition，rpartiton，spilt，splitlines</span><br><span class="line">连接：join，+</span><br><span class="line">查询：index，find，count</span><br><span class="line">替换操作：replace，expandtabs</span><br><span class="line">基本操作：索引取值，len，max，min，<span class="keyword">in</span>，<span class="keyword">not</span> <span class="keyword">in</span></span><br></pre><h5 id="布尔型"><a href="#布尔型" class="headerlink" title="布尔型"></a>布尔型</h5><p>和其他编程语言一样，Python布尔类型也是用于逻辑运算，有两个值：True（真）和False（假）。</p><h5 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h5><p>列表是Python中使用最频繁的数据类型，集合中可以放任何数据类型，可对集合进行创建、查找、切片、增加、修改、删除、循环和排序操作。</p><pre class="highlight"><span class="line">增加：append,insert,extend</span><br><span class="line">删除：remove,pop,clear</span><br><span class="line">查询：index,count</span><br></pre><h5 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h5><p>元组和列表一样，也是一种序列，与列表不同的是，元组是不可修改的，元组用”()”标识，内部元素用逗号隔开。</p><pre class="highlight"><span class="line">查询：index，count</span><br></pre><h5 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h5><p>字典是一种键值对的集合，是除列表以外Python之中最灵活的内置数据结构类型，列表是有序的对象集合，字典是无序的对象集合。</p><pre class="highlight"><span class="line">增加：add</span><br><span class="line">删除：pop（第一个），clear，remove</span><br><span class="line">交集：&amp;</span><br><span class="line">并集：|</span><br><span class="line">差集：set1-set2</span><br><span class="line">对称差集：并集-交集</span><br></pre><h5 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h5><p>集合是一个无序的、不重复的数据组合，它的主要作用有两个，分别是去重和关系测试。</p><pre class="highlight"><span class="line">增加:字典[<span class="string">'键'</span>] = 值</span><br><span class="line">删除：pop,popitem,clear</span><br><span class="line">修改：update(dict)</span><br><span class="line">查询：get,keys,items,values,setdefault:有对应的键则返回对应的值，没有则返回默认给定的值</span><br></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;python的主要数据类型包括：&quot;&gt;&lt;a href=&quot;#python的主要数据类型包括：&quot; class=&quot;headerlink&quot; title=&quot;python的主要数据类型包括：&quot;&gt;&lt;/a&gt;python的主要数据类型包括：&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;int (整形)
      
    
    </summary>
    
    
    
      <category term="python" scheme="https://github.com/vp1009/vp1009.github.io.git/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>分页</title>
    <link href="https://github.com/vp1009/vp1009.github.io.git/2020/05/12/d_y/"/>
    <id>https://github.com/vp1009/vp1009.github.io.git/2020/05/12/d_y/</id>
    <published>2020-05-11T21:12:22.000Z</published>
    <updated>2020-05-12T15:34:37.567Z</updated>
    
    <content type="html"><![CDATA[<h4 id="分页后端逻辑"><a href="#分页后端逻辑" class="headerlink" title="分页后端逻辑"></a>分页后端逻辑</h4><pre class="highlight"><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GoodsList</span><span class="params">(APIView)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self,request)</span>:</span></span><br><span class="line">        <span class="comment">#当前页</span></span><br><span class="line">        page = request.GET.get(<span class="string">'page'</span>,<span class="number">1</span>)</span><br><span class="line">        <span class="comment">#一页显示的个数</span></span><br><span class="line">        size = request.GET.get(<span class="string">'size'</span>,<span class="number">1</span>)</span><br><span class="line">        <span class="comment">#计算从哪开始切</span></span><br><span class="line">        data_start = (int(page)<span class="number">-1</span>) *int(size)</span><br><span class="line">        <span class="comment">#计算切到哪</span></span><br><span class="line">        data_end = int(page) * int(size)</span><br><span class="line">        <span class="comment">#查询 切片成当前页数据</span></span><br><span class="line">        goods = Goods.objects.all()[data_start:data_end]</span><br><span class="line">        <span class="comment">#查询所有商品个数</span></span><br><span class="line">        count = Goods.objects.count()</span><br><span class="line">        <span class="comment">#序列化</span></span><br><span class="line">        goods_ser = GoodsSer(goods,many=<span class="literal">True</span>)</span><br><span class="line">        <span class="keyword">return</span> Response(&#123;<span class="string">'data'</span>:goods_ser.data,<span class="string">'total'</span>:count&#125;)</span><br></pre><h4 id="前端template中"><a href="#前端template中" class="headerlink" title="前端template中"></a>前端template中</h4><pre class="highlight"><span class="line">&lt;!-- heyui分页器 --&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">    &lt;Pagination v-model&#x3D;&quot;pagination&quot; @change&#x3D;&quot;get_goods&quot;&gt;&lt;&#x2F;Pagination&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br></pre><p>data中定义分页器变量</p><pre class="highlight"><span class="line">&#x2F;&#x2F;定义分页器变量</span><br><span class="line">  pagination:&#123;</span><br><span class="line">  page:2,</span><br><span class="line">  size:2,</span><br><span class="line">  total:5,</span><br><span class="line">  &#125;</span><br></pre><pre class="highlight"><span class="line">&#x2F;&#x2F; 获取商品类表接口</span><br><span class="line">  get_goods:function()&#123;</span><br><span class="line">&#x2F;&#x2F; 拼接路由</span><br><span class="line">  this.axios.get(&#39;http:&#x2F;&#x2F;127.0.0.1:8000&#x2F;goodslist&#x2F;&#39;,&#123;params:&#123;page:this.pagination.page,size:this.pagination.size&#125;&#125;).then((res&#x3D;&gt;&#123;</span><br><span class="line">  console.log(res)</span><br><span class="line"></span><br><span class="line">  this.goodslist &#x3D; res.data.data</span><br><span class="line">  </span><br><span class="line">&#x2F;&#x2F;将商品总数传递给total</span><br><span class="line">  this.pagination.total &#x3D; res.data.total</span><br><span class="line">  &#125;))</span><br><span class="line">  &#125;</span><br></pre><h4 id="获取文件"><a href="#获取文件" class="headerlink" title="获取文件"></a>获取文件</h4><pre class="highlight"><span class="line">图片：&lt;input type&#x3D;&quot;file&quot; ref&#x3D;&quot;upload&quot;&gt;&lt;br&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 接收表单数据</span><br><span class="line">var pc &#x3D; this.$refs.upload</span><br><span class="line">let file &#x3D; pc.files[0]</span><br></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;分页后端逻辑&quot;&gt;&lt;a href=&quot;#分页后端逻辑&quot; class=&quot;headerlink&quot; title=&quot;分页后端逻辑&quot;&gt;&lt;/a&gt;分页后端逻辑&lt;/h4&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl
      
    
    </summary>
    
    
    
      <category term="django" scheme="https://github.com/vp1009/vp1009.github.io.git/tags/django/"/>
    
  </entry>
  
  <entry>
    <title>简述详情页</title>
    <link href="https://github.com/vp1009/vp1009.github.io.git/2020/05/11/d_l/"/>
    <id>https://github.com/vp1009/vp1009.github.io.git/2020/05/11/d_l/</id>
    <published>2020-05-10T20:20:22.000Z</published>
    <updated>2020-09-02T01:23:36.516Z</updated>
    
    <content type="html"><![CDATA[<h4 id="后端代码"><a href="#后端代码" class="headerlink" title="后端代码"></a>后端代码</h4><pre class="highlight"><span class="line"><span class="comment"># 商品详情</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GoodInfo</span><span class="params">(APIView)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self,request)</span>:</span></span><br><span class="line">        id = request.GET.get(<span class="string">'id'</span>,<span class="literal">None</span>)</span><br><span class="line">        <span class="comment"># 查询</span></span><br><span class="line">        good = Goods.objects.get(id=id)</span><br><span class="line">        <span class="comment"># 序列化 </span></span><br><span class="line">        good_str = GoodsSer(good)</span><br><span class="line">        <span class="keyword">return</span> Response(good_str.data)</span><br></pre><p>前端代码</p><pre class="highlight"><span class="line">&#x2F;&#x2F; 带参跳转</span><br><span class="line">&lt;a :href&#x3D;&quot;&#39;http:&#x2F;&#x2F;127.0.0.1:8080&#x2F;item?id&#x3D;&#39;+item.id&quot;&gt;</span><br></pre><pre class="highlight"><span class="line">&#x2F;&#x2F; 获取商品id</span><br><span class="line"> this.id &#x3D; this.$route.query.id</span><br></pre><pre class="highlight"><span class="line">param:&#123;&#125;</span><br></pre><pre class="highlight"><span class="line"></span><br><span class="line"> &#x2F;&#x2F; 获取商品详情</span><br><span class="line">   get_good:function()&#123;</span><br><span class="line"> this.axios.get(&#39;http:&#x2F;&#x2F;127.0.0.1:8000&#x2F;goodinfo&#x2F;?id&#x3D;&#39;,&#123;params:&#123;&#39;id&#39;:this.id&#125;&#125;).then((res&#x3D;&gt;&#123;</span><br><span class="line"> console.log(res)</span><br><span class="line"> &#x2F;&#x2F; 赋值</span><br><span class="line"> this.info&#x3D;res.data</span><br><span class="line"> &#x2F;&#x2F; 类型转换</span><br><span class="line"> this.param &#x3D; JSON.parse(this.info.params)</span><br><span class="line"> &#125;))</span><br><span class="line">&#125;</span><br></pre><h4 id="展示规格"><a href="#展示规格" class="headerlink" title="展示规格"></a>展示规格</h4><pre class="highlight"><span class="line">颜色：&#123;&#123;param.color&#125;&#125; </span><br><span class="line">&lt;br&gt;</span><br><span class="line">尺码：&#123;&#123;param.size&#125;&#125;</span><br><span class="line">&lt;br&gt;</span><br><span class="line">季节：&#123;&#123;param.season&#125;&#125;</span><br></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;后端代码&quot;&gt;&lt;a href=&quot;#后端代码&quot; class=&quot;headerlink&quot; title=&quot;后端代码&quot;&gt;&lt;/a&gt;后端代码&lt;/h4&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#
      
    
    </summary>
    
    
    
      <category term="django" scheme="https://github.com/vp1009/vp1009.github.io.git/tags/django/"/>
    
  </entry>
  
  <entry>
    <title>简述逻辑外键</title>
    <link href="https://github.com/vp1009/vp1009.github.io.git/2020/05/11/j_b/"/>
    <id>https://github.com/vp1009/vp1009.github.io.git/2020/05/11/j_b/</id>
    <published>2020-05-10T19:20:22.000Z</published>
    <updated>2020-05-12T15:47:53.816Z</updated>
    
    <content type="html"><![CDATA[<h4 id="goods表创建逻辑外键"><a href="#goods表创建逻辑外键" class="headerlink" title="goods表创建逻辑外键"></a>goods表创建逻辑外键</h4><p>前端数据我需要做二次处理，获取表单数据进行二次处理，转成json数据，这样后端接收存入数据库。</p><h4 id="之后在添加方法中获取id-向后端发起请求"><a href="#之后在添加方法中获取id-向后端发起请求" class="headerlink" title="之后在添加方法中获取id 向后端发起请求"></a>之后在添加方法中获取id 向后端发起请求</h4><pre class="highlight"><span class="line"></span><br><span class="line">&#x2F;&#x2F; 添加商品事件</span><br><span class="line">submit:function()&#123;</span><br><span class="line">    &#x2F;&#x2F; 非空验证</span><br><span class="line">    if (this.name &#x3D;&#x3D; &#39;&#39;)&#123;</span><br><span class="line">        this.$Message(&quot;商品名称不能为空&quot;)</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        &#x2F;&#x2F; 存入字段为json</span><br><span class="line">        var param &#x3D; &#123;&#125;;</span><br><span class="line">        param[&#39;color&#39;] &#x3D; this.color</span><br><span class="line">        param[&#39;size&#39;] &#x3D; this.size</span><br><span class="line">        param[&#39;season&#39;] &#x3D; this.season</span><br><span class="line">        &#x2F;&#x2F;转为json数据</span><br><span class="line">        param&#x3D;JSON.stringify(param)</span><br><span class="line">        &#x2F;&#x2F; 接收表单数据</span><br><span class="line">        var pc &#x3D; this.$refs.upload</span><br><span class="line">        let file &#x3D; pc.files[0]</span><br><span class="line">        var data &#x3D; new FormData()</span><br><span class="line">        data.append(&#39;img&#39;,file)</span><br><span class="line">        data.append(&#39;flows&#39;,this.flows)</span><br><span class="line">        &#x2F;&#x2F; 反向赋值</span><br><span class="line">        data.append(&#39;cid&#39;,this.cate[this.selected])</span><br><span class="line">        &#x2F;&#x2F; 声明请求头</span><br><span class="line">        let config&#x3D;&#123;</span><br><span class="line">            &#39;Content-Type&#39;:&#39;multipart&#x2F;form-data&#39;</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F; 发起请求</span><br><span class="line">        this.axios.post(&#39;http:&#x2F;&#x2F;127.0.0.1:8000&#x2F;addgoods&#x2F;&#39;,data,config).then((res&#x3D;&gt;&#123;</span><br><span class="line">            console.log(res)</span><br><span class="line">            this.$Message(res.data.msg)</span><br><span class="line">        &#125;))</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre><p>把json数据存入规格字段中，cid存入外键的cid</p><p>之后，我们展示分类</p><pre class="highlight"><span class="line">// 定义规格名称</span><br><span class="line">color:<span class="string">''</span>,</span><br><span class="line">       size:<span class="string">''</span>,</span><br><span class="line">       season:<span class="string">''</span>,</span><br><span class="line">       // 分类表默认选中</span><br><span class="line">       selected:<span class="string">'衣服'</span>,</span><br><span class="line">       cate:[]，</span><br><span class="line">       // 接受商品分类</span><br><span class="line">       category:[]</span><br><span class="line">       </span><br><span class="line">       // 创建方法</span><br><span class="line">       </span><br><span class="line">       // 获取商品分类</span><br><span class="line">       get_cate:function()&#123;</span><br><span class="line">           //发送请求</span><br><span class="line">           this.axios.get('http://127.0.0.1:8000/cate/').then((res=&gt;&#123;</span><br><span class="line">               console.log(res)</span><br><span class="line">               // 二次处理数据</span><br><span class="line">               var mycate=[]</span><br><span class="line">               <span class="keyword">for</span>(let i=<span class="number">0</span>;i&lt;res.data.length;i++)&#123;</span><br><span class="line">                   mycate.push(res.data[i][<span class="string">'name'</span>])</span><br><span class="line">                   // 反向赋值 将分类表的id存入goods表中</span><br><span class="line">                   this.cate[res.data[i][<span class="string">'name'</span>]] = res.data[i][<span class="string">'id'</span>];</span><br><span class="line">               &#125;</span><br><span class="line">               // 赋值</span><br><span class="line">               this.category = mycate</span><br><span class="line">           &#125;))</span><br><span class="line">       &#125;,</span><br></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;goods表创建逻辑外键&quot;&gt;&lt;a href=&quot;#goods表创建逻辑外键&quot; class=&quot;headerlink&quot; title=&quot;goods表创建逻辑外键&quot;&gt;&lt;/a&gt;goods表创建逻辑外键&lt;/h4&gt;&lt;p&gt;前端数据我需要做二次处理，获取表单数据进行二次处理，转成js
      
    
    </summary>
    
    
    
      <category term="django" scheme="https://github.com/vp1009/vp1009.github.io.git/tags/django/"/>
    
  </entry>
  
  <entry>
    <title>暗夜模式配置</title>
    <link href="https://github.com/vp1009/vp1009.github.io.git/2020/05/10/a_s/"/>
    <id>https://github.com/vp1009/vp1009.github.io.git/2020/05/10/a_s/</id>
    <published>2020-05-10T05:53:00.000Z</published>
    <updated>2020-05-10T13:02:51.161Z</updated>
    
    <content type="html"><![CDATA[<h4 id="首先在页面找到您要修改的页面的选择器，之后在您的项目中js文件中进行搜索"><a href="#首先在页面找到您要修改的页面的选择器，之后在您的项目中js文件中进行搜索" class="headerlink" title="首先在页面找到您要修改的页面的选择器，之后在您的项目中js文件中进行搜索"></a>首先在页面找到您要修改的页面的选择器，之后在您的项目中js文件中进行搜索</h4><p>例如：</p><pre class="highlight"><span class="line">:root&#123;</span><br><span class="line">  --bg--color:&#39;#fff&#39;;</span><br><span class="line">  --a-color:&#39;black&#39;;</span><br><span class="line">&#125;</span><br><span class="line">a.navbar-brand, a.logo &#123;</span><br><span class="line">  font-family: &quot;Lato&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;</span><br><span class="line">  color:var(--a-color);</span><br><span class="line">  font-size: 2rem;</span><br><span class="line">  font-weight: bold;</span><br><span class="line">  margin-top: 0; &#125;</span><br><span class="line">  </span><br><span class="line"> .header &#123;</span><br><span class="line">  background:var(--bg-color);</span><br><span class="line">  min-height: 7em;</span><br><span class="line">  height: auto;</span><br><span class="line">  border-radius: 0;</span><br><span class="line">  width: 100%;</span><br><span class="line">  color: #444342;</span><br><span class="line">  padding-top: 1em;</span><br><span class="line">  padding-bottom: 1em;</span><br><span class="line">  border-bottom: 1px solid rgba(0, 0, 0, 0.05); &#125;</span><br><span class="line">  .header li.nav-item &#123;</span><br><span class="line">    font-size: 1.05em;</span><br><span class="line">    margin-left: .5em;</span><br><span class="line">    padding: .75em .35em; &#125;</span><br></pre><p>我们将颜色用变量控制</p><h4 id="通过变量控制"><a href="#通过变量控制" class="headerlink" title="通过变量控制"></a>通过变量控制</h4><pre class="highlight"><span class="line"># 声明变量</span><br><span class="line">:root&#123;</span><br><span class="line">  --bg--color:&#39;#fff&#39;;</span><br><span class="line">  --a-color:&#39;black&#39;;</span><br><span class="line">&#125;</span><br></pre><h4 id="使用变量"><a href="#使用变量" class="headerlink" title="使用变量"></a>使用变量</h4><pre class="highlight"><span class="line">&#x2F;&#x2F; 变量用法</span><br><span class="line">color:var(--a-color);</span><br></pre><h4 id="写方法控制背景和字体颜色"><a href="#写方法控制背景和字体颜色" class="headerlink" title="写方法控制背景和字体颜色"></a>写方法控制背景和字体颜色</h4><p>1 需要个开关按钮</p><pre class="highlight"><span class="line">&lt;h-switch v-model&#x3D;&quot;colors&quot; @change&#x3D;&quot;change_back&quot;&gt;白&#x2F;黑&lt;&#x2F;h-switch&gt;</span><br></pre><p>注：利用双向绑定给其默认值 </p><pre class="highlight"><span class="line">data()&#123;</span><br><span class="line">        return&#123;</span><br><span class="line">colors:0, &#x2F;&#x2F; 默认代表白色</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre><p>2 创建change_back方法</p><pre class="highlight"><span class="line">change_back:function()&#123;</span><br><span class="line">&#x2F;&#x2F; 获取样式表</span><br><span class="line">var styles &#x3D; getComputedStyle(document.documentElement) </span><br><span class="line">if (this.colors !&#x3D; 0 )&#123;</span><br><span class="line">&#x2F;&#x2F; 给背景赋值</span><br><span class="line">document.documentElement.style.setProperty(&#39;--bg-color&#39;,&quot;#292a2b&quot;)</span><br><span class="line">&#x2F;&#x2F; 设置字体颜色</span><br><span class="line">document.documentElement.style.setProperty(&#39;--a-color&#39;,&quot;white&quot;)</span><br><span class="line">&#125;else&#123;</span><br><span class="line">&#x2F;&#x2F; 给背景赋值</span><br><span class="line">document.documentElement.style.setProperty(&#39;--bg-color&#39;,&quot;#white&quot;)</span><br><span class="line">&#x2F;&#x2F; 设置字体颜色</span><br><span class="line">document.documentElement.style.setProperty(&#39;--a-color&#39;,&quot;#292a2b&quot;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre><p>注：切换到暗黑主题时我们将字体改成白色</p><h4 id="在指定时间运行代码"><a href="#在指定时间运行代码" class="headerlink" title="在指定时间运行代码"></a>在指定时间运行代码</h4><pre class="highlight"><span class="line">&#x2F;&#x2F; 指定时间运行代码</span><br><span class="line">runtime:function()&#123;;</span><br><span class="line">var data &#x3D; new Date()</span><br><span class="line">&#x2F;&#x2F; 获取当前hours</span><br><span class="line">var time &#x3D; data.getHours()</span><br><span class="line">if(time &#x3D;&#x3D; 22)&#123;</span><br><span class="line">&#x2F;&#x2F; 获取样式表</span><br><span class="line">var styles &#x3D; getComputedStyle(document.documentElement) </span><br><span class="line">&#x2F;&#x2F; 给背景赋值</span><br><span class="line">document.documentElement.style.setProperty(&#39;--bg-color&#39;,&quot;#292a2b&quot;)</span><br><span class="line">&#x2F;&#x2F; 设置字体颜色</span><br><span class="line">document.documentElement.style.setProperty(&#39;--a-color&#39;,&quot;white&quot;)</span><br><span class="line">this.$Message(&quot;夜深了 您以进入暗黑模式&quot;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre><p>到22:00的时候切换到自动切换到暗黑模式，在钩子方法调用这个方法。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;首先在页面找到您要修改的页面的选择器，之后在您的项目中js文件中进行搜索&quot;&gt;&lt;a href=&quot;#首先在页面找到您要修改的页面的选择器，之后在您的项目中js文件中进行搜索&quot; class=&quot;headerlink&quot; title=&quot;首先在页面找到您要修改的页面的选择器，之
      
    
    </summary>
    
    
    
      <category term="Django" scheme="https://github.com/vp1009/vp1009.github.io.git/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>首页轮播图展示</title>
    <link href="https://github.com/vp1009/vp1009.github.io.git/2020/05/09/lbt/"/>
    <id>https://github.com/vp1009/vp1009.github.io.git/2020/05/09/lbt/</id>
    <published>2020-05-08T20:50:20.000Z</published>
    <updated>2020-05-10T04:59:31.105Z</updated>
    
    <content type="html"><![CDATA[<p>需求：如果您是超级管理员可以修改轮播图权限，如果你是普通用户则浏览，没有权限，我们将轮播图作为动态浏览，通过前后端分离实现，等一些增删改查操作。</p><h4 id="首先我们做添加前端表单提交"><a href="#首先我们做添加前端表单提交" class="headerlink" title="首先我们做添加前端表单提交"></a>首先我们做添加前端表单提交</h4><pre class="highlight"><span class="line">标题：&lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;title&quot;&gt;</span><br><span class="line">连接：&lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;link&quot;&gt;</span><br><span class="line">上传图片：&lt;input type&#x3D;&quot;file&quot; @change&#x3D;&quot;addpc&quot;&gt;</span><br></pre><h4 id="双向绑定数据"><a href="#双向绑定数据" class="headerlink" title="双向绑定数据"></a>双向绑定数据</h4><pre class="highlight"><span class="line">data()&#123;</span><br><span class="line">return&#123;</span><br><span class="line">   &#x2F;&#x2F; 创建展示列表</span><br><span class="line">            carousel_list : [</span><br><span class="line">                &#123;   </span><br><span class="line">                    title:&#39;&#39;,</span><br><span class="line">                    link:&#39;&#39;,</span><br><span class="line">                    image:&#39;&#39;,</span><br><span class="line">                &#125;</span><br><span class="line">            &#x2F;&#x2F; 定义轮播图变量</span><br><span class="line">            title:&#39;&#39;,</span><br><span class="line">            link:&#39;&#39;,</span><br><span class="line">            image:&#39;&#39;,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre><h4 id="写change方法向后端发起请求"><a href="#写change方法向后端发起请求" class="headerlink" title="写change方法向后端发起请求"></a>写change方法向后端发起请求</h4><pre class="highlight"><span class="line">&#x2F;&#x2F; 向后端发起请求</span><br><span class="line">      addpc:function(e)&#123;</span><br><span class="line">          let data &#x3D; new FormData()</span><br><span class="line">          data.append(&#39;title&#39;,this.title)</span><br><span class="line">          data.append(&#39;link&#39;,this.link)</span><br><span class="line">          data.append(&#39;image&#39;,e.target.files[0])</span><br><span class="line">          &#x2F;&#x2F; 声明上传头部</span><br><span class="line">          let config&#x3D;&#123;</span><br><span class="line">              &#39;Content-Type&#39;:&#39;multipart&#x2F;form-data&#39;</span><br><span class="line">          &#125;</span><br><span class="line">          &#x2F;&#x2F; 发起请求</span><br><span class="line">          this.axios.post(&#39;http:&#x2F;&#x2F;127.0.0.1:8000&#x2F;addcarousel&#x2F;&#39;,data,config).then((res&#x3D;&gt;&#123;</span><br><span class="line">              console.log(res)</span><br><span class="line">              this.$Message(res.data.msg)</span><br><span class="line">              &#x2F;&#x2F; 刷新页面</span><br><span class="line">              this.$router.go(0)</span><br><span class="line">          &#125;))</span><br><span class="line">      &#125;</span><br></pre><h4 id="配置路由"><a href="#配置路由" class="headerlink" title="配置路由"></a>配置路由</h4><pre class="highlight"><span class="line">第一步：</span><br><span class="line">&#x2F;&#x2F; 导入</span><br><span class="line">import carouselin from &#39;@&#x2F;components&#x2F;carouselin&#39;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;配置路由</span><br><span class="line">      &#123;</span><br><span class="line">        path:&#39;&#x2F;carouselin&#39;,</span><br><span class="line">        name:&#39;carouselin&#39;,</span><br><span class="line">        component:carouselin,</span><br><span class="line">        beforeEnter:(to,from,next) &#x3D;&gt;&#123;</span><br><span class="line">          if (localStorage.getItem(&#39;type&#39;) &#x3D;&#x3D; 1)&#123;</span><br><span class="line">            console.log(&#39;欢迎超级管理员&#39;)</span><br><span class="line">            next();</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">          console.log(&#39;普通用户&#39;)</span><br><span class="line">          next(&#39;&#x2F;&#39;);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        path:&#39;&#x2F;upcarousel&#39;,</span><br><span class="line">        name:&#39;upcarousel&#39;,</span><br><span class="line">        component:upcarousel,</span><br><span class="line">        beforeEnter:(to,from,next) &#x3D;&gt;&#123;</span><br><span class="line">          if (localStorage.getItem(&#39;type&#39;) &#x3D;&#x3D; 1)&#123;</span><br><span class="line">            console.log(&#39;您有修改权限&#39;)</span><br><span class="line">            next();</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">          console.log(&#39;普您没有修改权限&#39;)</span><br><span class="line">          next(&#39;&#x2F;&#39;);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      &#125;</span><br></pre><p>注：在这里我们使用拦截器方法实现您不是超级管理员则没有权限操作跳转到轮播图修改，这个操作也很简单在您login页面登陆成功之后，将用户类型存入localstorage中，访问后台接口，前端获取他的类型存入localstorage，之后我们可以判断用户类型。</p><p>1 首先判断myheader头部，如果是超级管理，我们则给您跳转轮播图修改页面，普通用户则没有。</p><pre class="highlight"><span class="line">&#x2F;&#x2F; 在您的methods方法中</span><br><span class="line">data()&#123;</span><br><span class="line">return&#123;</span><br><span class="line">guanliyuan:0 &#x2F;&#x2F;默认是普通用户</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F; 判断管理员</span><br><span class="line">ifget:function()&#123;</span><br><span class="line">&#x2F;&#x2F; 首先判断用户是否注册管理员 如果没有则默认普通用户</span><br><span class="line">var guanliyuan &#x3D; localStorage.getItem(&quot;type&quot;)</span><br><span class="line">if (guanliyuan &#x3D;&#x3D; &#39;&#39;)&#123;</span><br><span class="line">this.guanliyuan.locale &#x3D; 0</span><br><span class="line">this.guanliyuan &#x3D; 0</span><br><span class="line">&#125;else&#123;</span><br><span class="line">if(guanliyuan &#x3D;&#x3D; 1)&#123;</span><br><span class="line">this.guanliyuan &#x3D; 1</span><br><span class="line">&#125;else&#123;</span><br><span class="line">this.guanliyuan &#x3D; 0</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre><p>2 在template中判断</p><pre class="highlight"><span class="line">&lt;div v-if&#x3D;&quot;guanliyuan &#x3D;&#x3D; 1&quot;&gt;</span><br><span class="line">&lt;Button&gt;</span><br><span class="line">&lt;router-link to&#x3D;&#39;carouselin&#39;&gt;跳转操作轮播图&lt;&#x2F;router-link&gt;</span><br><span class="line">&lt;&#x2F;Button&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre><p>这样就OK了！</p><h4 id="下来后端我们创建个轮播图库"><a href="#下来后端我们创建个轮播图库" class="headerlink" title="下来后端我们创建个轮播图库"></a>下来后端我们创建个轮播图库</h4><pre class="highlight"><span class="line"><span class="comment"># 轮播图 Base基类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Carousel</span><span class="params">(Base)</span>:</span></span><br><span class="line">    title = models.CharField(max_length=<span class="number">200</span>)</span><br><span class="line">    link = models.CharField(max_length=<span class="number">200</span>)</span><br><span class="line">    image = models.CharField(max_length=<span class="number">200</span>)</span><br><span class="line"><span class="comment"># 声明表名</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        db_table = <span class="string">'carousel'</span></span><br></pre><h4 id="创建OK之后我们写类视图添加方法"><a href="#创建OK之后我们写类视图添加方法" class="headerlink" title="创建OK之后我们写类视图添加方法"></a>创建OK之后我们写类视图添加方法</h4><pre class="highlight"><span class="line"><span class="comment"># 添加轮播图接口</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ACarousel</span><span class="params">(APIView)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(self,request)</span>:</span></span><br><span class="line">        <span class="comment"># 获取数据</span></span><br><span class="line">        title = request.POST.get(<span class="string">'title'</span>,<span class="literal">None</span>)</span><br><span class="line">        link = request.POST.get(<span class="string">'link'</span>,<span class="literal">None</span>)</span><br><span class="line">        image = request.FILES.get(<span class="string">'image'</span>)</span><br><span class="line">        print(title)</span><br><span class="line">        <span class="comment"># 排重</span></span><br><span class="line">        carousel = Carousel.objects.filter(title=title).first()</span><br><span class="line">        <span class="keyword">if</span> carousel:</span><br><span class="line">            <span class="keyword">return</span> Response(&#123;<span class="string">"code"</span>:<span class="number">404</span>,<span class="string">'msg'</span>:<span class="string">'轮播图已存在'</span>&#125;)</span><br><span class="line">        carousel = Carousel(title=title,link=link,image=<span class="string">'http://localhost:8000/static/upload/'</span>+ image.name)</span><br><span class="line">        carousel.save()</span><br><span class="line">        <span class="comment"># 建立文件流 存入本地</span></span><br><span class="line">        <span class="keyword">with</span> open(os.path.join(UPLOAD_ROOT,<span class="string">''</span>,image.name),<span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">            <span class="keyword">for</span> chunk <span class="keyword">in</span> image.chunks():</span><br><span class="line">                f.write(chunk)</span><br><span class="line">        <span class="keyword">return</span> Response(&#123;<span class="string">'code'</span>:<span class="number">200</span>,<span class="string">'msg'</span>:<span class="string">'成功'</span>&#125;)</span><br></pre><p>注：获取数据名，一定和前端传来的数据温和，否则为None。</p><h4 id="urls配置路由"><a href="#urls配置路由" class="headerlink" title="urls配置路由"></a>urls配置路由</h4><pre class="highlight"><span class="line">// 首先导入类视图</span><br><span class="line">// 之后配置路由</span><br><span class="line">    path(<span class="string">'getcarousel/'</span>,GetCarousel.as_view()), // 展示</span><br><span class="line">    path(<span class="string">'addcarousel/'</span>,ACarousel.as_view()),  // 添加</span><br><span class="line">    path(<span class="string">'delcarousel/'</span>,DelCarousel.as_view()), // 删除</span><br><span class="line">    path(<span class="string">'upcarousel/'</span>,Upcarousel.as_view())  // 修改</span><br></pre><h4 id="展示操作"><a href="#展示操作" class="headerlink" title="展示操作"></a>展示操作</h4><p>下面我们做的是展示，在做删除修改操作，首先我们想到的是将用户的id传到后台进行删改操作，所以我们在前端从数据库中获取数据展示轮播图。</p><p>1.请求后台轮播图接口</p><pre class="highlight"><span class="line">&#x2F;&#x2F; 请求轮播图接口</span><br><span class="line">      get_carousel:function()&#123;</span><br><span class="line">          this.axios.get(&#39;http:&#x2F;&#x2F;127.0.0.1:8000&#x2F;getcarousel&#x2F;&#39;).then((res&#x3D;&gt;&#123;</span><br><span class="line">              &#x2F;&#x2F; console.log(res)</span><br><span class="line">              &#x2F;&#x2F; 创建容器</span><br><span class="line">              var mylist&#x3D;[]</span><br><span class="line">              &#x2F;&#x2F; 遍历轮播图数组</span><br><span class="line">              for(let i&#x3D;0;i&lt;res.data.length;i++)&#123;</span><br><span class="line">                  console.log(res.data[i])</span><br><span class="line">                  &#x2F;&#x2F; 进行赋值</span><br><span class="line">                  mylist.push(&#123;title:res.data[i].title,link:res.data[i].link,image:res.data[i].image&#125;)</span><br><span class="line">                  this.carousel_list &#x3D; mylist</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;))</span><br><span class="line">      &#125;</span><br></pre><p>2 后台类视图函数</p><pre class="highlight"><span class="line"><span class="comment"># 轮播图后台接口</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GetCarousel</span><span class="params">(APIView)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self,request)</span>:</span></span><br><span class="line">        <span class="comment"># 读库</span></span><br><span class="line">        carousels = Carousel.objects.all()</span><br><span class="line">        <span class="comment"># 序列化操作</span></span><br><span class="line">        carousels_ser = CarouseSer(carousels,many=<span class="literal">True</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> Response(carousels_ser.data)</span><br></pre><p>3 回到前段进行展示</p><pre class="highlight"><span class="line">&#x2F;&#x2F; 再上门面我们已经定义，接收轮播图列表 carousel_list[]</span><br><span class="line">       &lt;table&gt;</span><br><span class="line">           &lt;tr&gt;</span><br><span class="line">               &lt;td&gt;标题&lt;&#x2F;td&gt;</span><br><span class="line">               &lt;td&gt;超链接&lt;&#x2F;td&gt;</span><br><span class="line">               &lt;td&gt;照片&lt;&#x2F;td&gt;</span><br><span class="line">               &lt;td&gt;操作&lt;&#x2F;td&gt;</span><br><span class="line">           &lt;&#x2F;tr&gt;</span><br><span class="line">           &lt;tr v-for&#x3D;&quot;(item,index) in carousel_list&quot;&gt;</span><br><span class="line">               &lt;td&gt;&#123;&#123;index+1&#125;&#125;&lt;&#x2F;td&gt;</span><br><span class="line">               &lt;td&gt;&#123;&#123;item.title&#125;&#125;&lt;&#x2F;td&gt;</span><br><span class="line">               &lt;td&gt;&#123;&#123;item.link&#125;&#125;&lt;&#x2F;td&gt;</span><br><span class="line">               &lt;td&gt;&lt;img :src&#x3D;&quot;item.image&quot; alt&#x3D;&quot;&quot; width&#x3D;&quot;100px&quot; height&#x3D;&quot;100px&quot;&gt;&lt;&#x2F;td&gt;</span><br><span class="line">               &lt;td&gt;</span><br><span class="line">                   &lt;Button @click&#x3D;&quot;delcarousel(item.id)&quot;&gt;删除&lt;&#x2F;Button&gt;</span><br><span class="line">                   &lt;Button @click&#x3D;&quot;upcarousel(item.id)&quot;&gt;修改&lt;&#x2F;Button&gt;</span><br><span class="line">               &lt;&#x2F;td&gt;</span><br><span class="line">           &lt;&#x2F;tr&gt;</span><br><span class="line">       &lt;&#x2F;table&gt;</span><br></pre><h4 id="删除轮播图"><a href="#删除轮播图" class="headerlink" title="删除轮播图"></a>删除轮播图</h4><p>1 我们将获取用户id传到方法函数中，将他传给后台进行删除操作</p><pre class="highlight"><span class="line">&#x2F;&#x2F; 删除轮播图</span><br><span class="line">       delcarousel:function(uid)&#123;</span><br><span class="line">           &#x2F;&#x2F;请求接口</span><br><span class="line">           this.axios.get(&#39;http:&#x2F;&#x2F;127.0.0.1:8000&#x2F;delcarousel&#x2F;&#39;,&#123;params:&#123;id:uid&#125;&#125;).then((res)&#x3D;&gt;&#123;</span><br><span class="line">               </span><br><span class="line">               console.log(uid)</span><br><span class="line"></span><br><span class="line">               this.$Message(res.data.msg)</span><br><span class="line">               &#x2F;&#x2F;刷新页面</span><br><span class="line">               this.$router.go(0)</span><br><span class="line">           &#125;)</span><br><span class="line">       &#125;</span><br></pre><p>2 后台类视图删除函数</p><pre class="highlight"><span class="line"><span class="comment"># 删除轮播图</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DelCarousel</span><span class="params">(APIView)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self,request)</span>:</span></span><br><span class="line">        <span class="comment">#获取id</span></span><br><span class="line">        aid = request.GET.get(<span class="string">"id"</span>,<span class="literal">None</span>)</span><br><span class="line">        print(aid)</span><br><span class="line">        <span class="comment"># 进行删除</span></span><br><span class="line">        carousel = Carousel.objects.filter(id=aid).delete()</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">if</span> carousel:</span><br><span class="line">                <span class="keyword">return</span> Response(&#123;<span class="string">'code'</span>:<span class="number">200</span>,<span class="string">'msg'</span>:<span class="string">'删除成功'</span>&#125;)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="keyword">return</span> Response(&#123;<span class="string">'code'</span>:<span class="number">200</span>,<span class="string">'msg'</span>:e&#125;)</span><br></pre><h4 id="修改轮播图"><a href="#修改轮播图" class="headerlink" title="修改轮播图"></a>修改轮播图</h4><p>1 我们给它一个跳转页面，跳转的同时带的您的用户id，也就是带参跳转。</p><pre class="highlight"><span class="line">&#x2F;&#x2F;跳转修改页面</span><br><span class="line">     upcarousel:function(id)&#123;</span><br><span class="line">         this.$router.push(&#123;&#39;path&#39;:&#39;&#x2F;upcarousel&#39;,query:&#123;id:id&#125;&#125;)</span><br><span class="line">     &#125;</span><br></pre><p>2 我们创建upcarousel修页面</p><pre class="highlight"><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;myheader&gt;&lt;&#x2F;myheader&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">          标题：&lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;title&quot;&gt;</span><br><span class="line">          连接：&lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;link&quot;&gt;</span><br><span class="line">          上传图片：&lt;input type&#x3D;&quot;file&quot; @change&#x3D;&quot;addpc&quot;&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">import myheader from &#39;.&#x2F;myheader&#39;</span><br><span class="line">export default &#123;</span><br><span class="line">  data()&#123;</span><br><span class="line">    return&#123;</span><br><span class="line">        &#x2F;&#x2F; 定义轮播图变量</span><br><span class="line">        title:&#39;&#39;,</span><br><span class="line">        link:&#39;&#39;,</span><br><span class="line">        image:&#39;&#39;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">    &#x2F;&#x2F; 注册组件标签</span><br><span class="line">    components:&#123;</span><br><span class="line">        &#39;myheader&#39;:myheader</span><br><span class="line">    &#125;,</span><br><span class="line">    mounted:function()&#123;</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line">    methods:&#123; </span><br><span class="line">        &#x2F;&#x2F; 向后端发起请求</span><br><span class="line">        addpc:function(e)&#123;</span><br><span class="line">            let data &#x3D; new FormData()</span><br><span class="line">            &#x2F;&#x2F; 接收id</span><br><span class="line">            data.append(&#39;id&#39;,this.$route.query.id)</span><br><span class="line">            data.append(&#39;title&#39;,this.title)</span><br><span class="line">            data.append(&#39;link&#39;,this.link)</span><br><span class="line">            data.append(&#39;image&#39;,e.target.files[0])</span><br><span class="line">            &#x2F;&#x2F; 声明上传头部</span><br><span class="line">            let config&#x3D;&#123;</span><br><span class="line">                &#39;Content-Type&#39;:&#39;multipart&#x2F;form-data&#39;</span><br><span class="line">            &#125;</span><br><span class="line">            &#x2F;&#x2F; 发起请求</span><br><span class="line">            this.axios.post(&#39;http:&#x2F;&#x2F;127.0.0.1:8000&#x2F;upcarousel&#x2F;&#39;,data,config).then((res&#x3D;&gt;&#123;</span><br><span class="line">                console.log(this.$route.query.id)</span><br><span class="line">                this.$Message(res.data.msg)</span><br><span class="line">                &#x2F;&#x2F; 刷新页面</span><br><span class="line">                this.$router.go(0)</span><br><span class="line">            &#125;))</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre><p>注：逻辑跟您添加页面一致，只不过传个id给后台</p><p>3 后台创建类视图修改函数</p><pre class="highlight"><span class="line"><span class="comment">#修改轮播图</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Upcarousel</span><span class="params">(APIView)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(self,request)</span>:</span></span><br><span class="line">        <span class="comment">#接收参数</span></span><br><span class="line">        aid = request.POST.get(<span class="string">'id'</span>,<span class="literal">None</span>)</span><br><span class="line">        print(aid)</span><br><span class="line">        title = request.POST.get(<span class="string">'title'</span>,<span class="literal">None</span>)</span><br><span class="line">        link = request.POST.get(<span class="string">'link'</span>,<span class="literal">None</span>)</span><br><span class="line">        image = request.FILES.get(<span class="string">'image'</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment">#过滤查询</span></span><br><span class="line">        carousel = Carousel.objects.filter(id=aid).first()</span><br><span class="line">        <span class="keyword">if</span> carousel:</span><br><span class="line">            <span class="comment"># 建立文件流 存入本地</span></span><br><span class="line">            <span class="keyword">with</span> open(os.path.join(UPLOAD_ROOT,<span class="string">''</span>,image.name),<span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">                <span class="keyword">for</span> chunk <span class="keyword">in</span> image.chunks():</span><br><span class="line">                    f.write(chunk)</span><br><span class="line">            <span class="comment">#重新入库</span></span><br><span class="line">            carousel.title = title</span><br><span class="line">            carousel.link = link</span><br><span class="line">            carousel.image = <span class="string">'http://localhost:8000/static/upload/'</span>+image.name</span><br><span class="line">            carousel.save()</span><br><span class="line">            <span class="keyword">return</span> Response(&#123;<span class="string">'code'</span>:<span class="number">200</span>,<span class="string">'msg'</span>:<span class="string">'修改成功'</span>&#125;)</span><br><span class="line">        <span class="keyword">return</span> Response(&#123;<span class="string">'code'</span>:<span class="number">400</span>,<span class="string">'msg'</span>:<span class="string">'修改失败'</span>&#125;)</span><br></pre><h4 id="完成"><a href="#完成" class="headerlink" title="完成"></a>完成</h4>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;需求：如果您是超级管理员可以修改轮播图权限，如果你是普通用户则浏览，没有权限，我们将轮播图作为动态浏览，通过前后端分离实现，等一些增删改查操作。&lt;/p&gt;
&lt;h4 id=&quot;首先我们做添加前端表单提交&quot;&gt;&lt;a href=&quot;#首先我们做添加前端表单提交&quot; class=&quot;heade
      
    
    </summary>
    
    
    
      <category term="python" scheme="https://github.com/vp1009/vp1009.github.io.git/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>国际化支持</title>
    <link href="https://github.com/vp1009/vp1009.github.io.git/2020/05/08/g_z/"/>
    <id>https://github.com/vp1009/vp1009.github.io.git/2020/05/08/g_z/</id>
    <published>2020-05-07T21:00:02.000Z</published>
    <updated>2020-05-08T14:02:01.488Z</updated>
    
    <content type="html"><![CDATA[<h4 id="首先-我们需要一个库：国际化支持模块"><a href="#首先-我们需要一个库：国际化支持模块" class="headerlink" title="首先 我们需要一个库：国际化支持模块"></a>首先 我们需要一个库：国际化支持模块</h4><pre class="highlight"><span class="line">npm install vue-i18n -- save</span><br></pre><p>save -&gt; 在当前项目下安装</p><h4 id="在您的项目main-js下-导入"><a href="#在您的项目main-js下-导入" class="headerlink" title="在您的项目main.js下 导入"></a>在您的项目main.js下 导入</h4><pre class="highlight"><span class="line">import VueI18n from &#39;vue-i18n&#39;</span><br></pre><h4 id="导入成功进行注册使用"><a href="#导入成功进行注册使用" class="headerlink" title="导入成功进行注册使用"></a>导入成功进行注册使用</h4><pre class="highlight"><span class="line">Vue.use(VueI18n)</span><br></pre><h4 id="在你的src下创建语言包文件"><a href="#在你的src下创建语言包文件" class="headerlink" title="在你的src下创建语言包文件"></a>在你的src下创建语言包文件</h4><pre class="highlight"><span class="line">文件夹名称  简写成：lang</span><br></pre><h4 id="在lang文件夹中创建中文包-zh-js-and英文包-en-js"><a href="#在lang文件夹中创建中文包-zh-js-and英文包-en-js" class="headerlink" title="在lang文件夹中创建中文包(zh.js)and英文包(en.js)"></a>在lang文件夹中创建中文包(zh.js)and英文包(en.js)</h4><pre class="highlight"><span class="line">例如：</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 双语规范的变量（英文）</span><br><span class="line">    export const m &#x3D; &#123;</span><br><span class="line">        &#39;index&#39;:&#39;Mei Duo Shp&#39;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F; 双语规范的变量（中文）</span><br><span class="line">    export const m &#x3D; &#123;</span><br><span class="line">        &#39;index&#39;:&#39;美多商城&#39;</span><br><span class="line">    &#125;</span><br></pre><h4 id="回到main-js-导入语言包"><a href="#回到main-js-导入语言包" class="headerlink" title="回到main.js 导入语言包"></a>回到main.js 导入语言包</h4><pre class="highlight"><span class="line">&#x2F;&#x2F; 导入语言包</span><br><span class="line">const i18n &#x3D; new VueI18n(&#123;</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; 当前默认语言的声明</span><br><span class="line">  locale:&#39;zh&#39;,</span><br><span class="line">  messages:&#123;</span><br><span class="line">     &#x2F;&#x2F; 相对路径</span><br><span class="line">    &#39;zh&#39;:require(&#39;.&#x2F;lang&#x2F;zh&#39;),</span><br><span class="line">    &#39;en&#39;:require(&#39;.&#x2F;lang&#x2F;en&#39;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 引用i18n</span><br><span class="line"></span><br><span class="line">new Vue(&#123;</span><br><span class="line">  el: &#39;#app&#39;,</span><br><span class="line">  router,</span><br><span class="line">  i18n, </span><br><span class="line">  components: &#123; App &#125;,</span><br><span class="line">  template: &#39;&lt;App&#x2F;&gt;&#39;,</span><br><span class="line">  render: h &#x3D;&gt; h(App)</span><br><span class="line">&#125;)</span><br></pre><h4 id="最后使用"><a href="#最后使用" class="headerlink" title="最后使用"></a>最后使用</h4><pre class="highlight"><span class="line">&#123;&#123;$t(&#39;m.index&#39;)&#125;&#125;</span><br><span class="line">m:代表规范的变量</span><br><span class="line">index: key的名称  也就是你自己定义的变量</span><br></pre><h4 id="在钩子方法中可以自动切换语言"><a href="#在钩子方法中可以自动切换语言" class="headerlink" title="在钩子方法中可以自动切换语言"></a>在钩子方法中可以自动切换语言</h4><p>指在浏览器中，例如默认是中文，我们就切换成中文，也就可以理解成老外访问直接是英文状态。</p><pre class="highlight"><span class="line">if(navigator.language &#x3D;&#x3D; &#39;en&#39;)&#123;</span><br><span class="line">&#x2F;&#x2F; 切换语言</span><br><span class="line">this.$i18n.locale &#x3D; &#39;en&#39;</span><br><span class="line">&#125;else&#123;</span><br><span class="line">this.$i18n.locale &#x3D; &#39;zh&#39;</span><br><span class="line">&#125;</span><br></pre><h4 id="添加个按钮切换语言"><a href="#添加个按钮切换语言" class="headerlink" title="添加个按钮切换语言"></a>添加个按钮切换语言</h4><p>首先我们得有个开关标签</p><pre class="highlight"><span class="line">&lt;h-switch v-model&#x3D;&quot;lang&quot; @change&#x3D;&quot;lang_change&quot;&gt;中&#x2F;英&lt;&#x2F;h-switch&gt;</span><br></pre><p>定义开关变量</p><pre class="highlight"><span class="line">data()&#123;</span><br><span class="line">       return&#123;</span><br><span class="line">&#x2F;&#x2F;定义开关变量</span><br><span class="line">lang:1  &#x2F;&#x2F; 代表中文</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;,</span><br></pre><p>定义切换时间 change  也就是在你methods方法中</p><pre class="highlight"><span class="line">methods:&#123;</span><br><span class="line">&#x2F;&#x2F; 切换方法</span><br><span class="line">lang_change:function()&#123;</span><br><span class="line">console.log(this.lang)</span><br><span class="line">if(this.lang &#x3D;&#x3D; true)&#123;</span><br><span class="line">&#x2F;&#x2F; 切换语言</span><br><span class="line">this.$i18n.locale &#x3D; &#39;zh&#39;</span><br><span class="line">localStorage.setItem(&#39;lang&#39;,&#39;zh&#39;)</span><br><span class="line">&#125;else&#123;</span><br><span class="line">this.$i18n.locale &#x3D; &#39;en&#39;</span><br><span class="line"></span><br><span class="line">localStorage.setItem(&#39;lang&#39;,&#39;en&#39;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">   &#125;</span><br></pre><p>简述逻辑： 首先我们在控制台打印按钮默认为1,0，也就时候判断是true，false。得到之后，我们需要判断如果lang为true 则赋值为中文，则else则是英文，同时我们将lang值存入localstorage中，在钩子函数中判断。首先我们考虑到问题是，用户是否点击按钮切换语言，只要用户发生动作，我们则记录在localstorage中，最终我们判断用户是否点过按钮，如果没有则默认赋值到localstorage里。</p><pre class="highlight"><span class="line">&#x2F;&#x2F; 判断本地local有没有</span><br><span class="line">var lang_locale &#x3D; localStorage.getItem(&quot;lang&quot;)</span><br><span class="line">if(lang_locale)&#123;</span><br><span class="line">this.$i18n.locale &#x3D; lang_locale</span><br><span class="line">if(lang_locale &#x3D;&#x3D; &#39;zh&#39;)&#123;</span><br><span class="line">this.lang &#x3D; 1</span><br><span class="line">&#125;else&#123;</span><br><span class="line">this.lang &#x3D; 0</span><br><span class="line">&#125;</span><br><span class="line">&#125;else&#123;</span><br><span class="line">this.$i18n.locale &#x3D; &#39;zh&#39;;</span><br><span class="line">this.lang &#x3D; 1</span><br><span class="line">&#125;</span><br></pre><p>以上代码，我们默认赋值为中文，里层的If是为变量双赋值！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;首先-我们需要一个库：国际化支持模块&quot;&gt;&lt;a href=&quot;#首先-我们需要一个库：国际化支持模块&quot; class=&quot;headerlink&quot; title=&quot;首先 我们需要一个库：国际化支持模块&quot;&gt;&lt;/a&gt;首先 我们需要一个库：国际化支持模块&lt;/h4&gt;&lt;pre clas
      
    
    </summary>
    
    
    
      <category term="python" scheme="https://github.com/vp1009/vp1009.github.io.git/tags/python/"/>
    
  </entry>
  
</feed>
