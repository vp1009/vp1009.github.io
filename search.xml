<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Django--模拟登陆注册</title>
    <url>/2020/04/23/django_lg/</url>
    <content><![CDATA[<h3 id="django-vue登陆注册"><a href="#django-vue登陆注册" class="headerlink" title="django+vue登陆注册"></a>django+vue登陆注册</h3><h4 id="登陆"><a href="#登陆" class="headerlink" title="登陆"></a>登陆</h4><p><strong>django后台做api</strong></p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">api_login</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    登陆接口，get和post方式</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">"GET"</span>:</span><br><span class="line">        <span class="keyword">return</span> HttpResponse(json.dumps(&#123;<span class="string">"code"</span>: <span class="number">404</span>&#125;))</span><br><span class="line">    <span class="keyword">elif</span> request.method == <span class="string">"POST"</span>:</span><br><span class="line">        info = request.POST</span><br><span class="line">        print(info)</span><br><span class="line">        <span class="comment"># 获取到数据以后，做逻辑判断，成功返回200，失败返回404</span></span><br><span class="line">        <span class="keyword">return</span> HttpResponse(json.dumps(&#123;<span class="string">"code"</span>: <span class="number">200</span>&#125;))</span><br></pre></td></tr></table></figure>

<p><strong>使用axios做ajax–post提交数据</strong></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span></span><br><span class="line">    export default &#123;</span><br><span class="line">        // 获取用户名和密码框输入的内容，用字典的形式返回</span><br><span class="line">        data:function()&#123;</span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">                username: <span class="string">''</span>,</span><br><span class="line">                password: <span class="string">''</span>,</span><br><span class="line">            &#125;            </span><br><span class="line">        &#125;,</span><br><span class="line">        methods:&#123;</span><br><span class="line">            </span><br><span class="line">            on_submit()&#123;</span><br><span class="line">                // 创建一个FormData()实例</span><br><span class="line">                let form_data = new FormData()</span><br><span class="line">                // Application/Json -&gt; request.POST(form-data)</span><br><span class="line">                // url: <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">8000</span>/api/register</span><br><span class="line">                form_data.append(<span class="string">'username'</span>, this.username)                </span><br><span class="line">                form_data.append(<span class="string">'password'</span>, this.password)</span><br><span class="line">                // 使用axios用post方式提交数据</span><br><span class="line">                axios(&#123;</span><br><span class="line">                    method: <span class="string">'post'</span>,</span><br><span class="line">                    url: <span class="string">'http://127.0.0.1:8000/apilogin/api_login/'</span>,</span><br><span class="line">                    data: form_data</span><br><span class="line">                &#125;).then(function(res)&#123;</span><br><span class="line">                    // 成功以后，返回的内容</span><br><span class="line">                    console.log(res)</span><br><span class="line">                    // 成功以后，做页面跳转</span><br><span class="line">                &#125;).catch((error)=&gt;&#123;</span><br><span class="line">                    // 失败以后，返回的内容</span><br><span class="line">                    console.log(error)</span><br><span class="line">                    // 失败以后，停留在当前页面</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<h4 id="注册"><a href="#注册" class="headerlink" title="注册"></a>注册</h4><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.response <span class="keyword">import</span> Response</span><br><span class="line"><span class="keyword">from</span> rest_framework.views <span class="keyword">import</span> APIView</span><br><span class="line"></span><br><span class="line"><span class="comment">#导入加密库</span></span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line"><span class="comment"># 导入数据库</span></span><br><span class="line"><span class="keyword">from</span> myapp.models <span class="keyword">import</span> User</span><br><span class="line"></span><br><span class="line"><span class="comment"># md5加密方法</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_password</span><span class="params">(mypass)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 生成md5对象</span></span><br><span class="line">    md5 = hashlib.md5()</span><br><span class="line">    <span class="comment">#转码操作</span></span><br><span class="line">    mypass_utf8 = str(mypass).encode(encoding=<span class="string">'utf-8'</span>)</span><br><span class="line">    <span class="comment"># 加密操作</span></span><br><span class="line">    md5.update(mypass_utf8)</span><br><span class="line">    <span class="comment">#返回密文</span></span><br><span class="line">    <span class="keyword">return</span> md5.hexdigest()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 注册接口</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Register</span><span class="params">(APIView)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self,request)</span>:</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 接收参数</span></span><br><span class="line">        username = request.GET.get(<span class="string">'username'</span>,<span class="literal">None</span>)</span><br><span class="line">        password = request.GET.get(<span class="string">'password'</span>,<span class="literal">None</span>)</span><br><span class="line">        img = request.GET.get(<span class="string">'img'</span>,<span class="literal">None</span>)</span><br><span class="line">        type = request.GET.get(<span class="string">'type'</span>,<span class="literal">None</span>)</span><br><span class="line">        phone = request.GET.get(<span class="string">'phone'</span>,<span class="literal">None</span>)</span><br><span class="line">        num = request.GET.get(<span class="string">'num'</span>,<span class="literal">None</span>)</span><br><span class="line">        <span class="comment"># 排重操作</span></span><br><span class="line">        user = User.objects.filter(username=username).first()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> user:</span><br><span class="line">            <span class="keyword">return</span> Response(&#123;<span class="string">'code'</span>:<span class="number">403</span>,<span class="string">'msg'</span>:<span class="string">'该用户已经存在'</span>&#125;)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 入库</span></span><br><span class="line">        user = User(username=username,password=make_password(password),</span><br><span class="line">                    phone=phone,img=img,type=type,num=num</span><br><span class="line">                    )</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 保存结果</span></span><br><span class="line">        user.save()</span><br><span class="line">        <span class="keyword">return</span> Response(&#123;<span class="string">'code'</span>:<span class="number">200</span>,<span class="string">'msg'</span>:<span class="string">'注册成功'</span>&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="脚本测试"><a href="#脚本测试" class="headerlink" title="脚本测试"></a>脚本测试</h4><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">'http://127.0.0.1:8000/register'</span></span><br><span class="line">params=&#123;</span><br><span class="line">    <span class="string">'username'</span>:<span class="string">'Amy'</span>,</span><br><span class="line">    <span class="string">'password'</span>:<span class="number">123</span>,</span><br><span class="line">    <span class="string">'img'</span>:<span class="string">'123123'</span>,</span><br><span class="line">    <span class="string">'num'</span>:<span class="number">1</span>,</span><br><span class="line">    <span class="string">'type'</span>:<span class="number">1</span>,</span><br><span class="line">    <span class="string">'phone'</span>:<span class="number">2212312312312312312213123133122</span>,</span><br><span class="line">&#125;</span><br><span class="line">res = requests.get(url=url, params=params)</span><br><span class="line">print(res.status_code)</span><br><span class="line">print(res.text)</span><br></pre></td></tr></table></figure>

<h4 id="清除pip缓存"><a href="#清除pip缓存" class="headerlink" title="清除pip缓存"></a>清除pip缓存</h4><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">打开命令行</span><br><span class="line">cd pip</span><br><span class="line">然后删除此文件夹下的cache文件就可以清除了</span><br></pre></td></tr></table></figure>

<h4 id="生成反向解析表"><a href="#生成反向解析表" class="headerlink" title="生成反向解析表"></a>生成反向解析表</h4><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">Python manage.py inspectdb &gt; mymodels.py</span><br></pre></td></tr></table></figure>


]]></content>
      <tags>
        <tag>Django</tag>
      </tags>
  </entry>
  <entry>
    <title>docker命令集</title>
    <url>/2020/04/26/docker/</url>
    <content><![CDATA[<h4 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h4><p>显示版本号</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">docker --versions</span><br></pre></td></tr></table></figure>



<p>显示镜像</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure>



<p>保存镜像 </p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">docker save -o /home/dyufei/tensorflow.tar tensorflow/tensorflow</span><br><span class="line">或者 </span><br><span class="line">docker save tensorflow/tensorflow &gt; /home/dyufei/tensorflow.tar</span><br></pre></td></tr></table></figure>



<p>加载镜像</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">docker load -i tensorflow.tar</span><br></pre></td></tr></table></figure>



<p>登录系统 镜像编号</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">docker run -ti <span class="number">6866</span></span><br><span class="line">docker run -it centos /bin/bash</span><br></pre></td></tr></table></figure>



<p>登录系统 容器编号</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">docker run -d --privileged=true mycentos /usr/sbin/init</span><br><span class="line">docker <span class="keyword">exec</span> –it 容器编号 /bin/bash</span><br></pre></td></tr></table></figure>



<p>进入虚拟机</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">docker-machine ssh</span><br></pre></td></tr></table></figure>



<p>挂载共享文件夹</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">docker run -v /www:/mnt/www</span><br></pre></td></tr></table></figure>



<p>查看所有容器</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">docker ps -a</span><br></pre></td></tr></table></figure>



<p>删除容器</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">docker rm</span><br></pre></td></tr></table></figure>



<p>后台启动服务和端口映射</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">docker run -it -d -p <span class="number">8000</span>:<span class="number">8000</span> mycentos cmd</span><br></pre></td></tr></table></figure>




<p>查看宿主ip</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">docker-machine ip default</span><br><span class="line"><span class="number">192.168</span><span class="number">.99</span><span class="number">.100</span></span><br></pre></td></tr></table></figure>




<p>查看容器编号</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">cat /proc/self/cgroup | head <span class="number">-1</span></span><br></pre></td></tr></table></figure>



<p>提交更改</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">docker commit 容器id 镜像名称</span><br></pre></td></tr></table></figure>



<p>删除镜像</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">docker rmi -f 镜像id</span><br></pre></td></tr></table></figure>



<p>检查系统</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">cat /etc/redhat-release</span><br></pre></td></tr></table></figure>



<p>退出镜像</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">exit</span><br><span class="line">docker run -it ubuntu:rename /bin/echo <span class="string">"Hello World"</span></span><br></pre></td></tr></table></figure>



<p>删除镜像缓存</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">docker ps -a | grep <span class="string">"Exited"</span> | awk <span class="string">'&#123;print $1 &#125;'</span>|xargs docker stop</span><br><span class="line"></span><br><span class="line">docker ps -a | grep <span class="string">"Exited"</span> | awk <span class="string">'&#123;print $1 &#125;'</span>|xargs docker rm</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Django--创建虚拟环境</title>
    <url>/2020/04/17/django_virtualenv/</url>
    <content><![CDATA[<h1 id="虚拟环境"><a href="#虚拟环境" class="headerlink" title="虚拟环境"></a>虚拟环境</h1><h3 id="为什么需要虚拟环境："><a href="#为什么需要虚拟环境：" class="headerlink" title="为什么需要虚拟环境："></a>为什么需要虚拟环境：</h3><p>到目前位置，我们所有的第三方包安装都是直接通过<code>pip install xx</code>的方式进行安装的，这样安装会将那个包安装到你的系统级的<code>Python</code>环境中。但是这样有一个问题，就是如果你现在用<code>Django 1.18.x</code>写了个网站，然后你的领导跟你说，之前有一个旧项目是用<code>Django 2.1.x</code>开发的，让你来维护，但是<code>Django 1.18.x</code>不再兼容<code>Django 2.1.x</code>的一些语法了。这时候就会碰到一个问题，我如何在我的电脑中同时拥有<code>Django 1.18.x</code>和<code>Django 2.1.x</code>两套环境呢？这时候我们就可以通过虚拟环境来解决这个问题。</p>
<h3 id="虚拟环境原理介绍："><a href="#虚拟环境原理介绍：" class="headerlink" title="虚拟环境原理介绍："></a>虚拟环境原理介绍：</h3><p>虚拟环境相当于一个抽屉，在这个抽屉中安装的任何软件包都不会影响到其他抽屉。并且在项目中，我可以指定这个项目的虚拟环境来配合我的项目。比如我们现在有一个项目是基于<code>Django 1.18.x</code>版本，又有一个项目是基于<code>Django 2.1.x</code>的版本，那么这时候就可以创建两个虚拟环境，在这两个虚拟环境中分别安装<code>Django 1.18.x</code>和<code>Django 2.1.x</code>来适配我们的项目。</p>
<h3 id="安装virtualenv："><a href="#安装virtualenv：" class="headerlink" title="安装virtualenv："></a>安装<code>virtualenv</code>：</h3><p><code>virtualenv</code>是用来创建虚拟环境的软件工具，我们可以通过<code>pip</code>或者<code>pip3</code>来安装：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip install virtualenv</span><br><span class="line">pip3 install virtualenv  # 一般在linux下用这个命令</span><br><span class="line">pip install virtualenvwrapper-win</span><br></pre></td></tr></table></figure>

<h3 id="创建虚拟环境："><a href="#创建虚拟环境：" class="headerlink" title="创建虚拟环境："></a>创建虚拟环境：</h3><p>创建虚拟环境非常简单，通过以下命令就可以创建了：</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># mkvirtualenv [虚拟环境的名字]</span></span><br><span class="line">mkvirtualenv py_dj2</span><br></pre></td></tr></table></figure>

<p>如果你当前的<code>Python3/Scripts</code>的查找路径在<code>Python2/Scripts</code>的前面，那么将会使用<code>python3</code>作为这个虚拟环境的解释器。如果<code>python2/Scripts</code>在<code>python3/Scripts</code>前面，那么将会使用<code>Python2</code>来作为这个虚拟环境的解释器。</p>
<h3 id="进入环境："><a href="#进入环境：" class="headerlink" title="进入环境："></a>进入环境：</h3><p>虚拟环境创建好了以后，那么可以进入到这个虚拟环境中，然后安装一些第三方包，进入虚拟环境在不同的操作系统中有不同的方式，一般分为两种，第一种是<code>Windows</code>，第二种是<code>Linux</code>：</p>
<ol>
<li><code>windows</code>进入虚拟环境：进入到虚拟环境的<code>Scripts</code>文件夹中，然后执行workon py_dj2。</li>
<li><code>Linux</code>进入虚拟环境：<code>source /path/to/virtualenv/bin/activate</code><br>一旦你进入到了这个虚拟环境中，你安装包，卸载包都是在这个虚拟环境中，不会影响到外面的环境。</li>
</ol>
<h3 id="退出虚拟环境："><a href="#退出虚拟环境：" class="headerlink" title="退出虚拟环境："></a>退出虚拟环境：</h3><p>退出虚拟环境很简单，通过一个命令就可以完成：<code>deactivate</code>。</p>
<h3 id="virtualenvwrapper："><a href="#virtualenvwrapper：" class="headerlink" title="virtualenvwrapper："></a>virtualenvwrapper：</h3><p><code>virtualenvwrapper</code>这个软件包可以让我们管理虚拟环境变得更加简单。不用再跑到某个目录下通过<code>virtualenv</code>来创建虚拟环境，并且激活的时候也要跑到具体的目录下去激活。</p>
<h4 id="安装virtualenvwrapper："><a href="#安装virtualenvwrapper：" class="headerlink" title="安装virtualenvwrapper："></a>安装<code>virtualenvwrapper</code>：</h4><ol>
<li>Linux：<code>pip install virtualenvwrapper</code>。</li>
<li>windows：<code>pip install virtualenvwrapper-win</code>。</li>
</ol>
<h4 id="virtualenvwrapper基本使用："><a href="#virtualenvwrapper基本使用：" class="headerlink" title="virtualenvwrapper基本使用："></a><code>virtualenvwrapper</code>基本使用：</h4><ol>
<li>创建虚拟环境：</li>
</ol>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">mkvirtualenv my_env</span><br></pre></td></tr></table></figure>

<p>   那么会在你当前用户下创建一个<code>Env</code>的文件夹，然后将这个虚拟环境安装到这个目录下。<br>   如果你电脑中安装了<code>python2</code>和<code>python3</code>，并且两个版本中都安装了<code>virtualenvwrapper</code>，那么将会使用环境变量中第一个出现的<code>Python</code>版本来作为这个虚拟环境的<code>Python</code>解释器。</p>
<ol start="2">
<li>切换到某个虚拟环境：</li>
</ol>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">workon my_env</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>退出当前虚拟环境：</li>
</ol>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">deactivate</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>删除某个虚拟环境：</li>
</ol>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">rmvirtualenv my_env</span><br></pre></td></tr></table></figure>

<ol start="5">
<li>列出所有虚拟环境：</li>
</ol>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">lsvirtualenv</span><br></pre></td></tr></table></figure>

<ol start="6">
<li>创建虚拟环境的时候指定<code>Python</code>版本：</li>
</ol>
<p>在使用<code>mkvirtualenv</code>的时候，可以指定<code>--python</code>的参数来指定具体的<code>python</code>路径：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mkvirtualenv --python&#x3D;&#x3D;C:\Python36\python.exe hy_env</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>Django</tag>
      </tags>
  </entry>
  <entry>
    <title>什么是Git ?</title>
    <url>/2020/04/20/gitix/</url>
    <content><![CDATA[<p>GIT，全称是分布式版本控制系统，git通常在编程中会用到，并且git支持分布式部署，可以有效、高速的处理从很小到非常大的项目版本管理。分布式相比于集中式的最大区别在于开发者可以提交到本地，每个开发者通过克隆（git clone），在本地机器上拷贝一个完整的Git仓库。</p>
<h3 id="git命令介绍"><a href="#git命令介绍" class="headerlink" title="git命令介绍"></a>git命令介绍</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">git clone 代码库的url</span><br><span class="line">将线上库克隆到本地</span><br><span class="line"></span><br><span class="line">git init</span><br><span class="line">初始化git</span><br><span class="line"></span><br><span class="line">git renote add origin (address) <span class="comment"># 仓库地址</span></span><br><span class="line">添加到远程仓库</span><br><span class="line"></span><br><span class="line">git add -A</span><br><span class="line">将工作区的修改提交到暂存区</span><br><span class="line"></span><br><span class="line">git commit -m <span class="string">'msg'</span></span><br><span class="line">将暂存区的文件或目录提交到版本库区</span><br><span class="line"></span><br><span class="line">git push origin master</span><br><span class="line">将提交到本地库中的内容推送到远程库中</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">查看日志：git log</span><br><span class="line">回滚（本地）：git reset --hard 版本id  </span><br><span class="line">回滚（服务器）：git push HEAD --force  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">git崩溃解决方法</span><br><span class="line"></span><br><span class="line">    <span class="number">1</span>):删除项目，全部重做</span><br><span class="line"></span><br><span class="line">    <span class="number">2</span>):删除.git，清空仓库，重新链接库，重新上传文件</span><br></pre></td></tr></table></figure>




]]></content>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>简易购物车代码</title>
    <url>/2020/04/22/gouwuche/</url>
    <content><![CDATA[<h3 id="如下"><a href="#如下" class="headerlink" title="如下"></a>如下</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">    &lt;table&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">    &lt;td&gt;名称&lt;/td&gt;</span><br><span class="line">    &lt;td&gt;数量&lt;/td&gt;</span><br><span class="line">    &lt;td&gt;价格&lt;/td&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">    &lt;tr v-<span class="keyword">for</span>=<span class="string">"(itemone,indexone) in tlist "</span> :key=<span class="string">"indexone"</span>&gt;</span><br><span class="line">    &lt;td&gt;</span><br><span class="line">        &#123;&#123; itemone.text &#125;&#125;</span><br><span class="line">    &lt;/td&gt;</span><br><span class="line"></span><br><span class="line">    &lt;td&gt;</span><br><span class="line">        &lt;button @click="numchange(indexone,'-')" &gt;-&lt;/button&gt;</span><br><span class="line">            &#123;&#123;itemone.num&#125;&#125;</span><br><span class="line">        &lt;button @click="numchange(indexone,'+')"&gt;+&lt;/button&gt;</span><br><span class="line">    &lt;/td&gt;</span><br><span class="line"></span><br><span class="line">    &lt;td&gt;</span><br><span class="line">        &#123;&#123; itemone.price &#125;&#125;</span><br><span class="line">    &lt;/td&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line"></span><br><span class="line">&lt;/table&gt;</span><br><span class="line">    总价格:&#123;&#123; totalprice() &#125;&#125;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default&#123;</span><br><span class="line">// 定义数据</span><br><span class="line">    data()&#123;</span><br><span class="line">    <span class="keyword">return</span>&#123;</span><br><span class="line">    tlist:[&#123;text:<span class="string">'汽车'</span>,num:<span class="number">1</span>,<span class="string">'price'</span>:<span class="number">100</span>&#125;,&#123;text:<span class="string">'化妆品'</span>,num:<span class="number">1</span>,<span class="string">'price'</span>:<span class="number">100</span>,&#125;,&#123;text:<span class="string">'衣服'</span>,num:<span class="number">1</span>,<span class="string">'price'</span>:<span class="number">100</span>&#125;,&#123;text:<span class="string">'书籍'</span>,num:<span class="number">1</span>,<span class="string">'price'</span>:<span class="number">100</span>&#125;],</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    //自定方法</span><br><span class="line">    methods:&#123;</span><br><span class="line">        // 计算总的价格 </span><br><span class="line">        totalprice:function()&#123;</span><br><span class="line">            let total =<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(var i=<span class="number">0</span>,l=this.tlist.length;i&lt;l;i++)&#123;</span><br><span class="line">                total += (this.tlist[i].num * this.tlist[i].price);</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="keyword">return</span> total;</span><br><span class="line">        &#125;,</span><br><span class="line">        // 自动清除操作</span><br><span class="line">        delete_one:function(indexone)&#123;</span><br><span class="line">            this.tlist.splice(indexone,<span class="number">1</span>);</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        // 购物车的加减操作</span><br><span class="line">        numchange:function(indexone,type)&#123;</span><br><span class="line">            <span class="keyword">if</span>(type==<span class="string">"+"</span>)&#123;</span><br><span class="line">            this.tlist[indexone].num ++</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (this.tlist[indexone].num &gt; <span class="number">1</span>) &#123;</span><br><span class="line">                    this.tlist[indexone].num --</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    this.delete_one(indexone);</span><br><span class="line">                    </span><br><span class="line">                &#125;	</span><br><span class="line">            &#125; </span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>如何使用Hexo创建博客</title>
    <url>/2020/04/21/hexo/</url>
    <content><![CDATA[<h3 id="什么是Hexo"><a href="#什么是Hexo" class="headerlink" title="什么是Hexo ?"></a>什么是Hexo ?</h3><p>Hexo 是一个快速、简洁且高效的博客框架。</p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>：安装hexo，在安装之前，需要安装的程序如下：</span><br><span class="line">    a): Node.js</span><br><span class="line">    b): Git</span><br><span class="line"><span class="number">2</span>: 安装hexo，打开终端，输入安装hexo命令：</span><br><span class="line">    npm install -g hexo-cli</span><br></pre></td></tr></table></figure>

<h3 id="建站"><a href="#建站" class="headerlink" title="建站"></a>建站</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>：安装Hexo之后，执行命令，Hexo会在指定文件夹中创建博客框架</span><br><span class="line">    hexo init &lt;blog&gt;</span><br><span class="line">    cd &lt;blog&gt;</span><br><span class="line"><span class="number">2</span>：新建完成后，目录如下：</span><br><span class="line">    _config.yml -&gt; 网站的 配置 信息，您可以在此配置大部分的参数。</span><br><span class="line">    package.json -&gt; 应用程序的信息。</span><br><span class="line">    scaffolds -&gt; 模版文件夹。当您新建文章时，Hexo 会根据 scaffold 来建立文件。</span><br><span class="line">    source -&gt; 资源文件夹是存放用户资源的地方。除 _posts 文件夹之外，开头命名为 _ (下划线)的文件 / 文件夹和隐藏的文件将会被忽略。Markdown 和 HTML 文件会被解析并放到 public 文件夹，而其他文件会被拷贝过去。</span><br><span class="line">    themes -&gt; 主题文件夹。Hexo 会根据主题来生成静态页面。</span><br><span class="line"><span class="number">3</span>：启动服务器</span><br><span class="line"></span><br><span class="line">    hexo server <span class="comment">#即可浏览博客</span></span><br></pre></td></tr></table></figure>

<h3 id="部署到git"><a href="#部署到git" class="headerlink" title="部署到git"></a>部署到git</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>：安装 hexo-deployer-git</span><br><span class="line"></span><br><span class="line">    npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>



<h3 id="修改hexo配置-config"><a href="#修改hexo配置-config" class="headerlink" title="修改hexo配置 # _config"></a>修改hexo配置 # _config</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">url: https:&#x2F;&#x2F;lu_hao_nan.gitee.io</span><br><span class="line">root: &#x2F;</span><br><span class="line"></span><br><span class="line">deploy:</span><br><span class="line">    type: git</span><br><span class="line">    repo: https:&#x2F;&#x2F;lu_hao_nan.gitee.io  # 库（Repository）地址</span><br><span class="line">    branch: master # 	分支名称</span><br></pre></td></tr></table></figure>



<h3 id="打包成public"><a href="#打包成public" class="headerlink" title="打包成public"></a>打包成public</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">hexo -clean</span><br><span class="line">hexo -d <span class="comment"># 开始部署</span></span><br><span class="line">hexo -g <span class="comment"># 生成新的public文件</span></span><br><span class="line"></span><br><span class="line">之后打包public远程推送到git上就点击服务gitee pages就可以启动啦！</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>滑动验证码</title>
    <url>/2020/04/27/huadong/</url>
    <content><![CDATA[<h4 id="在template中"><a href="#在template中" class="headerlink" title="在template中"></a>在template中</h4><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;drag-verify :width=<span class="string">"width"</span></span><br><span class="line">             :height=<span class="string">"height"</span></span><br><span class="line">             :text=<span class="string">"text"</span></span><br><span class="line">             ref=<span class="string">"Verify"</span>&gt;</span><br><span class="line">&lt;/drag-verify&gt;</span><br></pre></td></tr></table></figure>

<h4 id="在script设置属性–-gt-npm-install-vue-drag-verify-–save"><a href="#在script设置属性–-gt-npm-install-vue-drag-verify-–save" class="headerlink" title="在script设置属性–&gt; (npm install vue-drag-verify –save)"></a>在script设置属性–&gt; (npm install vue-drag-verify –save)</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 导包</span><br><span class="line">import dragVerify from &#39;vue-drag-verify&#39;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  data () &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      &#x2F;&#x2F; 在data里面设置滑动的属性</span><br><span class="line">      width: 320,</span><br><span class="line">      height: 42,</span><br><span class="line">      text: &#39;请将滑块拖到最右侧&#39;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;，</span><br><span class="line">  &#x2F;&#x2F; 注册标签</span><br><span class="line">  components: &#123;</span><br><span class="line">    &#39;dragVerify&#39;: dragVerify</span><br><span class="line">  &#125;,</span><br><span class="line">  &#x2F;&#x2F;检验是否拖动</span><br><span class="line">  methods：&#123;</span><br><span class="line">      &#x2F;&#x2F;滑块是否拖动false为未拖动至最右侧反之为true</span><br><span class="line">			if(this.$refs.Verify.isPassing &#x3D;&#x3D; false)&#123;</span><br><span class="line">				this.$Notice(&#39;请拖动滑块&#39;)</span><br><span class="line">			&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="使用selnium破解滑块"><a href="#使用selnium破解滑块" class="headerlink" title="使用selnium破解滑块"></a>使用selnium破解滑块</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from selenium import webdriverfrom selenium.webdriver import ChromeOptionsfrom selenium.webdriver import ActionChainsoption &#x3D; ChromeOptions()  # 实例化一个ChromeOptions对象option.add_experimental_option(&#39;excludeSwitches&#39;, [&#39;enable-automation&#39;])  # 以键值对的形式加入参数browser &#x3D; webdriver.Chrome(options&#x3D;option)#发起请求browser.get(&#39;http:&#x2F;&#x2F;127.0.0.1:8080&#x2F;login)#定位滑块button &#x3D; browser.find_element_by_class_name(&quot;dv_handler&quot;)action &#x3D; ActionChains(browser)#获取小球长度mybutton &#x3D; button.size.get(&#39;width&#39;)#获取滑块轨道总长mytext &#x3D; browser.find_element_by_class_name(&#39;dv_text&#39;).size.get(&#39;width&#39;)#按住拖动action.click_and_hold(button).perform()#拖动位置action.move_by_offset(int(mytext)-int(mybutton),0).perform()</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>安慰剂进度条</title>
    <url>/2020/05/07/jdt/</url>
    <content><![CDATA[<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">  &#x2F;&#x2F; 因为我们只有两种情况 所以使用v-show v-show默认是0  也可用v-if</span><br><span class="line">    &lt;Progress v-show&#x3D;&quot;load_int&quot; :percent&#x3D;&quot;load_int&quot; color&#x3D;&#39;green&#39;&gt;&lt;&#x2F;Progress&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">	data()&#123;</span><br><span class="line">		return&#123;</span><br><span class="line">			&#x2F;&#x2F; 定义变量</span><br><span class="line">			load_percnet&#x3D;&#39;&#39;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;,</span><br><span class="line">	methods:&#123;</span><br><span class="line">		&#x2F;&#x2F;在某方法下写入</span><br><span class="line">		</span><br><span class="line">            &#x2F;&#x2F; 上传过程中的方法</span><br><span class="line">            onUploadProgress:(e)&#x3D;&gt;&#123;</span><br><span class="line">              &#x2F;&#x2F; 计算上传百分比</span><br><span class="line">              var complete &#x3D; (e.loaded &#x2F; e.total)</span><br><span class="line">              &#x2F;&#x2F; 处理美化</span><br><span class="line">              if(complete &lt; 1)&#123;</span><br><span class="line">               &#x2F;&#x2F; %代表转换字符串</span><br><span class="line">                this.load_percent &#x3D; (complete * 100).toFixed(2) + &#39;%&#39;，</span><br><span class="line">                this.load_int &#x3D; parseInt((complete * 100).toFixed(2))</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">          &#x2F;&#x2F; 成功之后</span><br><span class="line">          </span><br><span class="line">          &#x2F;&#x2F; 直接赋值成百分之百</span><br><span class="line">          this.load_percent &#x3D; &#39;100%&#39;</span><br><span class="line">          &#x2F;&#x2F; 整形赋值</span><br><span class="line">          this.load_int &#x3D; 100;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>jwt认证</title>
    <url>/2020/05/07/jwt/</url>
    <content><![CDATA[<h4 id="JWT认证"><a href="#JWT认证" class="headerlink" title="JWT认证"></a>JWT认证</h4><p> <code>Json web token (JWT)</code>, 根据官网的定义，是为了在网络应用环境间传递声明而执行的一种基于JSON的开放标准（(RFC 7519).该token被设计为紧凑且安全的，特别适用于分布式站点的单点登录（SSO）场景。JWT的声明一般被用来在身份提供者和服务提供者间传递被认证的用户身份信息，以便于从资源服务器获取资源，也可以增加一些额外的其它业务逻辑所必须的声明信息，该token也可直接被用于认证，也可被加密 </p>
<h4 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h4><p>发送请求用户信息   —&gt;   axios(uid)(同时获取令牌)   —&gt;   获取uid查询数据库以Json的形式返回给前端（验证token成功返回）   —&gt;   发送请求用户信息（如果错误返回没有权限）(正确返回用户信息)</p>
<h4 id="token的构成"><a href="#token的构成" class="headerlink" title="token的构成"></a>token的构成</h4><ol>
<li>头部信息.载荷(playload) –&gt; uid或username</li>
<li>密钥</li>
<li>jwt=&gt;token</li>
</ol>
<h4 id="jwt安装"><a href="#jwt安装" class="headerlink" title="jwt安装"></a>jwt安装</h4><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">pip install pyjwt</span><br></pre></td></tr></table></figure>

<h4 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h4><ul>
<li><p>体积小,传输快</p>
</li>
<li><p>支持跨域验证</p>
</li>
<li><p>基本认证的一个优点是基本上所有流行的网页浏览器都支持基本认证。 </p>
</li>
</ul>
<h4 id="在用户登陆成功生成token"><a href="#在用户登陆成功生成token" class="headerlink" title="在用户登陆成功生成token"></a>在用户登陆成功生成token</h4><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">encode_jwt = jwt.encode(&#123;<span class="string">'uid'</span>: user.id&#125;, <span class="string">'qwe123'</span>, algorithm=<span class="string">'HS256'</span>)</span><br><span class="line">encode_str = str(encode_jwt, <span class="string">'utf-8'</span>)</span><br></pre></td></tr></table></figure>

<p> 将这个token交给前端，前端访问任意接口都将在header里带着jwt也就指token，用来做认证，我们把代码逻辑写成装饰器，这样前端访问那个接口，后端直接调用装饰器！</p>
<h4 id="定义装饰器"><a href="#定义装饰器" class="headerlink" title="定义装饰器"></a>定义装饰器</h4><p>因为在每次登陆时，我们将jwt的值存入localstorage中，所以我们在前端param传参将其读出，这样后端接收jwt 。</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 类视图专用</span></span><br><span class="line"><span class="keyword">from</span> django.utils.decorators <span class="keyword">import</span> method_decorator</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义权限检测装饰器</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_decorator</span><span class="params">(func)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(request, *args, **kwargs)</span>:</span></span><br><span class="line">        <span class="comment"># 接收参数</span></span><br><span class="line">        uid = request.GET.get(<span class="string">"uid"</span>, <span class="literal">None</span>)</span><br><span class="line">	    <span class="comment"># 变量不能是关键字 </span></span><br><span class="line">        myjwt = request.GET.get(<span class="string">"jwt"</span>, <span class="literal">None</span>)</span><br><span class="line"></span><br><span class="line">        print(myjwt)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 验证用户合法性</span></span><br><span class="line">        decode_jwt = jwt.decode(myjwt, <span class="string">'qwe123'</span>, algorithms=[<span class="string">'HS256'</span>])</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 进行比对</span></span><br><span class="line">        <span class="keyword">if</span> int(uid) != int(decode_jwt[<span class="string">'uid'</span>]):</span><br><span class="line">            <span class="keyword">return</span> Response(&#123;<span class="string">'code'</span>: <span class="number">401</span>, <span class="string">'message'</span>: <span class="string">'您的密钥无权限'</span>&#125;)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> func(request, *args, **kwargs)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">#  最后类视图使用method_decorator(装饰器名称)调用</span></span><br></pre></td></tr></table></figure>



<h4 id="载荷中加入生命周期"><a href="#载荷中加入生命周期" class="headerlink" title="载荷中加入生命周期"></a>载荷中加入生命周期</h4><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">playload = &#123;</span><br><span class="line">	// 代表过期时间        当前时间+延迟加载（以秒计时）</span><br><span class="line">	<span class="string">'exp'</span>: int((datatime.datatime.now() + datetime.timedelta(seconds=<span class="number">30</span>)).timestamp())  //强转时间戳 按照整形</span><br><span class="line">	<span class="string">'data'</span>:&#123;<span class="string">'uid'</span>:<span class="number">2</span>&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 生成</span></span><br><span class="line">encode_jwt = jwt.encode(playload,<span class="string">'lhn123'</span>,algorithm=<span class="string">'HS256'</span>)</span><br><span class="line"><span class="comment"># 转码</span></span><br><span class="line">encode_str = str(encode_jwt,<span class="string">'utf-8'</span>)</span><br><span class="line"><span class="comment"># 解密操作</span></span><br><span class="line">decode_jwt = jwt.decode(encode_str,<span class="string">'lhn123'</span>,algorithms=[<span class="string">'HS256'</span>])</span><br><span class="line">print(encode_str)</span><br><span class="line">print(decode_jwt[<span class="string">'uid'</span>])</span><br></pre></td></tr></table></figure>



]]></content>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>拦截器</title>
    <url>/2020/05/01/ljq/</url>
    <content><![CDATA[<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">beforeEnter:(to,from,next) =&gt;&#123;</span><br><span class="line">  <span class="keyword">if</span> (localStorage.getItem(<span class="string">"username"</span>))&#123;</span><br><span class="line">    console.log(<span class="string">'已经登陆'</span>)</span><br><span class="line">    next();</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">  console.log(<span class="string">'没有登陆'</span>)</span><br><span class="line">  next(<span class="string">'/login'</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>LocalStorage简介</title>
    <url>/2020/04/27/localStorage/</url>
    <content><![CDATA[<h4 id="localstorage（本地存储）与sessionStorage-会话存储"><a href="#localstorage（本地存储）与sessionStorage-会话存储" class="headerlink" title="localstorage（本地存储）与sessionStorage( 会话存储 )"></a>localstorage（本地存储）与sessionStorage( 会话存储 )</h4><p> localstorage（本地存储）以文件的方式存储在本地,永久保存（不主动删除，则一直存在）；sessionstorage( 会话存储 ) ,临时保存。 </p>
<p> localStorage和sessionStorage只能存储字符串类型，对于复杂的对象可以使用ECMAScript提供的JSON对象的stringify和parse来处理。 </p>
<h4 id="localstorage"><a href="#localstorage" class="headerlink" title="localstorage"></a>localstorage</h4><p> localStorage中一般浏览器支持的是4M大小，这个在不同的浏览器中localStorage会有所不同。 </p>
<h5 id="存储数据"><a href="#存储数据" class="headerlink" title="存储数据"></a>存储数据</h5><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">localStorage.setItem(<span class="string">"username"</span>,this.username)</span><br></pre></td></tr></table></figure>

<h5 id="获取数据"><a href="#获取数据" class="headerlink" title="获取数据"></a>获取数据</h5><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">name = localStorage.getItem(<span class="string">"username"</span>)</span><br></pre></td></tr></table></figure>

<h5 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h5><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">localStorage.removeItem(<span class="string">'username'</span>)</span><br></pre></td></tr></table></figure>

<h5 id="修改数据"><a href="#修改数据" class="headerlink" title="修改数据"></a>修改数据</h5><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">localStorage.setItem(<span class="string">'username'</span>, <span class="string">' '</span> + response.data.result.username)</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>localstorage</tag>
      </tags>
  </entry>
  <entry>
    <title>账号锁定功能</title>
    <url>/2020/04/29/lock/</url>
    <content><![CDATA[<h4 id="利用redis数据库实现账户锁定"><a href="#利用redis数据库实现账户锁定" class="headerlink" title="利用redis数据库实现账户锁定"></a>利用redis数据库实现账户锁定</h4><ul>
<li>需求 –&gt;  用户输入密码错误，连续错误三次以上，封锁账号在设定时间内不能再登录，直至封锁时间结束后用户才能再登录。 </li>
<li>首先我们用到redis中的 lpush – expire – ttl – llen 其方法</li>
</ul>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 建立连接连接</span></span><br><span class="line">host = <span class="string">"localhost"</span></span><br><span class="line">port = <span class="number">6379</span></span><br><span class="line">r = redis.Redis(host=host,port=port)</span><br><span class="line"><span class="comment">#用户名</span></span><br><span class="line">username = <span class="string">'123'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#账号密码输入错误5次后锁住账号逻辑</span></span><br><span class="line"><span class="comment">#列表操作</span></span><br><span class="line">r.lpush(username,<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#设置过期时间,单位是秒</span></span><br><span class="line">r.expire(username,<span class="number">30</span>)</span><br><span class="line"><span class="comment">#打印过期时间</span></span><br><span class="line">print(r.ttl(username))</span><br><span class="line"><span class="comment">#打印列表长度</span></span><br><span class="line">print(r.llen(username))</span><br><span class="line"><span class="keyword">if</span> r.llen(username) &gt; <span class="number">3</span>:</span><br><span class="line">    print(<span class="string">'你的账号被锁定'</span>)</span><br></pre></td></tr></table></figure>

<h4 id="以下是在项目中实现锁定功能"><a href="#以下是在项目中实现锁定功能" class="headerlink" title="以下是在项目中实现锁定功能"></a>以下是在项目中实现锁定功能</h4><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment">#登录接口</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Login</span><span class="params">(APIView)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self,request)</span>:</span></span><br><span class="line">        <span class="comment">#接收参数</span></span><br><span class="line">        username = request.GET.get(<span class="string">'username'</span>,<span class="literal">None</span>)</span><br><span class="line">        password = request.GET.get(<span class="string">'password'</span>,<span class="literal">None</span>)</span><br><span class="line">        <span class="comment">#验证验证码</span></span><br><span class="line">        <span class="keyword">if</span> code != redis_code:</span><br><span class="line">            <span class="keyword">return</span> Response(&#123;<span class="string">'code'</span>:<span class="number">403</span>,<span class="string">'message'</span>:<span class="string">'验证码错误'</span>&#125;)</span><br><span class="line">        <span class="comment">#如果用户的列表长度大于等于3</span></span><br><span class="line">        <span class="keyword">if</span> r.llen(username) &gt;= <span class="number">3</span>:</span><br><span class="line">            <span class="keyword">return</span> Response(&#123;<span class="string">'code'</span>:<span class="number">403</span>,<span class="string">'message'</span>:<span class="string">'你的账号已被锁定'</span>&#125;)</span><br><span class="line">        <span class="comment">#查询用户数据</span></span><br><span class="line">        user = User.objects.filter(username=username).first()</span><br><span class="line">        <span class="keyword">if</span> user:</span><br><span class="line">            <span class="comment">#比较密码是否一致，如果一致则登录成功</span></span><br><span class="line">            <span class="keyword">if</span> user.password == make_password(password):</span><br><span class="line">                <span class="keyword">return</span> Response(&#123;<span class="string">'code'</span>:<span class="number">200</span>,<span class="string">'message'</span>:<span class="string">'登陆成功'</span>,<span class="string">'uid'</span>:user.id,<span class="string">'username'</span>:user.username&#125;)</span><br><span class="line">            <span class="comment">#不一致则计数加1，返回密码错误</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                r.lpush(username,<span class="number">1</span>)</span><br><span class="line">                r.expire(username,<span class="number">30</span>)</span><br><span class="line">                <span class="keyword">return</span> Response(&#123;<span class="string">'code'</span>:<span class="number">403</span>,<span class="string">'message'</span>:<span class="string">'用户名或密码错误'</span>&#125;)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> Response(&#123;<span class="string">'code'</span>:<span class="number">403</span>,<span class="string">'message'</span>:<span class="string">'用户名或密码错误'</span>&#125;)</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>mongoDB语法</title>
    <url>/2020/04/20/mongoDB/</url>
    <content><![CDATA[<h4 id="mongoDB"><a href="#mongoDB" class="headerlink" title="mongoDB"></a>mongoDB</h4><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">数据库分为：关系型，非关系型</span><br><span class="line">关系型：Myspl，spllit</span><br><span class="line">非关系型：Redis，MongoDB</span><br><span class="line">主要区别：数据存储结构不同</span><br></pre></td></tr></table></figure>

<h4 id="库操作"><a href="#库操作" class="headerlink" title="库操作"></a>库操作</h4><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">查看：show dbs <span class="comment">#只能查看非空的库</span></span><br><span class="line">创库：use 库名</span><br><span class="line">新增：db.表名.insert(&#123;<span class="string">'key'</span>：<span class="string">'value'</span>&#125;)  <span class="comment">#如果给一个字典就添加一条，如果给一个列表就添加多条</span></span><br><span class="line">查看：db.表名.find(&#123;&#125;)  <span class="comment">#查看全部</span></span><br><span class="line">     show tables  <span class="comment">#查看库中所有的表</span></span><br><span class="line">     db  <span class="comment">#查看当前使用的库</span></span><br><span class="line">删除：db.表名.drop()  <span class="comment">#删表</span></span><br><span class="line">     db.dropDatabase()  <span class="comment">#删库</span></span><br></pre></td></tr></table></figure>



<h4 id="表操作"><a href="#表操作" class="headerlink" title="表操作"></a>表操作</h4><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment">#增：</span></span><br><span class="line">    新增：db.表名.insert(&#123;<span class="string">'key'</span>：<span class="string">'value'</span>&#125;)  <span class="comment">#如果给一个字典就添加一条，如果给一个列表就添加多条</span></span><br><span class="line">    插入一条：db.表名.insertOne(&#123;<span class="string">"key"</span>:<span class="string">'value'</span>&#125;)  <span class="comment">#给一个字典添加一条</span></span><br><span class="line">    插入多条：db.表名.insertMany([&#123;<span class="string">"key1"</span>:<span class="string">'value1'</span>&#125;,&#123;<span class="string">'key2'</span>,<span class="string">"value2"</span>&#125;])  <span class="comment">#给一个列表添加多条</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#查：条件中&#123;"_id":0&#125;意为不显示id</span></span><br><span class="line">    查看全部：db.表名.find(&#123;&#125;)  <span class="comment">#</span></span><br><span class="line">    排序：db.表名.find(&#123;&#125;).sort(&#123;<span class="string">"字段名"</span>:<span class="number">1</span>/<span class="number">-1</span>&#125;)  <span class="comment">#1代表升序 -1代表降序</span></span><br><span class="line">    分页：db.表名.find(&#123;&#125;).limit(个数)</span><br><span class="line">    等值查询：db.表名.find(&#123;<span class="string">"字段名"</span>:<span class="string">"value"</span>&#125;)</span><br><span class="line">    多值查询：db.表名.find(&#123;<span class="string">"字段名1"</span>:<span class="string">"value1"</span>，<span class="string">"字段名2"</span>:<span class="string">"value2"</span>&#125;)</span><br><span class="line">    包含查询：db.表名.find(&#123;$<span class="keyword">or</span>[&#123;<span class="string">"字段名1"</span>:<span class="string">"value1"</span>&#125;,&#123;<span class="string">"字段名2"</span>:<span class="string">"value2"</span>&#125;]&#125;)</span><br><span class="line">    非等值查询：db.表名.find(&#123;<span class="string">"字段名"</span>:&#123;条件：值&#125;&#125;)  <span class="comment">#大于$gt，小于$lt，大等$gte，小等$lte，不等$ne</span></span><br><span class="line">    正则查询(模糊查询)：db.表名.find(&#123;<span class="string">"字段名"</span>：&#123;$regex:<span class="string">"正则表达式"</span>&#125;&#125;)</span><br><span class="line">    </span><br><span class="line"><span class="comment">#改</span></span><br><span class="line">    db.表名.update(&#123;<span class="string">"存在的key"</span>:<span class="string">"存在的value"</span>&#125;,&#123;<span class="string">"存在的key"</span>:<span class="string">"修改后的value"</span>&#125;)  <span class="comment">#只改第一个符合条件的</span></span><br><span class="line">    db.表名.update(&#123;<span class="string">"存在的key"</span>:<span class="string">"存在的value"</span>&#125;,&#123;$set&#123;<span class="string">"存在的key"</span>:<span class="string">"修改后的value"</span>&#125;&#125;)  <span class="comment">#只改第一个符合条件的</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#删</span></span><br><span class="line">    删除一条：db.表名.remove(&#123;<span class="string">"key"</span>:<span class="string">"value"</span>&#125;)</span><br><span class="line">    删除所有数据：db.表名.remove(&#123;&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="python交互"><a href="#python交互" class="headerlink" title="python交互"></a>python交互</h4><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">   <span class="keyword">import</span> pymongo</span><br><span class="line">   conn = pymongo.MongoClient()</span><br><span class="line">   db = conn.库名</span><br><span class="line">   table = db.表名</span><br><span class="line">   <span class="comment">#增</span></span><br><span class="line">   table.insert(&#123;<span class="string">'key'</span>：<span class="string">'value'</span>&#125;) <span class="comment">#如果给一个字典就添加一条，如果给一个列表就添加多条</span></span><br><span class="line">   table.insert_one(&#123;<span class="string">'key'</span>：<span class="string">'value'</span>&#125;)  <span class="comment">#添加一条</span></span><br><span class="line">    teble.insertMany([&#123;<span class="string">"key1"</span>:<span class="string">'value1'</span>&#125;,&#123;<span class="string">'key2'</span>,<span class="string">"value2"</span>&#125;])  <span class="comment">#给一个列表添加多条</span></span><br><span class="line"><span class="comment">#查</span></span><br><span class="line">   table.find(&#123;&#125;)  <span class="comment">#返回的是一个mongo对象，可以用list强转或者for循环遍历</span></span><br><span class="line">   <span class="comment">#改</span></span><br><span class="line">   table.update_one(&#123;<span class="string">"key1"</span>:<span class="string">"value1"</span>&#125;,&#123;<span class="string">"key1"</span>:<span class="string">"value2"</span>&#125;)  <span class="comment">#修改</span></span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>微博的第三方登陆</title>
    <url>/2020/04/28/login_weibo/</url>
    <content><![CDATA[<h4 id="申请新浪微博应用流程"><a href="#申请新浪微博应用流程" class="headerlink" title="申请新浪微博应用流程"></a>申请新浪微博应用流程</h4><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">创建微博账号 --&gt; 完善开发者信息 --&gt; 点击应用 --&gt; 如果没有应用我们 点击微连接 --&gt;网站接入 --&gt; 点击立即接入 --&gt; 创建就OK</span><br><span class="line"></span><br><span class="line">创建完成后 -- 点击应用信息</span><br><span class="line"></span><br><span class="line"> <span class="number">1</span>  App Key：<span class="number">4216464481</span> -- appID</span><br><span class="line">    App Secret：a58f0f7f68a0c78fecbb150c163035c9 -- app秘钥</span><br><span class="line"> <span class="number">2</span> 高级信息 -- 自定义回调页</span><br><span class="line"> <span class="number">3</span> 测试信息 -- 加入测试账号</span><br></pre></td></tr></table></figure>



<h4 id="第三方登陆流程图"><a href="#第三方登陆流程图" class="headerlink" title="第三方登陆流程图"></a>第三方登陆流程图</h4><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">login (登陆页面)--&gt;新浪微博拼接跳转地址--&gt;新浪微博登陆--&gt;1:如果登陆不成功，则需找回密码 2:如果成功</span><br><span class="line">2 --&gt; 成功之后，回调到django系统 返回code --&gt; 后端接收code，利用code和新浪微博交换token,token带表获取新浪微博的名称 -----&gt;&gt;&gt; 以下 有两种情况</span><br><span class="line">						</span><br><span class="line">			1：曾经登陆过--&gt; 我们直接帮助用户登陆</span><br><span class="line">			<span class="number">2</span>：如果没有登陆过，我直接存入到user库中</span><br><span class="line">			</span><br><span class="line">			   最后共同目标将账号返回给前端</span><br></pre></td></tr></table></figure>



<h4 id="创建-click点击事件"><a href="#创建-click点击事件" class="headerlink" title="创建@click点击事件"></a>创建@click点击事件</h4><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">// 新浪微博</span><br><span class="line">xinliang:function()&#123;</span><br><span class="line"></span><br><span class="line">	//拼接url</span><br><span class="line"> 		let clinet_id = <span class="number">4216464481</span>;</span><br><span class="line"></span><br><span class="line"> 		let url = <span class="string">"https://api.weibo.com/oauth2/authorize?client_id=4216464481&amp;redirect_uri=http://127.0.0.1:8000/md_admin_weibo"</span>;</span><br><span class="line"></span><br><span class="line"> 		//跳转</span><br><span class="line">	  window.location.href = url;</span><br><span class="line">&#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>



<h4 id="将urls路由中配置回调参数"><a href="#将urls路由中配置回调参数" class="headerlink" title="将urls路由中配置回调参数"></a>将urls路由中配置回调参数</h4><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">path(<span class="string">'md_admin_weibo/'</span>,wb_back),</span><br></pre></td></tr></table></figure>



<h4 id="获取code值"><a href="#获取code值" class="headerlink" title="获取code值"></a>获取code值</h4><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">wb_back</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="comment"># 接收参数</span></span><br><span class="line">    code = request.GET.get(<span class="string">'code'</span>, <span class="literal">None</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 定义token接口地址</span></span><br><span class="line">    url = <span class="string">"https://api.weibo.com/oauth2/access_token"</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 定义参数</span></span><br><span class="line">    re = requests.post(url, data=&#123;</span><br><span class="line">        <span class="string">"client_id"</span>: <span class="string">"4216464481"</span>,</span><br><span class="line">        <span class="string">"client_secret"</span>: <span class="string">"a58f0f7f68a0c78fecbb150c163035c9"</span>,</span><br><span class="line">        <span class="string">"grant_type"</span>: <span class="string">"authorization_code"</span>, <span class="comment"># 写死</span></span><br><span class="line">        <span class="string">"code"</span>: code,</span><br><span class="line">        <span class="comment"># 回调的地址</span></span><br><span class="line">        <span class="string">"redirect_uri"</span>: <span class="string">"http://127.0.0.1:8000/md_admin_weibo"</span></span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure>

<h5 id="post-请求-是将access-token值-取出来，-还有你的微博user-id"><a href="#post-请求-是将access-token值-取出来，-还有你的微博user-id" class="headerlink" title="post 请求 是将access_token值 取出来， 还有你的微博user_id"></a>post 请求 是将access_token值 取出来， 还有你的微博user_id</h5><h4 id="之后换取新浪微博用户昵称"><a href="#之后换取新浪微博用户昵称" class="headerlink" title="之后换取新浪微博用户昵称"></a>之后换取新浪微博用户昵称</h4><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">res = requests.get(<span class="string">'https://api.weibo.com/users/show.json'</span>,params=&#123;<span class="string">'access_token'</span>:re.json()[<span class="string">'access_token'</span>],<span class="string">'uid'</span>:re.json()[<span class="string">'uid'</span>]&#125;)</span><br><span class="line"></span><br><span class="line">    sina_id = <span class="string">''</span>  <span class="comment"># 1009_nan</span></span><br><span class="line">    user_id = <span class="string">''</span>  <span class="comment"># 10</span></span><br><span class="line">    <span class="comment"># 判断是否用新浪微博登陆过</span></span><br><span class="line">    user = User.objects.filter(username=str(res.json()[<span class="string">'name'</span>])).first()</span><br><span class="line">    <span class="keyword">if</span> user:</span><br><span class="line">        <span class="comment"># 代表曾经用账号登陆过</span></span><br><span class="line">        sina_id = user.username</span><br><span class="line">        user_id = user.id</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># 首次登陆，入库新浪微博账号</span></span><br><span class="line">        user = User(username=str(res.json()[<span class="string">'name'</span>]),password=<span class="string">''</span>)</span><br><span class="line">        user.save()</span><br><span class="line">        user = User.objects.filter(username=str(res.json()[<span class="string">'name'</span>])).first()</span><br><span class="line">    <span class="comment"># 重定向到主页面</span></span><br><span class="line">    <span class="keyword">return</span> redirect(<span class="string">"http://localhost:8080?sina_id="</span>+str(sina_id)+<span class="string">"&amp;uid="</span>+str(user_id))</span><br></pre></td></tr></table></figure>



<h4 id="返回前端-接收第三方参数"><a href="#返回前端-接收第三方参数" class="headerlink" title="返回前端 接收第三方参数"></a>返回前端 接收第三方参数</h4><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">var sina_id = this.$route.query.sina_id  // weibo名称</span><br><span class="line">var user_id = this.$route.query.uid   // userid</span><br><span class="line"><span class="keyword">if</span> (sina_id)&#123;</span><br><span class="line">	//自动帮用户进行登录操作</span><br><span class="line">	// 存入localStorage 取则用localStorage.getItem()</span><br><span class="line">	localStorage.setItem(<span class="string">"username"</span>,sina_id)</span><br><span class="line">	localStorage.setItem(<span class="string">"uid"</span>,user_id)</span><br><span class="line">	this.username = sina_id</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





]]></content>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>文件上传功能</title>
    <url>/2020/04/30/pc/</url>
    <content><![CDATA[<h4 id="上传文件流程"><a href="#上传文件流程" class="headerlink" title="上传文件流程"></a>上传文件流程</h4><p>vue.js–&gt;axios–&gt;django接口–&gt;file来写文件–&gt;文件操作(可压缩文件，可同步到七牛云-又拍云)–&gt;提取文件名称–&gt;vue.js</p>
<h4 id="上传文件vue-js"><a href="#上传文件vue-js" class="headerlink" title="上传文件vue.js"></a>上传文件vue.js</h4><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">        &lt;table&gt;</span><br><span class="line">          &lt;tr&gt;</span><br><span class="line">            // Avatar 使图片展示为圆形</span><br><span class="line">            &lt;Avatar :src="src" :width="150" height="150px"&gt;&lt;/Avatar&gt;</span><br><span class="line">          &lt;/tr&gt;</span><br><span class="line"></span><br><span class="line">          &lt;tr&gt;</span><br><span class="line">            &lt;td&gt;用户头像：&lt;/td&gt;</span><br><span class="line">            //当图片发生改变是@change不是click点击</span><br><span class="line">            &lt;td&gt;&lt;input type="file" @change="upload"&gt;&lt;/td&gt;</span><br><span class="line">          &lt;/tr&gt;</span><br><span class="line"></span><br><span class="line">        &lt;/table&gt;</span><br><span class="line"></span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">// <span class="keyword">return</span>中定义s变量</span><br><span class="line"></span><br><span class="line">src:<span class="string">''</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//上传文件</span><br><span class="line">    upload:function (e) &#123;</span><br><span class="line"></span><br><span class="line">      //获取文件</span><br><span class="line">      let file = e.target.files[<span class="number">0</span>];</span><br><span class="line">      //声明表单参数</span><br><span class="line">      let param = new FormData();</span><br><span class="line"></span><br><span class="line">      param.append(<span class="string">'file'</span>,file,file.name);</span><br><span class="line"></span><br><span class="line">      //声明请求头</span><br><span class="line">       let config = &#123;headers:&#123;<span class="string">'Content-Type'</span>:<span class="string">'multipart/form-data'</span>&#125;&#125;;</span><br><span class="line"></span><br><span class="line">      // 发送请求</span><br><span class="line">      this.axios.post('http://localhost:8000/upload/',param,config).then((res)=&gt;&#123;</span><br><span class="line">      </span><br><span class="line">            console.log(res);</span><br><span class="line">            </span><br><span class="line">            //图片的路径要拼接起来</span><br><span class="line">            this.src = <span class="string">'http://localhost:8000/static/upload/'</span>+res.data.filename;</span><br><span class="line">            </span><br><span class="line">      &#125;)</span><br><span class="line">      </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<h4 id="配置setting文件上传路径"><a href="#配置setting文件上传路径" class="headerlink" title="配置setting文件上传路径"></a>配置setting文件上传路径</h4><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">STATIC_URL = <span class="string">'/static/'</span></span><br><span class="line"></span><br><span class="line">STATICFILES_DIRS[</span><br><span class="line">	os.path.join(BASE_DIR,<span class="string">'static'</span>)</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment">#定义文件夹</span></span><br><span class="line">UPLOAD_ROOT = os.path.join(BASE_DIR,<span class="string">'static/upload'</span>)</span><br></pre></td></tr></table></figure>



<h4 id="上传文件接口"><a href="#上传文件接口" class="headerlink" title="上传文件接口"></a>上传文件接口</h4><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment">#导入上传文件夹配置</span></span><br><span class="line"><span class="keyword">from</span> mydjango.settings <span class="keyword">import</span> UPLOAD_ROOT</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="comment">#文件上传通用类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UploadFile</span><span class="params">(APIView)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(self,request)</span>:</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">#接收参数</span></span><br><span class="line">        myfile = request.FILES.get(<span class="string">'file'</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment">#建立文件流对象</span></span><br><span class="line">        f = open(os.path.join(UPLOAD_ROOT,<span class="string">''</span>,myfile.name.replace(<span class="string">'"'</span>,<span class="string">''</span>)),<span class="string">'wb'</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment">#写入</span></span><br><span class="line">        <span class="keyword">for</span> chunk <span class="keyword">in</span> myfile.chunks():</span><br><span class="line">            f.write(chunk)</span><br><span class="line">        f.close()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Response(&#123;<span class="string">'filename'</span>:myfile.name.replace(<span class="string">'"'</span>,<span class="string">''</span>)&#125;)</span><br></pre></td></tr></table></figure>







]]></content>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>图片压缩水印</title>
    <url>/2020/04/29/pcys/</url>
    <content><![CDATA[<h4 id="图片压缩"><a href="#图片压缩" class="headerlink" title="图片压缩"></a>图片压缩</h4><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment">#压缩 两种压缩模式，png不适合压缩，jpg适合</span></span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="comment">#读图</span></span><br><span class="line">img = cv2.imread(<span class="string">'./dingding.png'</span>)</span><br><span class="line"><span class="comment">#开始压缩 png压缩等级清晰0-9模糊</span></span><br><span class="line">cv2.imwrite(<span class="string">'./dingding1.png'</span>,img,[cv2.IMWRITE_PNG_COMPRESSION,<span class="number">5</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">#jpg压缩等级清晰0-100模糊 </span></span><br><span class="line">cv2.imwrite(<span class="string">'./dingding1.jpg'</span>,img,[cv2.IMWRITE_JPEG_QUALITY,<span class="number">50</span>])</span><br></pre></td></tr></table></figure>

<h4 id="加水印"><a href="#加水印" class="headerlink" title="加水印"></a>加水印</h4><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment">#绘画库</span></span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> ImageDraw</span><br><span class="line"><span class="comment">#字体库</span></span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> ImageFont</span><br><span class="line"><span class="comment">#图片库</span></span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line"><span class="comment">#加水印</span></span><br><span class="line">img = Image.open(<span class="string">'.//static/upload/'</span>+myfile_name)</span><br><span class="line"><span class="comment"># 获取宽高</span></span><br><span class="line">width, height = img.size</span><br><span class="line"><span class="comment"># 根据图片大小定义logo大小</span></span><br><span class="line">text = <span class="string">'哈哈哈'</span></span><br><span class="line"><span class="comment">#字体</span></span><br><span class="line">font = ImageFont.truetype(font=<span class="string">'C:\Windows\Fonts\FZXKJW.TTF'</span>,size=<span class="number">35</span>)</span><br><span class="line"><span class="comment"># 获取字体宽高</span></span><br><span class="line">font_width, font_height = font.getsize(text)</span><br><span class="line"><span class="comment"># 使用画笔</span></span><br><span class="line">draw = ImageDraw.Draw(img)</span><br><span class="line"><span class="comment"># 写入文本 参数（（x,y），水印文字，颜色，字体）</span></span><br><span class="line">draw.text((width-font_width,height-font_height), text,fill=(<span class="number">76</span>,<span class="number">234</span>,<span class="number">124</span>,<span class="number">180</span>), font=font)</span><br><span class="line"><span class="comment"># 根据路径保存文件 </span></span><br><span class="line">img.save(os.path.join(UPLOAD_ROOT, <span class="string">''</span>, myfile_name))</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>MD5加密</title>
    <url>/2020/04/24/python_md5/</url>
    <content><![CDATA[<h3 id="MD5加密"><a href="#MD5加密" class="headerlink" title="MD5加密"></a>MD5加密</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment">#导入加密库</span></span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line"><span class="comment"># md5加密方法</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_password</span><span class="params">(mypass)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 生成md5对象</span></span><br><span class="line">    md5 = hashlib.md5()</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#转码操作</span></span><br><span class="line">    mypass_utf8 = str(mypass).encode(encoding=<span class="string">'utf-8'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 加密操作</span></span><br><span class="line">    md5.update(mypass_utf8)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#返回密文</span></span><br><span class="line">    <span class="keyword">return</span> md5.hexdigest()</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>七牛云存储</title>
    <url>/2020/05/01/qiniu/</url>
    <content><![CDATA[<h4 id="安装七牛云"><a href="#安装七牛云" class="headerlink" title="安装七牛云"></a>安装七牛云</h4><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">pip install qiniu</span><br></pre></td></tr></table></figure>

<h4 id="django接口获取token"><a href="#django接口获取token" class="headerlink" title="django接口获取token"></a>django接口获取token</h4><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 七牛云 换取token的一个凭证</span></span><br><span class="line"><span class="keyword">from</span> qiniu <span class="keyword">import</span> Auth</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QiNiu</span><span class="params">(APIView)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self,request)</span>:</span></span><br><span class="line">        <span class="comment"># 声明验证对象   传参数</span></span><br><span class="line">        q = Auth(<span class="string">'xl8p2s1KY20muvLAL6OKNP7LnJhWX_XLiu2I3QhE'</span>,<span class="string">'8y0ehfGfHy55b2Y8ZvMTpOr34SbsS4a5r88v-7jF'</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 获取token           空间的名称</span></span><br><span class="line">        token  = q.upload_token(<span class="string">"pc1009"</span>)</span><br><span class="line">        <span class="comment"># 返回token</span></span><br><span class="line">        <span class="keyword">return</span> Response(&#123;<span class="string">'token'</span>:token&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="配置路由"><a href="#配置路由" class="headerlink" title="配置路由"></a>配置路由</h4><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">path(<span class="string">'qiniu/'</span>,QiNiu.as_view()),</span><br></pre></td></tr></table></figure>

<h4 id="vue接口请求图片上传"><a href="#vue接口请求图片上传" class="headerlink" title="vue接口请求图片上传"></a>vue接口请求图片上传</h4><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;table&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;td&gt;</span><br><span class="line">                七牛用户头像：</span><br><span class="line">            &lt;/td&gt;</span><br><span class="line">            &lt;td&gt;</span><br><span class="line">                &lt;input type=<span class="string">"file"</span> @change=<span class="string">"qiniu"</span>&gt;</span><br><span class="line">            &lt;/td&gt;</span><br><span class="line">            &lt;td&gt;</span><br><span class="line">                &lt;img :src=<span class="string">"src"</span> alt=<span class="string">""</span>&gt;</span><br><span class="line">            &lt;/td&gt;</span><br><span class="line">            </span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">    &lt;/table&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    data () &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">        //图片路径变量</span><br><span class="line">            src:<span class="string">''</span>,</span><br><span class="line">        //获取token变量</span><br><span class="line">            token:<span class="string">''</span>,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    //钩子函数</span><br><span class="line">    mounted:function()&#123;</span><br><span class="line">        //获取token</span><br><span class="line">        this.get_token();</span><br><span class="line">        &#125;,</span><br><span class="line">    methods:&#123;</span><br><span class="line">    	// 获取后端token</span><br><span class="line">        get_token:function()&#123;</span><br><span class="line">            this.axios.get('http://127.0.0.1:8000/qiniu/').then(res=&gt;&#123;         </span><br><span class="line">                    console.log(res)</span><br><span class="line">                    this.token = res.data.token</span><br><span class="line">                    console.log(this.token)</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;,</span><br><span class="line">        //七牛上传</span><br><span class="line">        qiniu:function(e)&#123;</span><br><span class="line">            //获取文件</span><br><span class="line">            let file = e.target.files[<span class="number">0</span>];</span><br><span class="line">            //声明表单</span><br><span class="line">            let param = new FormData()    </span><br><span class="line">            param.append(<span class="string">'file'</span>,file,file.name)</span><br><span class="line">            param.append(<span class="string">'token'</span>,this.token)   </span><br><span class="line">            //自定义zxios</span><br><span class="line">            const axios_qiniu = this.axios.create(&#123;withCredentials:false&#125;)</span><br><span class="line"></span><br><span class="line">            //发送请求</span><br><span class="line">            axios_qiniu(&#123;</span><br><span class="line">                method:<span class="string">'POST'</span>,</span><br><span class="line">                // 华北</span><br><span class="line">                url:<span class="string">'http://up-z1.qiniu.com'</span>,</span><br><span class="line">                data:param,</span><br><span class="line">                timeout:<span class="number">30000</span></span><br><span class="line">            &#125;).then(res=&gt;&#123;</span><br><span class="line">                console.log(res)</span><br><span class="line">   			    // 拼接照片路由</span><br><span class="line">            	this.src = <span class="string">'http://q9v2u2gy5.bkt.clouddn.com/'</span>+result.data.key</span><br><span class="line">            &#125;)</span><br><span class="line"></span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>又拍云存储</title>
    <url>/2020/05/06/upyun/</url>
    <content><![CDATA[<h4 id="安装模块"><a href="#安装模块" class="headerlink" title="安装模块"></a>安装模块</h4><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">pip install upyun</span><br></pre></td></tr></table></figure>

<h4 id="django接口"><a href="#django接口" class="headerlink" title="django接口"></a>django接口</h4><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 又拍云存储</span></span><br><span class="line"><span class="keyword">import</span> upyun</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UpYun</span><span class="params">(APIView)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(self,request)</span>:</span></span><br><span class="line">        <span class="comment"># 获取文件</span></span><br><span class="line">        file = request.FILES.get(<span class="string">'file'</span>)</span><br><span class="line">        <span class="comment"># 新建又拍云实例</span></span><br><span class="line">        print(file)</span><br><span class="line">        up = upyun.UpYun(<span class="string">'pc-upyun'</span>,<span class="string">'test111'</span>,<span class="string">'3KgVpePLSHkBF0EmWWWkOcgNak2e2STd'</span>)</span><br><span class="line">        <span class="comment"># 声明头部信息</span></span><br><span class="line">        headers=&#123;<span class="string">'x-gmkerl-rotate'</span>:<span class="string">'auto'</span>&#125;</span><br><span class="line">        <span class="comment"># 上传图像</span></span><br><span class="line">        <span class="keyword">for</span> chunk <span class="keyword">in</span> file.chunks():</span><br><span class="line">            res = up.put(<span class="string">'/touxiang_test1.jpg'</span>,chunk,checksum=<span class="literal">True</span>,headers=headers)</span><br><span class="line">        <span class="keyword">return</span> Response(&#123;<span class="string">'filename'</span>:file.name&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="配置路由"><a href="#配置路由" class="headerlink" title="配置路由"></a>配置路由</h4><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">path(<span class="string">'upyun/'</span>,UpYun.as_view())</span><br></pre></td></tr></table></figure>



<h4 id="vue接口"><a href="#vue接口" class="headerlink" title="vue接口"></a>vue接口</h4><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;!-- &lt;/img :src="src" /&gt; --&gt;</span><br><span class="line">        又拍云存储：&lt;Avatar :src="yp_url" :width='150' fil='fill'&gt;&lt;/Avatar&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;input type=<span class="string">"file"</span> @change=<span class="string">"upload_upyun"</span> /&gt;</span><br><span class="line">        &lt;div class="upload"&gt;</span><br><span class="line">            拖拽上传</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    data () &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            src :<span class="string">''</span>,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  mounted:function()&#123;</span><br><span class="line">    // 每次进入页面 获取最新的token</span><br><span class="line">    this.get_token()</span><br><span class="line">    // 注册拖拽容器</span><br><span class="line">    let upload = document.querySelector(<span class="string">"#upload"</span>)</span><br><span class="line">    // 声明监听事件</span><br><span class="line">    upload.addEventListener(<span class="string">'dragenter'</span>,this.onDrag,false);</span><br><span class="line">    upload.addEventListener(<span class="string">'dragover'</span>,this.onDrag,false)</span><br><span class="line">    upload.addEventListener(<span class="string">'drop'</span>,this.onDrop,false)</span><br><span class="line">&#125;,</span><br><span class="line">  methods:&#123;</span><br><span class="line">        // 监听用户鼠标</span><br><span class="line">        onDrag(e)&#123;</span><br><span class="line">          e.stopPropagation();</span><br><span class="line">          e.preventDefault();</span><br><span class="line">        &#125;,</span><br><span class="line">        onDrop(e)&#123;</span><br><span class="line">          e.stopPropagation();</span><br><span class="line">          e.preventDefault();</span><br><span class="line">          // 调用自定义方法</span><br><span class="line">          this.upload_upyun(e.dataTransfer.files)</span><br><span class="line">        &#125;,</span><br><span class="line">      // 又拍云 拖拽方法</span><br><span class="line">        upload_upyun:function(e)&#123;</span><br><span class="line">          // 获取拖拽文件</span><br><span class="line">          let file = e.target.files[<span class="number">0</span>]</span><br><span class="line">          // 声明参数</span><br><span class="line">          let param = new FormData();</span><br><span class="line">          param.append(<span class="string">'file'</span>,file);</span><br><span class="line">          // 声明头部信息</span><br><span class="line">          const config = &#123;</span><br><span class="line">            headers:&#123;</span><br><span class="line">              <span class="string">'Content-Type'</span>:<span class="string">'multipart/form-data'</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;     this.axios.post('http://127.0.0.1:8000/upyun/',param,config).then((result=&gt;&#123;</span><br><span class="line">            console.log(result)</span><br><span class="line">          &#125;))</span><br><span class="line">        &#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">.upload &#123;</span><br><span class="line">  margin: <span class="number">100</span>px auto;</span><br><span class="line">  width: <span class="number">300</span>px;</span><br><span class="line">  height: <span class="number">150</span>px;</span><br><span class="line">  border: <span class="number">2</span>px dashed <span class="comment">#f00;</span></span><br><span class="line">  padding-top: <span class="number">50</span>px;</span><br><span class="line">  padding-left: <span class="number">80</span>px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<h4 id="又拍云文件操作"><a href="#又拍云文件操作" class="headerlink" title="又拍云文件操作"></a>又拍云文件操作</h4><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> upyun</span><br><span class="line"><span class="comment">#实例化</span></span><br><span class="line">up = upyun.UpYun(<span class="string">"空间名"</span>,<span class="string">'操作员'</span>,<span class="string">'密码'</span>)</span><br><span class="line"><span class="comment">#读内存上传</span></span><br><span class="line">up.put(<span class="string">'自定义文件名'</span>,<span class="string">'文件内容'</span>)</span><br><span class="line"><span class="comment">#文件流操作（节省内存）</span></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'文件路径/文件名'</span>,<span class="string">'rb'</span>)<span class="keyword">as</span> f:</span><br><span class="line">    res = up.put(<span class="string">'自定义文件名'</span>,f,checksum=<span class="literal">True</span>)</span><br><span class="line"><span class="comment">#目录操作</span></span><br><span class="line">up.mkdir(<span class="string">'/文件夹名/'</span>)</span><br><span class="line"><span class="comment">#移动文件</span></span><br><span class="line">up.move(<span class="string">'/文件路径/文件名'</span>,<span class="string">'/新文件路径/文件名'</span>)</span><br><span class="line"><span class="comment">#复制文件</span></span><br><span class="line">up.copy(<span class="string">'/文件路径/文件名'</span>,<span class="string">'/新文件路径/文件名'</span>)</span><br><span class="line"><span class="comment">#断点续传</span></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'文件路径/文件名'</span>,<span class="string">'rb'</span>)<span class="keyword">as</span> f:</span><br><span class="line">    res = up.put(<span class="string">'自定义文件名'</span>,f,checksum=<span class="literal">True</span>，need_resume=<span class="literal">True</span>)</span><br><span class="line"><span class="comment">#下载</span></span><br><span class="line">res = up.get(<span class="string">'/文件路径/文件名'</span>)</span><br><span class="line"><span class="comment">#删除</span></span><br><span class="line">up.delete(<span class="string">'/文件路径/文件名'</span>)</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>爬虫概述</title>
    <url>/2020/04/26/spider/</url>
    <content><![CDATA[<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 爬虫分类</span></span><br><span class="line">聚焦爬虫: 针对特定领域, 抓取特定数据的爬虫程序</span><br><span class="line">    <span class="number">1.</span>确定url, 发起请求, 获取响应</span><br><span class="line">    2.数据解析  --&gt; 目标数据</span><br><span class="line">    <span class="number">3.</span>数据持久化</span><br><span class="line">通用爬虫: 爬取数据, 为搜索引擎提供检索服务</span><br><span class="line">    <span class="number">1.</span>将自己的网站被搜索引擎收录的手段: 竞价排名, 主动提交, 友情链接, DNS服务商</span><br><span class="line">    <span class="number">2.</span>SEO: seo搜索引擎优化, 提高排名</span><br><span class="line">    <span class="number">3.</span>robots协议:规定哪些爬虫不能够爬取本网站的哪些页面, 聚焦爬虫不遵守, robots协议是道德层面.</span><br></pre></td></tr></table></figure>

<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 网络模型:</span></span><br><span class="line"><span class="number">1.</span>OSI七层模型: 应用层 表示层 会话层 传输层 网络层 数据链路层 物理层</span><br><span class="line"><span class="number">2.</span>TCP/IP五层模型: </span><br><span class="line">    应用层: http  https ftp sftp ssh</span><br><span class="line">    传输层: TCP / UDP</span><br><span class="line">    网络层: IP</span><br><span class="line">    数据链路层:ARP </span><br><span class="line">    物理层: 以太网协议</span><br></pre></td></tr></table></figure>

<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># http &amp; https:</span></span><br><span class="line"><span class="number">1.</span>http端口<span class="number">80</span>, https端口<span class="number">443</span>, https需要CA证书, 可能需要一定费用</span><br><span class="line"><span class="number">2.</span>http是超文本传输协议, 明文传输, https是在http的基础上增加了ssl安全套接层, 数据的加密传输</span><br><span class="line"><span class="number">3.</span>HTTP和HTTPS使用的是完全不同的连接方式, 都是无状态的, HTTP和HTTPS使用的是完全不同的连接方式</span><br></pre></td></tr></table></figure>

<h4 id="爬虫的概念"><a href="#爬虫的概念" class="headerlink" title="爬虫的概念"></a>爬虫的概念</h4><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">爬虫, 又称网页蜘蛛或网络机器人.</span><br><span class="line">爬虫是 模拟人操作客户端(浏览器, APP)   向服务器发起网络请求    抓取数据的自动化程序或脚本.(*****)</span><br><span class="line">Pyinstaller</span><br><span class="line"><span class="comment"># 说明:</span></span><br><span class="line">	<span class="number">1.</span>模拟: 用爬虫程序伪装出人的行为, 避免被服务识别为爬虫程序</span><br><span class="line">	<span class="number">2.</span>客户端: 浏览器, APP都可以实现人与服务器之间的交互行为, 应用客户端从服务器获取数据</span><br><span class="line">	<span class="number">3.</span>自动化: 数据量较小时可以人工获取数据, 但往往在公司中爬取的数据量在百万条, 千万条级别的, 所以要程序自动化获取数据.</span><br></pre></td></tr></table></figure>

<h4 id="爬虫的语言"><a href="#爬虫的语言" class="headerlink" title="爬虫的语言"></a>爬虫的语言</h4><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 爬虫语言:PHP, C/C++, Java, Python, GoLang, nodejs</span></span><br><span class="line"><span class="comment"># 对比:</span></span><br><span class="line">	PHP: 并发能力差, 对多进程和多线程支持不好, 数据量较大时爬虫效率较低</span><br><span class="line">    C/C++: 语言效率高, 但学习成本高, 对程序员的技术能力要求较高,  所以目前还停留在研究层面, 市场需求量很小</span><br><span class="line">    Java: Python爬虫的主要竞争对手, 由于Java语言的特点, 代码臃肿, 代码量大, 维护成本重构成本高, 开发效率低. 但目前市场上岗位需求比较旺盛.</span><br><span class="line">    Python: 语法简单, 学习成本较低, 对新手比较友好. Python语言良好的生态, 大量库和框架的支持是的Python爬虫目前处于爬虫圈的主导地位.</span><br></pre></td></tr></table></figure>

<h4 id="爬虫的分类"><a href="#爬虫的分类" class="headerlink" title="爬虫的分类"></a>爬虫的分类</h4><ol>
<li><p>通用爬虫</p>
</li>
<li><p>聚焦爬虫（可分为）</p>
<p>增量式</p>
<p>深度爬虫</p>
</li>
</ol>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>通用爬虫:搜索引擎</span><br><span class="line"><span class="comment"># 实例: 百度, 搜狗, Google的搜索引擎</span></span><br><span class="line"><span class="comment"># 功能: 访问网页 -&gt; 抓取数据 -&gt; 数据处理 -&gt; 提供检索服务</span></span><br><span class="line"><span class="comment"># 工作流:</span></span><br><span class="line">        <span class="number">1.</span>给定一个起始URL, 存于爬取队列中</span><br><span class="line">        <span class="number">2.</span>爬虫程序从队列中取出url, 爬取数据</span><br><span class="line">        <span class="number">3.</span>解析爬取数据, 获取网页内的所有url, 需要的数据, 放入爬取队列</span><br><span class="line">        <span class="number">4.</span>重复第二个步骤</span><br><span class="line"><span class="comment"># 使搜索引擎获取网站链接:</span></span><br><span class="line">        <span class="number">1.</span>主动将url提交给搜索引擎(https://ziyuan.baidu.com/linksubmit/url)</span><br><span class="line">        <span class="number">2.</span>在其他热门网站设置友情连接</span><br><span class="line">        <span class="number">3.</span>百度和DNS服务商合作, 收录新网站</span><br><span class="line"><span class="comment"># 网站排名(SEO):</span></span><br><span class="line">		<span class="number">1.</span>根据PageRank值进行排名(流量, 点击率)</span><br><span class="line">		<span class="number">2.</span>百度竞价排名, 钱多就靠前排</span><br><span class="line"><span class="comment"># 缺点:</span></span><br><span class="line">		<span class="number">1.</span>抓取的内容多数无用</span><br><span class="line">		<span class="number">2.</span>无法精确获取数据</span><br><span class="line"><span class="comment"># 协议: robots协议 --&gt;  约定哪些内容允许哪些爬虫抓取</span></span><br><span class="line">		<span class="number">1.</span>无需遵守, 该协议适用于通用爬虫同样也适用于聚焦爬虫, 而我们写的是聚焦爬虫</span><br><span class="line">		<span class="number">2.</span>查看方法: 网站url/robots.txt, 如https://www.baidu.com/robots.txt</span><br></pre></td></tr></table></figure>

<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="number">2.</span>聚焦爬虫</span><br><span class="line"><span class="comment"># 概念:</span></span><br><span class="line">	聚焦爬虫指针对某一领域根据特定要求实现的爬虫程序, 抓取需要的数据(垂直领域爬取)</span><br><span class="line"><span class="comment"># 设计思路:*****</span></span><br><span class="line">	(<span class="number">1</span>).确定爬取的url, 模拟浏览器向服务器发送请求</span><br><span class="line">	(<span class="number">2</span>).获取响应数据并进行数据解析</span><br><span class="line">	(<span class="number">3</span>).将目标数据持久化到本地</span><br></pre></td></tr></table></figure>

<h4 id="TCP-UDP"><a href="#TCP-UDP" class="headerlink" title="TCP UDP"></a>TCP UDP</h4><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># TCP与UDP</span></span><br><span class="line"><span class="number">1.</span>TCP协议:是一种面向连接的, 可靠的, 基于字节流的传输层通信协议</span><br><span class="line">    <span class="number">1</span>).有序性: 数据包编号, 判断数据包的正确次序</span><br><span class="line">    <span class="number">2</span>).正确性: 使用checksum函数检查数据包是否损坏, 发送接收时都会计算校验和</span><br><span class="line">    <span class="number">3</span>).可靠性:	发送端有超时重发, 并有确认机制识别错误和数据的丢失</span><br><span class="line">    <span class="number">4</span>).可控性: 滑动窗口协议与拥塞控制算法控制数据包的发送速度</span><br><span class="line"><span class="number">2.</span>UDP协议: 用户数据报协议, 面向无连接的传输层协议, 传输不可靠.</span><br><span class="line">    <span class="number">1</span>).无连接, 数据可能丢失或损坏</span><br><span class="line">    <span class="number">2</span>).报文小, 传输速度快</span><br><span class="line">    <span class="number">3</span>).吞吐量大的网络传输, 可以在一定程度上承受数据丢失</span><br></pre></td></tr></table></figure>

<h4 id="服务器常见的默认端口"><a href="#服务器常见的默认端口" class="headerlink" title="服务器常见的默认端口"></a>服务器常见的默认端口</h4><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>ftp: File Transfer Protocol的缩写, 即文件传输协议. 端口:<span class="number">21</span></span><br><span class="line"><span class="number">2.</span>ssh: Secure Shell的缩写, 用于远程登录会话. 端口:<span class="number">22</span></span><br><span class="line"><span class="number">3.</span>MySQL: 关系型数据库, 端口:<span class="number">3306</span></span><br><span class="line"><span class="number">4.</span>MongoDB: 非关系型数据库, 端口:<span class="number">27017</span></span><br><span class="line"><span class="number">5.</span>Redis: 非关系型数据库, 端口:<span class="number">6379</span></span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>spider</tag>
      </tags>
  </entry>
  <entry>
    <title>自定义图片验证码</title>
    <url>/2020/04/24/yzm/</url>
    <content><![CDATA[<h4 id="首先我们需要用到一下库"><a href="#首先我们需要用到一下库" class="headerlink" title="首先我们需要用到一下库"></a>首先我们需要用到一下库</h4><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment">#绘画库</span></span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> ImageDraw</span><br><span class="line"><span class="comment">#图片库</span></span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="comment">#随机库</span></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="comment">#文件流</span></span><br><span class="line"><span class="keyword">import</span> io</span><br></pre></td></tr></table></figure>
<h4 id="后台代码如下"><a href="#后台代码如下" class="headerlink" title="后台代码如下"></a>后台代码如下</h4><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 自定义图片验证码</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyCode</span><span class="params">(View)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 定义rgb随机颜色</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_random_color</span><span class="params">(self)</span>:</span></span><br><span class="line"></span><br><span class="line">        R = random.randrange(<span class="number">255</span>)</span><br><span class="line"></span><br><span class="line">        G = random.randrange(<span class="number">255</span>)</span><br><span class="line"></span><br><span class="line">        B = random.randrange(<span class="number">255</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> (R,G,B)</span><br><span class="line">    <span class="comment"># 定义图片视图</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self,reuqest)</span>:</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 画布</span></span><br><span class="line">        img_size = (<span class="number">120</span>,<span class="number">50</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 定义图片对象</span></span><br><span class="line">        image = Image.new(<span class="string">'RGB'</span>,img_size,<span class="string">'white'</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 定义画笔</span></span><br><span class="line">        draw = ImageDraw.Draw(image,<span class="string">'RGB'</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 随机字母</span></span><br><span class="line">        source = <span class="string">'1256453534&amp;32qwertyyuiycvbnbdsf'</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 接收容器</span></span><br><span class="line">        code_str = <span class="string">""</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 进入循环绘制</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>):</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 获取字母颜色</span></span><br><span class="line">            text_color = self.get_random_color()</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 获取随机下标</span></span><br><span class="line">            tmp_num = random.randrange(len(source))</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 随机字符串</span></span><br><span class="line">            random_str = source[tmp_num]</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 装入容器中</span></span><br><span class="line">            code_str += random_str</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 绘制字符串</span></span><br><span class="line">            draw.text((<span class="number">10</span>+<span class="number">30</span>*i,<span class="number">20</span>),random_str,text_color)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 获取缓存区</span></span><br><span class="line">        buf = io.BytesIO()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 临时图图片保存在缓冲</span></span><br><span class="line">        image.save(buf,<span class="string">'png'</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> HttpResponse(buf.getvalue(),<span class="string">'image/png'</span>)</span><br></pre></td></tr></table></figure>
<p> 简单的验证码绘制完成</p>
<h3 id="在前端的操作"><a href="#在前端的操作" class="headerlink" title="在前端的操作"></a>在前端的操作</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>首先我们需要的input文本</span><br><span class="line"></span><br><span class="line">    &lt;td&gt;</span><br><span class="line">        验证码：&lt;input type=<span class="string">"text"</span> v-model=<span class="string">"code"</span>&gt;</span><br><span class="line">    &lt;/td&gt;</span><br><span class="line"></span><br><span class="line">    注：我们需要双向绑定一个code 这个code作为验证码的信息传给后端</span><br></pre></td></tr></table></figure>

<h3 id="获取后台的验证码的地址"><a href="#获取后台的验证码的地址" class="headerlink" title="获取后台的验证码的地址"></a>获取后台的验证码的地址</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">path(<span class="string">'code/'</span>,MyCode.as_view()) <span class="comment">#这是我们设定路由为code 运行django项目 进入这个路由 导航栏的地址 ctrl+c</span></span><br></pre></td></tr></table></figure>

<h3 id="之后前端验证码进行展示"><a href="#之后前端验证码进行展示" class="headerlink" title="之后前端验证码进行展示"></a>之后前端验证码进行展示</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">首先我们需要个img标签来展示验证码    </span><br><span class="line"></span><br><span class="line">    &lt;img :src="src" alt="点击刷新" @click="changecode" class="imagecode"&gt;</span><br><span class="line"></span><br><span class="line">    注：用v-bind绑定,src代表地址，此时我们从后端复制的地址，则定义变量进行存储\</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span>&#123;</span><br><span class="line">        code:<span class="string">''</span>, <span class="comment"># 验证码,</span></span><br><span class="line">        src:<span class="string">'http://127.0.0.1:8000/code/'</span>, <span class="comment"># 图片地址</span></span><br><span class="line">    &#125;</span><br><span class="line">    就是这个样子</span><br></pre></td></tr></table></figure>

<h3 id="我们点击验证码的时候需要刷新-点一下刷新一下"><a href="#我们点击验证码的时候需要刷新-点一下刷新一下" class="headerlink" title="我们点击验证码的时候需要刷新 点一下刷新一下"></a>我们点击验证码的时候需要刷新 点一下刷新一下</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">   <span class="number">1.</span>看见@click这个点击事件，所以我们在下面定义一个叫changecode的方法 用于点击刷新</span><br><span class="line">       </span><br><span class="line">       <span class="comment"># 点击刷新</span></span><br><span class="line">       changecode:function()&#123;</span><br><span class="line">           <span class="comment"># 生成随机数</span></span><br><span class="line">           var num = Math.ceil(Math.random()*<span class="number">100</span>)</span><br><span class="line">           <span class="comment"># 进行传参	</span></span><br><span class="line">           this.src = this.src + <span class="string">'?num ='</span>+num   <span class="comment"># 路由拼接</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="存储redis"><a href="#存储redis" class="headerlink" title="存储redis"></a>存储redis</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> redis</span><br><span class="line"><span class="comment"># 连接redis</span></span><br><span class="line">host = <span class="string">"localhost"</span> <span class="comment"># 本地端口</span></span><br><span class="line">port = <span class="number">6379</span> <span class="comment"># redis端口号</span></span><br><span class="line">r = redis.Redis(host=host,port=port) <span class="comment">#连接  </span></span><br><span class="line"><span class="comment"># 保存随机码</span></span><br><span class="line">r.set(<span class="string">'code'</span>,code_str)</span><br><span class="line"><span class="comment"># 读取则用 </span></span><br><span class="line">r.get(<span class="string">'code'</span>)</span><br><span class="line"></span><br><span class="line">ok廖！！</span><br></pre></td></tr></table></figure>

<h3 id="之后登陆就简单了"><a href="#之后登陆就简单了" class="headerlink" title="之后登陆就简单了"></a>之后登陆就简单了</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">code = request.GET.get(<span class="string">'code'</span>,<span class="literal">None</span>)</span><br><span class="line"><span class="comment"># 比对验证码</span></span><br><span class="line">redis_code = r.get(<span class="string">'code'</span>)</span><br><span class="line"><span class="comment"># 转码</span></span><br><span class="line">redis_code = redis_code.decode(<span class="string">'utf-8'</span>)</span><br><span class="line"><span class="comment"># if贩判断</span></span><br><span class="line"><span class="keyword">if</span> code != redis_code:</span><br><span class="line">    <span class="keyword">return</span> Response(&#123;<span class="string">'code'</span>:<span class="number">403</span>,<span class="string">'msg'</span>:<span class="string">"您输入的验证码有误"</span>&#125;)</span><br><span class="line"></span><br><span class="line">注：在这里有一个坑需要suo一下 我们必须进行转码操作，这样才能进行判断。</span><br><span class="line">    如果不进行转码，则无法比较，因为不转码 redis_code的值将会是二进制，所以decode一下。</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>智能识别验证码</title>
    <url>/2020/04/26/yzmsp/</url>
    <content><![CDATA[<p>百度云识别攻略： <a href="https://v3u.cn/a_id_134" target="_blank" rel="noopener">https://v3u.cn/a_id_134</a> </p>
<h4 id="识别"><a href="#识别" class="headerlink" title="识别"></a>识别</h4><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver <span class="keyword">import</span> ChromeOptions</span><br><span class="line"></span><br><span class="line">option = ChromeOptions()  <span class="comment"># 实例化一个ChromeOptions对象</span></span><br><span class="line">option.add_experimental_option(<span class="string">'excludeSwitches'</span>, [<span class="string">'enable-automation'</span>])  <span class="comment"># 以键值对的形式加入参数</span></span><br><span class="line">browser = webdriver.Chrome(options=option)</span><br><span class="line"></span><br><span class="line"><span class="comment">#发起请求</span></span><br><span class="line">browser.get(<span class="string">'http://127.0.0.1:8080/login)</span></span><br><span class="line"><span class="string"># 获取验证码标签 并截图到本地 get_screenshot_as_file截全图</span></span><br><span class="line">browser.find_element_by_xpath('//img[@class="code"]').screenshot('./code_img/code.png')</span><br><span class="line"><span class="comment">#读图</span></span><br><span class="line">img = cv2.imread(<span class="string">'./code_img/code.png'</span>,cv2.IMREAD_GRAYSCALE)</span><br><span class="line"><span class="comment">#写图</span></span><br><span class="line">cv2.imwrite(<span class="string">'./code_img/code1.png'</span>,img)</span><br><span class="line"></span><br><span class="line"><span class="comment">#获取密钥</span></span><br><span class="line">res = requests.get(<span class="string">"https://aip.baidubce.com/oauth/2.0/token?grant_type=client_credentials&amp;client_id=RQSCANnqoAs9Bk1cTnOWSema&amp;client_secret=G318YSye2P5vxv5g7xBfkwO9NOjBFd72"</span>)  <span class="comment">#这个url是由https://aip.baidubce.com/oauth/2.0/token?grant_type=client_credentials，加client_id=，加应用API Key，加client_secret=，加应用的Secret Key</span></span><br><span class="line">token = res.json()[<span class="string">'access_token'</span>]</span><br><span class="line"><span class="comment"># 定义头部信息</span></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">'Content-Type'</span>: <span class="string">'application/x-www-from/urlencoded'</span></span><br><span class="line">&#125;</span><br><span class="line">url = <span class="string">'https://aip.baidubce.com/rest/2.0/ocr/v1/accurate_basic?access_token='</span> + token</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取图片</span></span><br><span class="line">my_img = open(<span class="string">'./code_img/code1.png'</span>, <span class="string">'rb'</span>)</span><br><span class="line">tem_img = my_img.read()</span><br><span class="line">my_img.close()</span><br><span class="line"><span class="comment"># 进行base64编码</span></span><br><span class="line">temp_data = &#123;<span class="string">'image'</span>: base64.b64encode(tem_img)&#125;</span><br><span class="line"><span class="comment"># 对图片地址进行urlencode操作</span></span><br><span class="line">temp_data = urllib.parse.urlencode(temp_data)</span><br><span class="line"><span class="comment"># 请求视图接口</span></span><br><span class="line">res = requests.post(url=url, data=temp_data, headers=headers)</span><br><span class="line">code = res.json()[<span class="string">'words_result'</span>][<span class="number">0</span>][<span class="string">'words'</span>].replace(<span class="string">' '</span>, <span class="string">''</span>)</span><br><span class="line"><span class="comment">#print(code)</span></span><br><span class="line">browser.find_element_by_xpath(<span class="string">'//table/tr[4]/td[1]/input'</span>).send_keys(code)</span><br></pre></td></tr></table></figure>



]]></content>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Django--ORM操作</title>
    <url>/2020/04/18/django_orm/</url>
    <content><![CDATA[<h3 id="Django模型之ORM操作"><a href="#Django模型之ORM操作" class="headerlink" title="Django模型之ORM操作"></a>Django模型之ORM操作</h3><h4 id="ORM介绍"><a href="#ORM介绍" class="headerlink" title="ORM介绍"></a>ORM介绍</h4><ul>
<li><p><strong>什么是ORM</strong><br>ORM 全拼Object-Relation Mapping.</p>
<p>中文意为 对象-关系映射.</p>
<p>在MVC/MVT设计模式中的Model模块中都包括ORM</p>
</li>
<li><p><strong>ORM优势</strong></p>
<ul>
<li><p>只需要面向对象编程, 不需要面向数据库编写代码.</p>
<p>对数据库的操作都转化成对类属性和方法的操作.<br>不用编写各种数据库的sql语句.</p>
</li>
<li><p>实现了数据模型与数据库的解耦, 屏蔽了不同数据库操作上的差异.</p>
<p>不在关注用的是mysql、oracle…等.<br>通过简单的配置就可以轻松更换数据库, 而不需要修改代码.</p>
</li>
</ul>
</li>
<li><p><strong>ORM劣势</strong><br>相比较直接使用SQL语句操作数据库,有性能损失.<br>根据对象的操作转换成SQL语句,根据查询的结果转化成对象, 在映射过程中有性能损失.</p>
</li>
<li><p><strong>ORM和数据库关系：</strong><br>在Django中model是你数据的单一、明确的信息来源。它包含了你存储的数据的重要字段和行为。通常，一个模型（model）映射到一个数据库表.</p>
<p>基本情况：</p>
<p>每个模型都是一个Python类，它是django.db.models.Model的子类。</p>
<p>模型的每个属性都代表一个数据库字段。</p>
</li>
</ul>
<h4 id="ORM操作"><a href="#ORM操作" class="headerlink" title="ORM操作"></a>ORM操作</h4><p><strong>增加操作</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 通过python manage.py shell 进入到shell下</span></span><br><span class="line"><span class="comment"># 进入shell环境以后，首先导入模型</span></span><br><span class="line"><span class="keyword">from</span> polls.models <span class="keyword">import</span> * 			<span class="comment"># 导入全部模型</span></span><br><span class="line"><span class="keyword">from</span> django.utils <span class="keyword">import</span> timezone   <span class="comment"># 导入时间模块</span></span><br><span class="line"><span class="comment"># 创建方法一：</span></span><br><span class="line">q = Question(question_text=<span class="string">"什么地方的菜最有特色？"</span>, pub_date=timezone.now())</span><br><span class="line">q.save()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关联创建，用问题关联创建选项</span></span><br><span class="line">q.choice_set.create(choice_text=<span class="string">"湖南"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建方法二：</span></span><br><span class="line">q = Question()          <span class="comment"># 创建实例对象</span></span><br><span class="line">q.question_text = <span class="string">"什么地方的菜最有特色？"</span></span><br><span class="line">q.pub_date = timeaone.now()</span><br><span class="line">q.save()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建方法三：</span></span><br><span class="line">Question.objects.create(question_text=<span class="string">"什么地方的菜最有特色？"</span>, </span><br><span class="line">                        pub_date=timezone.now())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 批量创建，可以提高性能，减少对数据库的访问写入次数</span></span><br><span class="line">bulk_create()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 批量添加，需要传入的参数是一个列表</span></span><br><span class="line">Question.objects.bulk_create(</span><br><span class="line">    [</span><br><span class="line">        Question(question_text=<span class="string">"什么地方的菜最有特色？"</span>, pub_date=timezone.now()),</span><br><span class="line">        Question(question_text=<span class="string">"什么地方的景色最美？"</span>, pub_date=timezone.now())，</span><br><span class="line">    ]</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h4 id="修改操作"><a href="#修改操作" class="headerlink" title="修改操作"></a>修改操作</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 修改方法1：</span></span><br><span class="line">Question.objects.filter(pk=<span class="number">1</span>).update(question_text = <span class="string">"什么地方最好玩？"</span>)</span><br></pre></td></tr></table></figure>

<h4 id="删除操作"><a href="#删除操作" class="headerlink" title="删除操作"></a>删除操作</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 删除：(先查询到某个queryset对象，然后用删除命令)</span></span><br><span class="line">q = Question.objects.get(id=<span class="number">1</span>)</span><br><span class="line">q.delete()</span><br></pre></td></tr></table></figure>

<h4 id="查询操作"><a href="#查询操作" class="headerlink" title="查询操作"></a>查询操作</h4><p><strong>必会的方法</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1、 all():                 查询所有结果</span></span><br><span class="line">question_list = Question.objects.all()  <span class="comment"># 返回一个queryset集合</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2、 filter(**kwargs):      它包含了与所给筛选条件相匹配的对象</span></span><br><span class="line">question_list = Question.objects.filter(pk=<span class="number">1</span>)  <span class="comment"># 返回一个queryset集合,如果没有查询到，返回一个空集合,不会报错</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3、 get(**kwargs):         返回与所给筛选条件相匹配的对象，返回结果有且只有一个，如果符合筛选条件的							  对象超过一个或者没有都会抛出错误。</span></span><br><span class="line">question = Question.objects.get(pk=<span class="number">1</span>)  <span class="comment"># 返回一个queryset对象，并且只会得到一个数据，如果没有查询到，会报DoesNotExist的错误</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 4、 exclude(**kwargs):     它包含了与所给筛选条件不匹配的对象</span></span><br><span class="line">question = Question.objects.exclude(id__in=<span class="number">11</span>, <span class="number">22</span>, <span class="number">33</span>])  <span class="comment"># 筛选id除了11，22，33外的，其它的数据</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 5、 values(*field):        返回一个ValueQuerySet——一个特殊的QuerySet，运行后得到的并不是一系列                              model的实例化对象，而是一个可迭代的字典序列</span></span><br><span class="line">question = Question.objects.values()</span><br><span class="line"><span class="comment"># 返回结果：[&#123;"id": 1, "question_name": "xxxxxxx"&#125;, &#123;"id": 2, "question_name": "xxxxxxx"&#125;, ...]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 6、 values_list(*field):   它与values()非常相似，它返回的是一个元组序列，values返回的是一个字典序							   列</span></span><br><span class="line">question = Question.objects.values_list()</span><br><span class="line"><span class="comment"># 返回结果：[(1, "xxxxxxx"), (2, "xxxxxxx"), ....]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 7、 order_by(*field):      对查询结果排序</span></span><br><span class="line">user_list = User.objects.order_by(<span class="string">"-id"</span>)  <span class="comment"># “-” 按id降序排列</span></span><br><span class="line">user_list = User.objects.order_by()  <span class="comment"># 按id升序排列（默认）</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 8、 reverse():             对查询结果反向排序，请注意reverse()通常只能在具有已定义顺序的QuerySet								上调用(在model类的Meta中指定ordering或调用order_by()方法)。</span></span><br><span class="line">user = User.objects.all().reverse()  <span class="comment"># 把查询的结果进行反转</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 9、 distinct():            从返回结果中剔除重复纪录(如果你查询跨越多个表，可能在计算QuerySet时得到							 重复的结果。此时可以使用distinct()，注意只有在PostgreSQL中支持按字段							  去重。)</span></span><br><span class="line">Question.objects.all().distinct()  <span class="comment"># 把结果中重复的记录剔除</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 10、 count():              返回数据库中匹配查询(QuerySet)的对象数量。</span></span><br><span class="line">user_count = User.objects.count()  <span class="comment"># 返回user表中的用户数量</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 11、 first():              返回第一条记录</span></span><br><span class="line">User.objects.first()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 12、 last():               返回最后一条记录</span></span><br><span class="line">User.objects.last()    </span><br><span class="line"></span><br><span class="line"><span class="comment"># 13、 exists():             如果QuerySet包含数据，就返回True，否则返回False</span></span><br><span class="line">user = User.objects.filter(pk=<span class="number">1</span>).exists()  <span class="comment"># 返回True 或者False</span></span><br><span class="line"><span class="keyword">if</span> user:</span><br><span class="line">    print(<span class="string">"OK"</span>)</span><br></pre></td></tr></table></figure>



<h3 id="查询条件"><a href="#查询条件" class="headerlink" title="查询条件"></a>查询条件</h3><p><strong>在 ORM 层面，这些查询条件都是使用 field + __ + condition 的方式来使用</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 精确的 等于,如果提供一个None,SQL解析为Null</span></span><br><span class="line">article = Article.objects.get(id__exact=<span class="number">14</span>)</span><br><span class="line">article = Article.objects.get(id__exact=<span class="literal">None</span>)</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">对应sql</span></span><br><span class="line"><span class="string">select ... from article where id=14;</span></span><br><span class="line"><span class="string">select ... from article where id IS NULL;</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="comment"># iexact 使用like查询</span></span><br><span class="line">article = Article.objects.filter(title__iexact=<span class="string">'hello world'</span>)</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">等价于 select ... from article where title like 'hello world'</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="comment"># 包含:contains,区分大小写</span></span><br><span class="line">articles = Article.objects.filter(title__contains=<span class="string">'hello'</span>)</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">等价于select ... where title like binary '%hello%';</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="comment"># icontains 忽略大小写</span></span><br><span class="line">articles = Article.objects.filter(title__icontains=<span class="string">'hello'</span>)</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">等价于 select ... where title like '%hello%';</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="comment"># in 提取那些给定的field的值是否在给定的容器中。容器可以为list、tuple或者任何一个可以迭代的对</span></span><br><span class="line">象，<span class="comment"># 包括QuerySet对象</span></span><br><span class="line">articles = Article.objects.filter(id__in=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">等价于 select ... where id in (1,3,4)</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="comment"># 当然也可以传递一个QuerySet对象进去。示例代码如下：</span></span><br><span class="line">inner_qs = Article.objects.filter(title__contains=<span class="string">'hello'</span>)</span><br><span class="line">categories = Category.objects.filter(article__in=inner_qs)</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">等价于:以上代码的意思是获取那些文章标题包含hello的所有分类。</span></span><br><span class="line"><span class="string">select ...from category where article.id in (select id from article where title</span></span><br><span class="line"><span class="string">like '%hello%');</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="comment"># gt 大于</span></span><br><span class="line">articles = Article.objects.filter(id__gt=<span class="number">4</span>)</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">等价于 select ... where id &gt; 4;</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="comment"># gte 大于等于</span></span><br><span class="line"><span class="comment"># lt 小于</span></span><br><span class="line"><span class="comment"># lte 小于等于</span></span><br><span class="line"><span class="comment"># startswidth 开始,大小写敏感</span></span><br><span class="line">articles = Article.objects.filter(title__startswith=<span class="string">'hello'</span>)</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">等价于: select ... where title like 'hello%'</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="comment"># istartswidth 大小写不敏感</span></span><br><span class="line"><span class="comment"># endswidth 以**结尾,大小写敏感</span></span><br><span class="line">articles = Article.objects.filter(title__endswith=<span class="string">'world'</span>)</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">等价于:select ... where title like '%world';</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="comment"># iendswidht 以**结尾,忽略大小写</span></span><br><span class="line"><span class="comment"># range 判断某个field的值是否在给定的区间中, 两个范围之间</span></span><br><span class="line"><span class="keyword">from</span> django.utils.timezone <span class="keyword">import</span> make_aware</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line">start_date = make_aware(datetime(year=<span class="number">2018</span>,month=<span class="number">1</span>,day=<span class="number">1</span>))</span><br><span class="line">end_date = make_aware(datetime(year=<span class="number">2018</span>,month=<span class="number">3</span>,day=<span class="number">29</span>,hour=<span class="number">16</span>))</span><br><span class="line">articles = Article.objects.filter(pub_date__range=(start_date,end_date))</span><br><span class="line"><span class="comment"># isnull</span></span><br><span class="line">articles = Article.objects.filter(pub_date__isnull=<span class="literal">False</span>)</span><br><span class="line"><span class="comment"># regex和iregex： 正则</span></span><br><span class="line">articles = Article.objects.filter(title__regex=<span class="string">r'^hello'</span>)</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">等价:select ... where title regexp binary '^hello';</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">以上代码的意思是提取所有发布时间在2018/1/1到2018/12/12之间的文章。</span></span><br><span class="line"><span class="string">将翻译成以下的SQL语句：</span></span><br><span class="line"><span class="string">select ... from article where pub_time between '2018-01-01' and '2018-12-12'。</span></span><br><span class="line"><span class="string">需要注意的是，以上提取数据，不会包含最后一个值。也就是不会包含2018/12/12的文章。</span></span><br><span class="line"><span class="string">而且另外一个重点，因为我们在settings.py中指定了USE_TZ=True，并且设置了</span></span><br><span class="line"><span class="string">TIME_ZONE='Asia/Shanghai'，因此我们在提取数据的时候要使用django.utils.timezone.make_aware</span></span><br><span class="line"><span class="string">先将datetime.datetime从navie时间转换为aware时间。make_aware会将指定的时间转换为TIME_ZONE中</span></span><br><span class="line"><span class="string">指定的时区的时间。</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure>



<h3 id="根据关联的表查"><a href="#根据关联的表查" class="headerlink" title="根据关联的表查"></a>根据关联的表查</h3><p><strong>假如现在有两个 ORM 模型，一个是 Article ，一个是 Category 。代码如下：</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Category</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">  <span class="string">"""文章分类表"""</span></span><br><span class="line">  name = models.CharField(max_length=<span class="number">100</span>)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Article</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">  <span class="string">"""文章表"""</span></span><br><span class="line">  title = models.CharField(max_length=<span class="number">100</span>,null=<span class="literal">True</span>)</span><br><span class="line">  category = models.ForeignKey(<span class="string">"Category"</span>,on_delete=models.CASCADE)</span><br></pre></td></tr></table></figure>

<p><strong>比如想要获取文章标题中包含”hello”的所有的分类。那么可以通过以下代码来实现：</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">categories = Category.object.filter(article__title__contains(<span class="string">"hello"</span>))</span><br></pre></td></tr></table></figure>



<h3 id="聚合函数"><a href="#聚合函数" class="headerlink" title="聚合函数"></a>聚合函数</h3><p><strong>聚合函数是通过 aggregate 方法来实现的。</strong></p>
<ul>
<li><p><strong>Avg ：求平均值。比如想要获取所有图书的价格平均值。那么可以使用以下代码实现</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db.models <span class="keyword">import</span> Avg</span><br><span class="line">result = Book.objects.aggregate(Avg(<span class="string">'price'</span>))</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure>

<p>以上的打印结果是：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&quot;price__avg&quot;:23.0&#125;</span><br></pre></td></tr></table></figure>

<p>其中 price__avg 的结构是根据 field__avg 规则构成的。如果想要修改默认的名字，那么可以将 Avg 赋值<br>给一个关键字参数。示例代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db.models <span class="keyword">import</span> Avg</span><br><span class="line">result = Book.objects.aggregate(my_avg=Avg(<span class="string">'price'</span>))</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure>

<p>那么以上的结果打印为：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;<span class="string">"my_avg"</span>:<span class="number">23</span>&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>Count ：获取指定的对象的个数。示例代码如下：</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db.models <span class="keyword">import</span> Count</span><br><span class="line">result = Book.objects.aggregate(book_num=Count(<span class="string">'id'</span>))</span><br></pre></td></tr></table></figure>

<p>以上的 result 将返回 Book 表中总共有多少本图书。  Count 类中，还有另外一个参数叫做 distinct ，默<br>认是等于 False ，如果是等于 True ，那么将去掉那些重复的值。比如要获取作者表中所有的不重复的邮箱<br>总共有多少个，那么可以通过以下代码来实现：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> djang.db.models <span class="keyword">import</span> Count</span><br><span class="line">result = Author.objects.aggregate(count=Count(<span class="string">'email'</span>,distinct=<span class="literal">True</span>))</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>Max 和 Min ：获取指定对象的最大值和最小值。比如想要获取 Author 表中，最大的年龄和最小的年龄分别</strong><br><strong>是多少。那么可以通过以下代码来实现：</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db.models <span class="keyword">import</span> Max,Min</span><br><span class="line">result = Author.objects.aggregate(Max(<span class="string">'age'</span>),Min(<span class="string">'age'</span>))</span><br></pre></td></tr></table></figure>

<p>如果最大的年龄是88,最小的年龄是18。那么以上的result将为：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;<span class="string">"age__max"</span>:<span class="number">88</span>,<span class="string">"age__min"</span>:<span class="number">18</span>&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>Sum ：求指定对象的总和。比如要求图书的销售总额。那么可以使用以下代码实现：</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> djang.db.models <span class="keyword">import</span> Sum</span><br><span class="line">result =</span><br><span class="line">Book.objects.annotate(total=Sum(<span class="string">"bookstore__price"</span>)).values(<span class="string">"name"</span>,<span class="string">"total"</span>)</span><br></pre></td></tr></table></figure>

<p>以上的代码 annotate 的意思是给 Book 表在查询的时候添加一个字段叫做 total ，这个字段的数据来源是<br>从 BookStore 模型的 price 的总和而来。 values 方法是只提取 name 和 total 两个字段的值。</p>
<p>更多的聚合函数请参考官方文档：<a href="https://docs.djangoproject.com/en/2.0/ref/models/querysets/#aggregation-functions" target="_blank" rel="noopener">https://docs.djangoproject.com/en/2.0/ref/models/querysets/#aggregation-functions</a></p>
</li>
</ul>
<h3 id="aggregate和annotate的区别："><a href="#aggregate和annotate的区别：" class="headerlink" title="aggregate和annotate的区别："></a>aggregate和annotate的区别：</h3><ul>
<li>aggregate ：返回使用聚合函数后的字段和值。</li>
<li>annotate ：在原来模型字段的基础之上添加一个使用了聚合函数的字段，并且在使用聚合函数的时候，会<br>使用当前这个模型的主键进行分组（group by）。 比如以上 Sum 的例子，如果使用的是 annotate ，那么将<br>在每条图书的数据上都添加一个字段叫做 total ，计算这本书的销售总额。 而如果使用的是 aggregate ，<br>那么将求所有图书的销售总额。</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Author</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">  <span class="string">"""作者模型"""</span></span><br><span class="line">  name = models.CharField(max_length=<span class="number">100</span>)</span><br><span class="line">  age = models.IntegerField()</span><br><span class="line">  email = models.EmailField()</span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">    db_table = <span class="string">'author'</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Publisher</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">  <span class="string">"""出版社模型"""</span></span><br><span class="line">  name = models.CharField(max_length=<span class="number">300</span>)</span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">    db_table = <span class="string">'publisher'</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Book</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">  <span class="string">"""图书模型"""</span></span><br><span class="line">  name = models.CharField(max_length=<span class="number">300</span>)</span><br><span class="line">  pages = models.IntegerField()</span><br><span class="line">  price = models.FloatField()</span><br><span class="line">  rating = models.FloatField()</span><br><span class="line">  author = models.ForeignKey(Author,on_delete=models.CASCADE)</span><br><span class="line">  publisher = models.ForeignKey(Publisher, on_delete=models.CASCADE)</span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">    db_table = <span class="string">'book'</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookOrder</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">  <span class="string">"""图书订单模型"""</span></span><br><span class="line">  book = models.ForeignKey(<span class="string">"Book"</span>,on_delete=models.CASCADE)</span><br><span class="line">  price = models.FloatField()</span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">    db_table = <span class="string">'book_order'</span></span><br></pre></td></tr></table></figure>



<h3 id="F表达式和Q表达式："><a href="#F表达式和Q表达式：" class="headerlink" title="F表达式和Q表达式："></a>F表达式和Q表达式：</h3><h4 id="F表达式："><a href="#F表达式：" class="headerlink" title="F表达式："></a>F表达式：</h4><p>F表达式 是用来优化 ORM 操作数据库的。比如我们要将公司所有员工的薪水都增加1000元，如果按照正常的流<br>程，应该是先从数据库中提取所有的员工工资到Python内存中，然后使用Python代码在员工工资的基础之上增加<br>1000元，最后再保存到数据库中。这里面涉及的流程就是，首先从数据库中提取数据到Python内存中，然后在<br>Python内存中做完运算，之后再保存到数据库中。示例代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">employees = Employee.objects.all()</span><br><span class="line"><span class="keyword">for</span> employee <span class="keyword">in</span> employees:</span><br><span class="line">  employee.salary += <span class="number">1000</span></span><br><span class="line">  employee.save()</span><br></pre></td></tr></table></figure>

<p>而我们的 F表达式 就可以优化这个流程，他可以不需要先把数据从数据库中提取出来，计算完成后再保存回去，他可以直接执行 SQL语句 ，就将员工的工资增加1000元。示例代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> djang.db.models <span class="keyword">import</span> F</span><br><span class="line">Employee.object.update(salary=F(<span class="string">"salary"</span>)+<span class="number">1000</span>)</span><br><span class="line"><span class="comment"># 直接把sql传输到数据库!!!!!</span></span><br></pre></td></tr></table></figure>

<p>F表达式 并不会马上从数据库中获取数据，而是在生成 SQL 语句的时候，动态的获取传给 F表达式 的值。<br>比如如果想要获取作者中， name 和 email 相同的作者数据。如果不使用 F表达式 ，那么需要使用以下代码来完<br>成：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">authors = Author.objects.all()</span><br><span class="line"><span class="keyword">for</span> author <span class="keyword">in</span> authors:</span><br><span class="line">	<span class="keyword">if</span> author.name == author.email:</span><br><span class="line">   		print(author)</span><br></pre></td></tr></table></figure>

<p>如果使用 F表达式 ，那么一行代码就可以搞定。示例代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db.models <span class="keyword">import</span> F</span><br><span class="line">authors = Author.objects.filter(name=F(<span class="string">"email"</span>))</span><br><span class="line"><span class="comment"># where  email = name</span></span><br></pre></td></tr></table></figure>

<h4 id="Q表达式："><a href="#Q表达式：" class="headerlink" title="Q表达式："></a>Q表达式：</h4><p>如果想要实现所有价格高于100元，并且评分达到9.0以上评分的图书。那么可以通过以下代码来实现：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">books = Book.objects.filter(price__gte=<span class="number">100</span>,rating__gte=<span class="number">9</span>)</span><br></pre></td></tr></table></figure>

<p>以上这个案例是一个并集查询，可以简单的通过传递多个条件进去来实现。 但是如果想要实现一些复杂的查询语<br>句，比如要查询所有价格低于10元，或者是评分低于9分的图书。那就没有办法通过传递多个条件进去实现了。这<br>时候就需要使用 Q表达式 来实现了。示例代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db.models <span class="keyword">import</span> Q</span><br><span class="line">books = Book.objects.filter(Q(price__lte=<span class="number">10</span>) | Q(rating__lte=<span class="number">9</span>))</span><br></pre></td></tr></table></figure>

<p>以上是进行或运算，当然还可以进行其他的运算，比如有 &amp; 和 ~（非） 等。一些用 Q 表达式的例子如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db.models <span class="keyword">import</span> Q</span><br><span class="line"><span class="comment"># 获取id等于3的图书</span></span><br><span class="line">books = Book.objects.filter(Q(id=<span class="number">3</span>))</span><br><span class="line"><span class="comment"># 获取id等于3，或者名字中包含文字"记"的图书</span></span><br><span class="line">books = Book.objects.filter(Q(id=<span class="number">3</span>)|Q(name__contains(<span class="string">"记"</span>)))</span><br><span class="line"><span class="comment"># 获取价格大于100，并且书名中包含"记"的图书</span></span><br><span class="line">books = Book.objects.filter(Q(price__gte=<span class="number">100</span>)&amp;Q(name__contains(<span class="string">"记"</span>)))</span><br><span class="line"><span class="comment"># 获取书名包含“记”，但是id不等于3的图书</span></span><br><span class="line">books = Book.objects.filter(Q(name__contains=<span class="string">'记'</span>) &amp; ~Q(id=<span class="number">3</span>))</span><br></pre></td></tr></table></figure>



<h3 id="日期"><a href="#日期" class="headerlink" title="日期"></a>日期</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># data</span></span><br><span class="line">针对某些date或者datetime类型的字段。可以指定date的范围。并且这个时间过滤，还可以使用链式调用。示</span><br><span class="line">例代码如下：</span><br><span class="line">articles = Article.objects.filter(pub_date__date=date(<span class="number">2018</span>,<span class="number">3</span>,<span class="number">29</span>))</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">以上代码的意思是查找时间为2018/3/29这一天发表的所有文章。</span></span><br><span class="line"><span class="string">将翻译成以下的sql语句：</span></span><br><span class="line"><span class="string">select ... WHERE DATE(CONVERT_TZ(`front_article`.`pub_date`, 'UTC',</span></span><br><span class="line"><span class="string">'Asia/Shanghai')) = 2018-03-29</span></span><br><span class="line"><span class="string">注意，因为默认情况下MySQL的表中是没有存储时区相关的信息的。因此我们需要下载一些时区表的文件，然后添</span></span><br><span class="line"><span class="string">加到Mysql的配置路径中。如果你用的是windows操作系统。那么在</span></span><br><span class="line"><span class="string">http://dev.mysql.com/downloads/timezones.html下载timezone_2018d_posix.zip - POSIX</span></span><br><span class="line"><span class="string">standard。然后将下载下来的所有文件拷贝到C:\ProgramData\MySQL\MySQL Server 5.7\Data\mysql</span></span><br><span class="line"><span class="string">中，如果提示文件名重复，那么选择覆盖即可。</span></span><br><span class="line"><span class="string">如果用的是linux或者mac系统，那么在命令行中执行以下命令：mysql_tzinfo_to_sql</span></span><br><span class="line"><span class="string">/usr/share/zoneinfo | mysql -D mysql -u root -p，然后输入密码，从系统中加载时区文件更新到</span></span><br><span class="line"><span class="string">mysql中。</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="comment"># year 根据年份进行查找</span></span><br><span class="line">articles = Article.objects.filter(pub_date__year=<span class="number">2018</span>)</span><br><span class="line">articles = Article.objects.filter(pub_date__year__gte=<span class="number">2017</span>)</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">等价于:</span></span><br><span class="line"><span class="string">select ... where pub_date between '2018-01-01' and '2018-12-31';</span></span><br><span class="line"><span class="string">select ... where pub_date &gt;= '2017-01-01';</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="comment"># month 同year,根据月份查</span></span><br><span class="line"><span class="comment"># day  同year,根据日期查</span></span><br><span class="line"><span class="comment"># week_day Django 1.11新增的查找方式。同year，根据星期几进行查找。1表示星期天，7表示星期六，2-6代表的是星期一到星期五。</span></span><br><span class="line"><span class="comment"># time 根据时间查</span></span><br><span class="line">articles = Article.objects.filter(pub_date__time=datetime.time(<span class="number">12</span>,<span class="number">12</span>,<span class="number">12</span>));</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>Django</tag>
      </tags>
  </entry>
  <entry>
    <title>中间件应用</title>
    <url>/2020/05/08/zjj/</url>
    <content><![CDATA[<h4 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h4><p> 客户端发起请求   –&gt;  进到wsgi(模型) –&gt; 中间件(request_process)  –&gt;  路由(urls.py)  –&gt;  中间件(view_process)  –&gt; view(视图操作 -&gt; orm操作 -&gt; mysql )  –&gt; 中间件(process_response before_template) –&gt; wsgi(模型)</p>
<h4 id="在Python项目中一直都在有使用中间件，在django项目中的setting-py文件中看到MIDDLEWARE配置项"><a href="#在Python项目中一直都在有使用中间件，在django项目中的setting-py文件中看到MIDDLEWARE配置项" class="headerlink" title="在Python项目中一直都在有使用中间件，在django项目中的setting.py文件中看到MIDDLEWARE配置项"></a>在Python项目中一直都在有使用中间件，在django项目中的setting.py文件中看到MIDDLEWARE配置项</h4><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment">#加载自定义中间件   文件夹名.文件名.类名</span></span><br><span class="line"><span class="string">'myapp.md_user.MyMiddleware'</span></span><br></pre></td></tr></table></figure>

<h4 id="导入"><a href="#导入" class="headerlink" title="导入"></a>导入</h4><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.utils.deprecation <span class="keyword">import</span> MiddlewareMixin</span><br></pre></td></tr></table></figure>

<h4 id="中间件的四种方法"><a href="#中间件的四种方法" class="headerlink" title="中间件的四种方法"></a>中间件的四种方法</h4><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 自定义中间件</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyMiddleware</span><span class="params">(MiddlewareMixin)</span>:</span></span><br><span class="line">    <span class="comment"># 请求之前</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_request</span><span class="params">(self,request)</span>:</span></span><br><span class="line">        print(<span class="string">"过滤中间件"</span>)</span><br><span class="line">        <span class="comment"># 获取路由</span></span><br><span class="line">        <span class="keyword">if</span> request.path_info.startswith(<span class="string">"/login"</span>):</span><br><span class="line">            <span class="keyword">return</span> HttpResponse(json.dumps(&#123;<span class="string">'msg'</span>:<span class="string">'您篡改了id'</span>&#125;,ensure_ascii=<span class="literal">False</span>,indent=<span class="number">4</span>),</span><br><span class="line">                            content_type=<span class="string">'application/json'</span>)</span><br><span class="line">    <span class="comment"># 进入视图之前</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_view</span><span class="params">(self,request,view_func,view_args,view_kwargs)</span>:</span></span><br><span class="line">        <span class="comment"># request是httprequest对象。</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># view_func是即将使用的视图函数，它是实际的函数对象，而不是函数的名称作为字符串。</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># view_args是将传递给视图位置的参数的列表。</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># view_kargs是将传递给视图的关键字参数的字典。</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># view_args和view_kargs都不包含第一个视图参数（request）</span></span><br><span class="line">    <span class="comment"># 异常捕获方法</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_exception</span><span class="params">(self,request,exception)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="comment"># 返回之前</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_response</span><span class="params">(self,request,response)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> response</span><br></pre></td></tr></table></figure>

<p>​      1.中间件的process_request方法是在执行视图函数之前执行的</p>
<p>​      2.当配置中间件时，会按照MIDDLEWARE的注册顺序，也就是列表的索引值，从前到后依次执行的。</p>
<p>​      3.不同中间件之间传递的request都是同一个对象。</p>
<h4 id="中间件的应用场景"><a href="#中间件的应用场景" class="headerlink" title="中间件的应用场景"></a>中间件的应用场景</h4><p>1.做IP限制  –&gt; 放在中间件类的列表中，阻止某些ip访问；</p>
<p>2.URL访问过滤  –&gt; 如果用户访问的是logo视图（放过）如果访问其他视图，需要检测是否已经有session或localstrage，已经有了放行，如果没有返回login，这样就省的在多个视图函数上写装饰器了！</p>
]]></content>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>国际化支持</title>
    <url>/2020/05/08/gjhzz/</url>
    <content><![CDATA[<h4 id="首先-我们需要一个库：国际化支持模块"><a href="#首先-我们需要一个库：国际化支持模块" class="headerlink" title="首先 我们需要一个库：国际化支持模块"></a>首先 我们需要一个库：国际化支持模块</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install vue-i18n -- save</span><br></pre></td></tr></table></figure>

<p>save -&gt; 在当前项目下安装</p>
<h4 id="在您的项目main-js下-导入"><a href="#在您的项目main-js下-导入" class="headerlink" title="在您的项目main.js下 导入"></a>在您的项目main.js下 导入</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import VueI18n from &#39;vue-i18n&#39;</span><br></pre></td></tr></table></figure>

<h4 id="导入成功进行注册使用"><a href="#导入成功进行注册使用" class="headerlink" title="导入成功进行注册使用"></a>导入成功进行注册使用</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Vue.use(VueI18n)</span><br></pre></td></tr></table></figure>

<h4 id="在你的src下创建语言包文件"><a href="#在你的src下创建语言包文件" class="headerlink" title="在你的src下创建语言包文件"></a>在你的src下创建语言包文件</h4><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">文件夹名称  简写成：lang</span><br></pre></td></tr></table></figure>

<h4 id="在lang文件夹中创建中文包-zh-js-and英文包-en-js"><a href="#在lang文件夹中创建中文包-zh-js-and英文包-en-js" class="headerlink" title="在lang文件夹中创建中文包(zh.js)and英文包(en.js)"></a>在lang文件夹中创建中文包(zh.js)and英文包(en.js)</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">例如：</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 双语规范的变量（英文）</span><br><span class="line">    export const m &#x3D; &#123;</span><br><span class="line">        &#39;index&#39;:&#39;Mei Duo Shp&#39;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F; 双语规范的变量（中文）</span><br><span class="line">    export const m &#x3D; &#123;</span><br><span class="line">        &#39;index&#39;:&#39;美多商城&#39;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h4 id="回到main-js-导入语言包"><a href="#回到main-js-导入语言包" class="headerlink" title="回到main.js 导入语言包"></a>回到main.js 导入语言包</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 导入语言包</span><br><span class="line">const i18n &#x3D; new VueI18n(&#123;</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; 当前默认语言的声明</span><br><span class="line">  locale:&#39;zh&#39;,</span><br><span class="line">  messages:&#123;</span><br><span class="line">     		&#x2F;&#x2F; 相对路径</span><br><span class="line">    &#39;zh&#39;:require(&#39;.&#x2F;lang&#x2F;zh&#39;),</span><br><span class="line">    &#39;en&#39;:require(&#39;.&#x2F;lang&#x2F;en&#39;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 引用i18n</span><br><span class="line"></span><br><span class="line">new Vue(&#123;</span><br><span class="line">  el: &#39;#app&#39;,</span><br><span class="line">  router,</span><br><span class="line">  i18n, </span><br><span class="line">  components: &#123; App &#125;,</span><br><span class="line">  template: &#39;&lt;App&#x2F;&gt;&#39;,</span><br><span class="line">  render: h &#x3D;&gt; h(App)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="最后使用"><a href="#最后使用" class="headerlink" title="最后使用"></a>最后使用</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&#123;$t(&#39;m.index&#39;)&#125;&#125;</span><br><span class="line">m:代表规范的变量</span><br><span class="line">index: key的名称  也就是你自己定义的变量</span><br></pre></td></tr></table></figure>

<h4 id="在钩子方法中可以自动切换语言"><a href="#在钩子方法中可以自动切换语言" class="headerlink" title="在钩子方法中可以自动切换语言"></a>在钩子方法中可以自动切换语言</h4><p>指在浏览器中，例如默认是中文，我们就切换成中文，也就可以理解成老外访问直接是英文状态。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if(navigator.language &#x3D;&#x3D; &#39;en&#39;)&#123;	</span><br><span class="line">		&#x2F;&#x2F; 切换语言</span><br><span class="line">		this.$i18n.locale &#x3D; &#39;en&#39;</span><br><span class="line">	&#125;else&#123;</span><br><span class="line">		this.$i18n.locale &#x3D; &#39;zh&#39;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<h4 id="添加个按钮切换语言"><a href="#添加个按钮切换语言" class="headerlink" title="添加个按钮切换语言"></a>添加个按钮切换语言</h4><p>首先我们得有个开关标签</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;h-switch v-model&#x3D;&quot;lang&quot; @change&#x3D;&quot;lang_change&quot;&gt;中&#x2F;英&lt;&#x2F;h-switch&gt;</span><br></pre></td></tr></table></figure>

<p>定义开关变量</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">data()&#123;</span><br><span class="line">       return&#123;</span><br><span class="line">		&#x2F;&#x2F;定义开关变量</span><br><span class="line">		lang:1  &#x2F;&#x2F; 代表中文</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;,</span><br></pre></td></tr></table></figure>

<p>定义切换时间 change  也就是在你methods方法中</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">methods:&#123;</span><br><span class="line">	&#x2F;&#x2F; 切换方法</span><br><span class="line">	lang_change:function()&#123;</span><br><span class="line">		console.log(this.lang)</span><br><span class="line">		if(this.lang &#x3D;&#x3D; true)&#123;</span><br><span class="line">			&#x2F;&#x2F; 切换语言</span><br><span class="line">			this.$i18n.locale &#x3D; &#39;zh&#39;</span><br><span class="line">			localStorage.setItem(&#39;lang&#39;,&#39;zh&#39;)</span><br><span class="line">		&#125;else&#123;</span><br><span class="line">			this.$i18n.locale &#x3D; &#39;en&#39;</span><br><span class="line">			</span><br><span class="line">			localStorage.setItem(&#39;lang&#39;,&#39;en&#39;)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p>简述逻辑： 首先我们在控制台打印按钮默认为1,0，也就时候判断是true，false。得到之后，我们需要判断如果lang为true 则赋值为中文，则else则是英文，同时我们将lang值存入localstorage中，在钩子函数中判断。首先我们考虑到问题是，用户是否点击按钮切换语言，只要用户发生动作，我们则记录在localstorage中，最终我们判断用户是否点过按钮，如果没有则默认赋值到localstorage里。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 判断本地local有没有</span><br><span class="line">		var lang_locale &#x3D; localStorage.getItem(&quot;lang&quot;)</span><br><span class="line">		if(lang_locale)&#123;</span><br><span class="line">			this.$i18n.locale &#x3D; lang_locale</span><br><span class="line">			if(lang_locale &#x3D;&#x3D; &#39;zh&#39;)&#123;</span><br><span class="line">				this.lang &#x3D; 1</span><br><span class="line">			&#125;else&#123;</span><br><span class="line">				this.lang &#x3D; 0</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;else&#123;</span><br><span class="line">			this.$i18n.locale &#x3D; &#39;zh&#39;;</span><br><span class="line">			this.lang &#x3D; 1</span><br><span class="line">		&#125;</span><br></pre></td></tr></table></figure>

<p>以上代码，我们默认赋值为中文，里层的If是为变量双赋值！</p>
]]></content>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>首页轮播图展示</title>
    <url>/2020/05/09/lbt/</url>
    <content><![CDATA[<p>需求：如果您是超级管理员可以修改轮播图权限，如果你是普通用户则浏览，没有权限，我们将轮播图作为动态浏览，通过前后端分离实现，等一些增删改查操作。</p>
<h4 id="首先我们做添加前端表单提交"><a href="#首先我们做添加前端表单提交" class="headerlink" title="首先我们做添加前端表单提交"></a>首先我们做添加前端表单提交</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">标题：&lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;title&quot;&gt;</span><br><span class="line">连接：&lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;link&quot;&gt;</span><br><span class="line">上传图片：&lt;input type&#x3D;&quot;file&quot; @change&#x3D;&quot;addpc&quot;&gt;</span><br></pre></td></tr></table></figure>

<h4 id="双向绑定数据"><a href="#双向绑定数据" class="headerlink" title="双向绑定数据"></a>双向绑定数据</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">data()&#123;</span><br><span class="line">	return&#123;</span><br><span class="line">		   &#x2F;&#x2F; 创建展示列表</span><br><span class="line">            carousel_list : [</span><br><span class="line">                &#123;   </span><br><span class="line">                    title:&#39;&#39;,</span><br><span class="line">                    link:&#39;&#39;,</span><br><span class="line">                    image:&#39;&#39;,</span><br><span class="line">                &#125;</span><br><span class="line">            &#x2F;&#x2F; 定义轮播图变量</span><br><span class="line">            title:&#39;&#39;,</span><br><span class="line">            link:&#39;&#39;,</span><br><span class="line">            image:&#39;&#39;,</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="写change方法向后端发起请求"><a href="#写change方法向后端发起请求" class="headerlink" title="写change方法向后端发起请求"></a>写change方法向后端发起请求</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 向后端发起请求</span><br><span class="line">      addpc:function(e)&#123;</span><br><span class="line">          let data &#x3D; new FormData()</span><br><span class="line">          data.append(&#39;title&#39;,this.title)</span><br><span class="line">          data.append(&#39;link&#39;,this.link)</span><br><span class="line">          data.append(&#39;image&#39;,e.target.files[0])</span><br><span class="line">          &#x2F;&#x2F; 声明上传头部</span><br><span class="line">          let config&#x3D;&#123;</span><br><span class="line">              &#39;Content-Type&#39;:&#39;multipart&#x2F;form-data&#39;</span><br><span class="line">          &#125;</span><br><span class="line">          &#x2F;&#x2F; 发起请求</span><br><span class="line">          this.axios.post(&#39;http:&#x2F;&#x2F;127.0.0.1:8000&#x2F;addcarousel&#x2F;&#39;,data,config).then((res&#x3D;&gt;&#123;</span><br><span class="line">              console.log(res)</span><br><span class="line">              this.$Message(res.data.msg)</span><br><span class="line">              &#x2F;&#x2F; 刷新页面</span><br><span class="line">              this.$router.go(0)</span><br><span class="line">          &#125;))</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure>

<h4 id="配置路由"><a href="#配置路由" class="headerlink" title="配置路由"></a>配置路由</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">第一步：</span><br><span class="line">&#x2F;&#x2F; 导入</span><br><span class="line">import carouselin from &#39;@&#x2F;components&#x2F;carouselin&#39;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;配置路由</span><br><span class="line">      &#123;</span><br><span class="line">        path:&#39;&#x2F;carouselin&#39;,</span><br><span class="line">        name:&#39;carouselin&#39;,</span><br><span class="line">        component:carouselin,</span><br><span class="line">        beforeEnter:(to,from,next) &#x3D;&gt;&#123;</span><br><span class="line">          if (localStorage.getItem(&#39;type&#39;) &#x3D;&#x3D; 1)&#123;</span><br><span class="line">            console.log(&#39;欢迎超级管理员&#39;)</span><br><span class="line">            next();</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">          console.log(&#39;普通用户&#39;)</span><br><span class="line">          next(&#39;&#x2F;&#39;);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        path:&#39;&#x2F;upcarousel&#39;,</span><br><span class="line">        name:&#39;upcarousel&#39;,</span><br><span class="line">        component:upcarousel,</span><br><span class="line">        beforeEnter:(to,from,next) &#x3D;&gt;&#123;</span><br><span class="line">          if (localStorage.getItem(&#39;type&#39;) &#x3D;&#x3D; 1)&#123;</span><br><span class="line">            console.log(&#39;您有修改权限&#39;)</span><br><span class="line">            next();</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">          console.log(&#39;普您没有修改权限&#39;)</span><br><span class="line">          next(&#39;&#x2F;&#39;);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure>

<p>注：在这里我们使用拦截器方法实现您不是超级管理员则没有权限操作跳转到轮播图修改，这个操作也很简单在您login页面登陆成功之后，将用户类型存入localstorage中，访问后台接口，前端获取他的类型存入localstorage，之后我们可以判断用户类型。</p>
<p>1 首先判断myheader头部，如果是超级管理，我们则给您跳转轮播图修改页面，普通用户则没有。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 在您的methods方法中</span><br><span class="line">	data()&#123;</span><br><span class="line">		return&#123;</span><br><span class="line">			guanliyuan:0 &#x2F;&#x2F;默认是普通用户</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">		&#x2F;&#x2F; 判断管理员</span><br><span class="line">		ifget:function()&#123;</span><br><span class="line">			&#x2F;&#x2F; 首先判断用户是否注册管理员 如果没有则默认普通用户</span><br><span class="line">			var guanliyuan &#x3D; localStorage.getItem(&quot;type&quot;)</span><br><span class="line">			if (guanliyuan &#x3D;&#x3D; &#39;&#39;)&#123;</span><br><span class="line">				this.guanliyuan.locale &#x3D; 0</span><br><span class="line">				this.guanliyuan &#x3D; 0</span><br><span class="line">			&#125;else&#123;</span><br><span class="line">				if(guanliyuan &#x3D;&#x3D; 1)&#123;</span><br><span class="line">					this.guanliyuan &#x3D; 1</span><br><span class="line">				&#125;else&#123;</span><br><span class="line">					this.guanliyuan &#x3D; 0</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br></pre></td></tr></table></figure>

<p>2 在template中判断</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div v-if&#x3D;&quot;guanliyuan &#x3D;&#x3D; 1&quot;&gt;</span><br><span class="line">	&lt;Button&gt;</span><br><span class="line">	&lt;router-link to&#x3D;&#39;carouselin&#39;&gt;跳转操作轮播图&lt;&#x2F;router-link&gt;</span><br><span class="line">	&lt;&#x2F;Button&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>

<p>这样就OK了！</p>
<h4 id="下来后端我们创建个轮播图库"><a href="#下来后端我们创建个轮播图库" class="headerlink" title="下来后端我们创建个轮播图库"></a>下来后端我们创建个轮播图库</h4><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 轮播图 Base基类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Carousel</span><span class="params">(Base)</span>:</span></span><br><span class="line">    title = models.CharField(max_length=<span class="number">200</span>)</span><br><span class="line">    link = models.CharField(max_length=<span class="number">200</span>)</span><br><span class="line">    image = models.CharField(max_length=<span class="number">200</span>)</span><br><span class="line">	<span class="comment"># 声明表名</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        db_table = <span class="string">'carousel'</span></span><br></pre></td></tr></table></figure>

<h4 id="创建OK之后我们写类视图添加方法"><a href="#创建OK之后我们写类视图添加方法" class="headerlink" title="创建OK之后我们写类视图添加方法"></a>创建OK之后我们写类视图添加方法</h4><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 添加轮播图接口</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ACarousel</span><span class="params">(APIView)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(self,request)</span>:</span></span><br><span class="line">        <span class="comment"># 获取数据</span></span><br><span class="line">        title = request.POST.get(<span class="string">'title'</span>,<span class="literal">None</span>)</span><br><span class="line">        link = request.POST.get(<span class="string">'link'</span>,<span class="literal">None</span>)</span><br><span class="line">        image = request.FILES.get(<span class="string">'image'</span>)</span><br><span class="line">        print(title)</span><br><span class="line">        <span class="comment"># 排重</span></span><br><span class="line">        carousel = Carousel.objects.filter(title=title).first()</span><br><span class="line">        <span class="keyword">if</span> carousel:</span><br><span class="line">            <span class="keyword">return</span> Response(&#123;<span class="string">"code"</span>:<span class="number">404</span>,<span class="string">'msg'</span>:<span class="string">'轮播图已存在'</span>&#125;)</span><br><span class="line">        carousel = Carousel(title=title,link=link,image=<span class="string">'http://localhost:8000/static/upload/'</span>+ image.name)</span><br><span class="line">        carousel.save()</span><br><span class="line">        <span class="comment"># 建立文件流 存入本地</span></span><br><span class="line">        <span class="keyword">with</span> open(os.path.join(UPLOAD_ROOT,<span class="string">''</span>,image.name),<span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">            <span class="keyword">for</span> chunk <span class="keyword">in</span> image.chunks():</span><br><span class="line">                f.write(chunk)</span><br><span class="line">        <span class="keyword">return</span> Response(&#123;<span class="string">'code'</span>:<span class="number">200</span>,<span class="string">'msg'</span>:<span class="string">'成功'</span>&#125;)</span><br></pre></td></tr></table></figure>

<p>注：获取数据名，一定和前端传来的数据温和，否则为None。</p>
<h4 id="urls配置路由"><a href="#urls配置路由" class="headerlink" title="urls配置路由"></a>urls配置路由</h4><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">// 首先导入类视图</span><br><span class="line">	// 之后配置路由</span><br><span class="line">    path(<span class="string">'getcarousel/'</span>,GetCarousel.as_view()), // 展示</span><br><span class="line">    path(<span class="string">'addcarousel/'</span>,ACarousel.as_view()),  // 添加</span><br><span class="line">    path(<span class="string">'delcarousel/'</span>,DelCarousel.as_view()), // 删除</span><br><span class="line">    path(<span class="string">'upcarousel/'</span>,Upcarousel.as_view())  // 修改</span><br></pre></td></tr></table></figure>

<h4 id="展示操作"><a href="#展示操作" class="headerlink" title="展示操作"></a>展示操作</h4><p>下面我们做的是展示，在做删除修改操作，首先我们想到的是将用户的id传到后台进行删改操作，所以我们在前端从数据库中获取数据展示轮播图。</p>
<p>1.请求后台轮播图接口</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 请求轮播图接口</span><br><span class="line">      get_carousel:function()&#123;</span><br><span class="line">          this.axios.get(&#39;http:&#x2F;&#x2F;127.0.0.1:8000&#x2F;getcarousel&#x2F;&#39;).then((res&#x3D;&gt;&#123;</span><br><span class="line">              &#x2F;&#x2F; console.log(res)</span><br><span class="line">              &#x2F;&#x2F; 创建容器</span><br><span class="line">              var mylist&#x3D;[]</span><br><span class="line">              &#x2F;&#x2F; 遍历轮播图数组</span><br><span class="line">              for(let i&#x3D;0;i&lt;res.data.length;i++)&#123;</span><br><span class="line">                  console.log(res.data[i])</span><br><span class="line">                  &#x2F;&#x2F; 进行赋值</span><br><span class="line">                  mylist.push(&#123;title:res.data[i].title,link:res.data[i].link,image:res.data[i].image&#125;)</span><br><span class="line">                  this.carousel_list &#x3D; mylist</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;))</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure>

<p>2 后台类视图函数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 轮播图后台接口</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GetCarousel</span><span class="params">(APIView)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self,request)</span>:</span></span><br><span class="line">        <span class="comment"># 读库</span></span><br><span class="line">        carousels = Carousel.objects.all()</span><br><span class="line">        <span class="comment"># 序列化操作</span></span><br><span class="line">        carousels_ser = CarouseSer(carousels,many=<span class="literal">True</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> Response(carousels_ser.data)</span><br></pre></td></tr></table></figure>

<p>3 回到前段进行展示</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 再上门面我们已经定义，接收轮播图列表 carousel_list[]</span><br><span class="line">       &lt;table&gt;</span><br><span class="line">           &lt;tr&gt;</span><br><span class="line">               &lt;td&gt;标题&lt;&#x2F;td&gt;</span><br><span class="line">               &lt;td&gt;超链接&lt;&#x2F;td&gt;</span><br><span class="line">               &lt;td&gt;照片&lt;&#x2F;td&gt;</span><br><span class="line">               &lt;td&gt;操作&lt;&#x2F;td&gt;</span><br><span class="line">           &lt;&#x2F;tr&gt;</span><br><span class="line">           &lt;tr v-for&#x3D;&quot;(item,index) in carousel_list&quot;&gt;</span><br><span class="line">               &lt;td&gt;&#123;&#123;index+1&#125;&#125;&lt;&#x2F;td&gt;</span><br><span class="line">               &lt;td&gt;&#123;&#123;item.title&#125;&#125;&lt;&#x2F;td&gt;</span><br><span class="line">               &lt;td&gt;&#123;&#123;item.link&#125;&#125;&lt;&#x2F;td&gt;</span><br><span class="line">               &lt;td&gt;&lt;img :src&#x3D;&quot;item.image&quot; alt&#x3D;&quot;&quot; width&#x3D;&quot;100px&quot; height&#x3D;&quot;100px&quot;&gt;&lt;&#x2F;td&gt;</span><br><span class="line">               &lt;td&gt;</span><br><span class="line">                   &lt;Button @click&#x3D;&quot;delcarousel(item.id)&quot;&gt;删除&lt;&#x2F;Button&gt;</span><br><span class="line">                   &lt;Button @click&#x3D;&quot;upcarousel(item.id)&quot;&gt;修改&lt;&#x2F;Button&gt;</span><br><span class="line">               &lt;&#x2F;td&gt;</span><br><span class="line">           &lt;&#x2F;tr&gt;</span><br><span class="line">       &lt;&#x2F;table&gt;</span><br></pre></td></tr></table></figure>

<h4 id="删除轮播图"><a href="#删除轮播图" class="headerlink" title="删除轮播图"></a>删除轮播图</h4><p>1 我们将获取用户id传到方法函数中，将他传给后台进行删除操作</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 删除轮播图</span><br><span class="line">       delcarousel:function(uid)&#123;</span><br><span class="line">           &#x2F;&#x2F;请求接口</span><br><span class="line">           this.axios.get(&#39;http:&#x2F;&#x2F;127.0.0.1:8000&#x2F;delcarousel&#x2F;&#39;,&#123;params:&#123;id:uid&#125;&#125;).then((res)&#x3D;&gt;&#123;</span><br><span class="line">               </span><br><span class="line">               console.log(uid)</span><br><span class="line"></span><br><span class="line">               this.$Message(res.data.msg)</span><br><span class="line">               &#x2F;&#x2F;刷新页面</span><br><span class="line">               this.$router.go(0)</span><br><span class="line">           &#125;)</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure>

<p>2 后台类视图删除函数</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 删除轮播图</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DelCarousel</span><span class="params">(APIView)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self,request)</span>:</span></span><br><span class="line">        <span class="comment">#获取id</span></span><br><span class="line">        aid = request.GET.get(<span class="string">"id"</span>,<span class="literal">None</span>)</span><br><span class="line">        print(aid)</span><br><span class="line">        <span class="comment"># 进行删除</span></span><br><span class="line">        carousel = Carousel.objects.filter(id=aid).delete()</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">if</span> carousel:</span><br><span class="line">                <span class="keyword">return</span> Response(&#123;<span class="string">'code'</span>:<span class="number">200</span>,<span class="string">'msg'</span>:<span class="string">'删除成功'</span>&#125;)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="keyword">return</span> Response(&#123;<span class="string">'code'</span>:<span class="number">200</span>,<span class="string">'msg'</span>:e&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="修改轮播图"><a href="#修改轮播图" class="headerlink" title="修改轮播图"></a>修改轮播图</h4><p>1 我们给它一个跳转页面，跳转的同时带的您的用户id，也就是带参跳转。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;跳转修改页面</span><br><span class="line">     upcarousel:function(id)&#123;</span><br><span class="line">         this.$router.push(&#123;&#39;path&#39;:&#39;&#x2F;upcarousel&#39;,query:&#123;id:id&#125;&#125;)</span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure>

<p>2 我们创建upcarousel修页面</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;myheader&gt;&lt;&#x2F;myheader&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">          标题：&lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;title&quot;&gt;</span><br><span class="line">          连接：&lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;link&quot;&gt;</span><br><span class="line">          上传图片：&lt;input type&#x3D;&quot;file&quot; @change&#x3D;&quot;addpc&quot;&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">import myheader from &#39;.&#x2F;myheader&#39;</span><br><span class="line">export default &#123;</span><br><span class="line">  data()&#123;</span><br><span class="line">    return&#123;</span><br><span class="line">        &#x2F;&#x2F; 定义轮播图变量</span><br><span class="line">        title:&#39;&#39;,</span><br><span class="line">        link:&#39;&#39;,</span><br><span class="line">        image:&#39;&#39;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">    &#x2F;&#x2F; 注册组件标签</span><br><span class="line">    components:&#123;</span><br><span class="line">        &#39;myheader&#39;:myheader</span><br><span class="line">    &#125;,</span><br><span class="line">    mounted:function()&#123;</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line">    methods:&#123; </span><br><span class="line">        &#x2F;&#x2F; 向后端发起请求</span><br><span class="line">        addpc:function(e)&#123;</span><br><span class="line">            let data &#x3D; new FormData()</span><br><span class="line">            &#x2F;&#x2F; 接收id</span><br><span class="line">            data.append(&#39;id&#39;,this.$route.query.id)</span><br><span class="line">            data.append(&#39;title&#39;,this.title)</span><br><span class="line">            data.append(&#39;link&#39;,this.link)</span><br><span class="line">            data.append(&#39;image&#39;,e.target.files[0])</span><br><span class="line">            &#x2F;&#x2F; 声明上传头部</span><br><span class="line">            let config&#x3D;&#123;</span><br><span class="line">                &#39;Content-Type&#39;:&#39;multipart&#x2F;form-data&#39;</span><br><span class="line">            &#125;</span><br><span class="line">            &#x2F;&#x2F; 发起请求</span><br><span class="line">            this.axios.post(&#39;http:&#x2F;&#x2F;127.0.0.1:8000&#x2F;upcarousel&#x2F;&#39;,data,config).then((res&#x3D;&gt;&#123;</span><br><span class="line">                console.log(this.$route.query.id)</span><br><span class="line">                this.$Message(res.data.msg)</span><br><span class="line">                &#x2F;&#x2F; 刷新页面</span><br><span class="line">                this.$router.go(0)</span><br><span class="line">            &#125;))</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure>

<p>注：逻辑跟您添加页面一致，只不过传个id给后台</p>
<p>3 后台创建类视图修改函数</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment">#修改轮播图</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Upcarousel</span><span class="params">(APIView)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(self,request)</span>:</span></span><br><span class="line">        <span class="comment">#接收参数</span></span><br><span class="line">        aid = request.POST.get(<span class="string">'id'</span>,<span class="literal">None</span>)</span><br><span class="line">        print(aid)</span><br><span class="line">        title = request.POST.get(<span class="string">'title'</span>,<span class="literal">None</span>)</span><br><span class="line">        link = request.POST.get(<span class="string">'link'</span>,<span class="literal">None</span>)</span><br><span class="line">        image = request.FILES.get(<span class="string">'image'</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment">#过滤查询</span></span><br><span class="line">        carousel = Carousel.objects.filter(id=aid).first()</span><br><span class="line">        <span class="keyword">if</span> carousel:</span><br><span class="line">            <span class="comment"># 建立文件流 存入本地</span></span><br><span class="line">            <span class="keyword">with</span> open(os.path.join(UPLOAD_ROOT,<span class="string">''</span>,image.name),<span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">                <span class="keyword">for</span> chunk <span class="keyword">in</span> image.chunks():</span><br><span class="line">                    f.write(chunk)</span><br><span class="line">            <span class="comment">#重新入库</span></span><br><span class="line">            carousel.title = title</span><br><span class="line">            carousel.link = link</span><br><span class="line">            carousel.image = <span class="string">'http://localhost:8000/static/upload/'</span>+image.name</span><br><span class="line">            carousel.save()</span><br><span class="line">            <span class="keyword">return</span> Response(&#123;<span class="string">'code'</span>:<span class="number">200</span>,<span class="string">'msg'</span>:<span class="string">'修改成功'</span>&#125;)</span><br><span class="line">        <span class="keyword">return</span> Response(&#123;<span class="string">'code'</span>:<span class="number">400</span>,<span class="string">'msg'</span>:<span class="string">'修改失败'</span>&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="完成"><a href="#完成" class="headerlink" title="完成"></a>完成</h4>]]></content>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>暗夜模式配置</title>
    <url>/2020/05/10/ahms/</url>
    <content><![CDATA[<h4 id="首先在页面找到您要修改的页面的选择器，之后在您的项目中js文件中进行搜索"><a href="#首先在页面找到您要修改的页面的选择器，之后在您的项目中js文件中进行搜索" class="headerlink" title="首先在页面找到您要修改的页面的选择器，之后在您的项目中js文件中进行搜索"></a>首先在页面找到您要修改的页面的选择器，之后在您的项目中js文件中进行搜索</h4><p>例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">:root&#123;</span><br><span class="line">  --bg--color:&#39;#fff&#39;;</span><br><span class="line">  --a-color:&#39;black&#39;;</span><br><span class="line">&#125;</span><br><span class="line">a.navbar-brand, a.logo &#123;</span><br><span class="line">  font-family: &quot;Lato&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;</span><br><span class="line">  color:var(--a-color);</span><br><span class="line">  font-size: 2rem;</span><br><span class="line">  font-weight: bold;</span><br><span class="line">  margin-top: 0; &#125;</span><br><span class="line">  </span><br><span class="line"> .header &#123;</span><br><span class="line">  background:var(--bg-color);</span><br><span class="line">  min-height: 7em;</span><br><span class="line">  height: auto;</span><br><span class="line">  border-radius: 0;</span><br><span class="line">  width: 100%;</span><br><span class="line">  color: #444342;</span><br><span class="line">  padding-top: 1em;</span><br><span class="line">  padding-bottom: 1em;</span><br><span class="line">  border-bottom: 1px solid rgba(0, 0, 0, 0.05); &#125;</span><br><span class="line">  .header li.nav-item &#123;</span><br><span class="line">    font-size: 1.05em;</span><br><span class="line">    margin-left: .5em;</span><br><span class="line">    padding: .75em .35em; &#125;</span><br></pre></td></tr></table></figure>

<p>我们将颜色用变量控制</p>
<h4 id="通过变量控制"><a href="#通过变量控制" class="headerlink" title="通过变量控制"></a>通过变量控制</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 声明变量</span><br><span class="line">:root&#123;</span><br><span class="line">  --bg--color:&#39;#fff&#39;;</span><br><span class="line">  --a-color:&#39;black&#39;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="使用变量"><a href="#使用变量" class="headerlink" title="使用变量"></a>使用变量</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 变量用法</span><br><span class="line">color:var(--a-color);</span><br></pre></td></tr></table></figure>

<h4 id="写方法控制背景和字体颜色"><a href="#写方法控制背景和字体颜色" class="headerlink" title="写方法控制背景和字体颜色"></a>写方法控制背景和字体颜色</h4><p>1 需要个开关按钮</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;h-switch v-model&#x3D;&quot;colors&quot; @change&#x3D;&quot;change_back&quot;&gt;白&#x2F;黑&lt;&#x2F;h-switch&gt;</span><br></pre></td></tr></table></figure>

<p>注：利用双向绑定给其默认值 </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">data()&#123;</span><br><span class="line">        return&#123;</span><br><span class="line">			colors:0, &#x2F;&#x2F; 默认代表白色</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>2 创建change_back方法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">change_back:function()&#123;</span><br><span class="line">		&#x2F;&#x2F; 获取样式表</span><br><span class="line">		var styles &#x3D; getComputedStyle(document.documentElement) </span><br><span class="line">		if (this.colors !&#x3D; 0 )&#123;</span><br><span class="line">			&#x2F;&#x2F; 给背景赋值</span><br><span class="line">			document.documentElement.style.setProperty(&#39;--bg-color&#39;,&quot;#292a2b&quot;)</span><br><span class="line">			&#x2F;&#x2F; 设置字体颜色</span><br><span class="line">			document.documentElement.style.setProperty(&#39;--a-color&#39;,&quot;white&quot;)</span><br><span class="line">		&#125;else&#123;</span><br><span class="line">			&#x2F;&#x2F; 给背景赋值</span><br><span class="line">			document.documentElement.style.setProperty(&#39;--bg-color&#39;,&quot;#white&quot;)</span><br><span class="line">			&#x2F;&#x2F; 设置字体颜色</span><br><span class="line">			document.documentElement.style.setProperty(&#39;--a-color&#39;,&quot;#292a2b&quot;)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<p>注：切换到暗黑主题时我们将字体改成白色</p>
<h4 id="在指定时间运行代码"><a href="#在指定时间运行代码" class="headerlink" title="在指定时间运行代码"></a>在指定时间运行代码</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 指定时间运行代码</span><br><span class="line">		runtime:function()&#123;;		</span><br><span class="line">			var data &#x3D; new Date()</span><br><span class="line">			&#x2F;&#x2F; 获取当前hours</span><br><span class="line">			var time &#x3D; data.getHours()</span><br><span class="line">			if(time &#x3D;&#x3D; 22)&#123;</span><br><span class="line">				&#x2F;&#x2F; 获取样式表</span><br><span class="line">				var styles &#x3D; getComputedStyle(document.documentElement) </span><br><span class="line">				&#x2F;&#x2F; 给背景赋值</span><br><span class="line">				document.documentElement.style.setProperty(&#39;--bg-color&#39;,&quot;#292a2b&quot;)</span><br><span class="line">				&#x2F;&#x2F; 设置字体颜色</span><br><span class="line">				document.documentElement.style.setProperty(&#39;--a-color&#39;,&quot;white&quot;)</span><br><span class="line">				this.$Message(&quot;夜深了 您以进入暗黑模式&quot;)</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br></pre></td></tr></table></figure>

<p>到22:00的时候切换到自动切换到暗黑模式，在钩子方法调用这个方法。</p>
]]></content>
      <tags>
        <tag>Django</tag>
      </tags>
  </entry>
  <entry>
    <title>分页</title>
    <url>/2020/05/12/drffy/</url>
    <content><![CDATA[<h4 id="分页后端逻辑"><a href="#分页后端逻辑" class="headerlink" title="分页后端逻辑"></a>分页后端逻辑</h4><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GoodsList</span><span class="params">(APIView)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self,request)</span>:</span></span><br><span class="line">        <span class="comment">#当前页</span></span><br><span class="line">        page = request.GET.get(<span class="string">'page'</span>,<span class="number">1</span>)</span><br><span class="line">        <span class="comment">#一页显示的个数</span></span><br><span class="line">        size = request.GET.get(<span class="string">'size'</span>,<span class="number">1</span>)</span><br><span class="line">        <span class="comment">#计算从哪开始切</span></span><br><span class="line">        data_start = (int(page)<span class="number">-1</span>) *int(size)</span><br><span class="line">        <span class="comment">#计算切到哪</span></span><br><span class="line">        data_end = int(page) * int(size)</span><br><span class="line">        <span class="comment">#查询 切片成当前页数据</span></span><br><span class="line">        goods = Goods.objects.all()[data_start:data_end]</span><br><span class="line">        <span class="comment">#查询所有商品个数</span></span><br><span class="line">        count = Goods.objects.count()</span><br><span class="line">        <span class="comment">#序列化</span></span><br><span class="line">        goods_ser = GoodsSer(goods,many=<span class="literal">True</span>)</span><br><span class="line">        <span class="keyword">return</span> Response(&#123;<span class="string">'data'</span>:goods_ser.data,<span class="string">'total'</span>:count&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="前端template中"><a href="#前端template中" class="headerlink" title="前端template中"></a>前端template中</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- heyui分页器 --&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">    	&lt;Pagination v-model&#x3D;&quot;pagination&quot; @change&#x3D;&quot;get_goods&quot;&gt;&lt;&#x2F;Pagination&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>

<p>data中定义分页器变量</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;定义分页器变量</span><br><span class="line">  pagination:&#123;</span><br><span class="line">	  page:2,</span><br><span class="line">	  size:2,</span><br><span class="line">	  total:5,</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 获取商品类表接口</span><br><span class="line">  get_goods:function()&#123;</span><br><span class="line">		&#x2F;&#x2F; 拼接路由</span><br><span class="line">	  this.axios.get(&#39;http:&#x2F;&#x2F;127.0.0.1:8000&#x2F;goodslist&#x2F;&#39;,&#123;params:&#123;page:this.pagination.page,size:this.pagination.size&#125;&#125;).then((res&#x3D;&gt;&#123;</span><br><span class="line">		  console.log(res)</span><br><span class="line"></span><br><span class="line">		  this.goodslist &#x3D; res.data.data</span><br><span class="line">		  </span><br><span class="line">			&#x2F;&#x2F;将商品总数传递给total</span><br><span class="line">		  this.pagination.total &#x3D; res.data.total</span><br><span class="line">	  &#125;))</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>



<h4 id="获取文件"><a href="#获取文件" class="headerlink" title="获取文件"></a>获取文件</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">图片：&lt;input type&#x3D;&quot;file&quot; ref&#x3D;&quot;upload&quot;&gt;&lt;br&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 接收表单数据</span><br><span class="line">var pc &#x3D; this.$refs.upload</span><br><span class="line">let file &#x3D; pc.files[0]</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>django</tag>
      </tags>
  </entry>
  <entry>
    <title>简述逻辑外键</title>
    <url>/2020/05/11/jsonb/</url>
    <content><![CDATA[<h4 id="goods表创建逻辑外键"><a href="#goods表创建逻辑外键" class="headerlink" title="goods表创建逻辑外键"></a>goods表创建逻辑外键</h4><p>前端数据我需要做二次处理，获取表单数据进行二次处理，转成json数据，这样后端接收存入数据库。</p>
<h4 id="之后在添加方法中获取id-向后端发起请求"><a href="#之后在添加方法中获取id-向后端发起请求" class="headerlink" title="之后在添加方法中获取id 向后端发起请求"></a>之后在添加方法中获取id 向后端发起请求</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&#x2F;&#x2F; 添加商品事件</span><br><span class="line">submit:function()&#123;</span><br><span class="line">    &#x2F;&#x2F; 非空验证</span><br><span class="line">    if (this.name &#x3D;&#x3D; &#39;&#39;)&#123;</span><br><span class="line">        this.$Message(&quot;商品名称不能为空&quot;)</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        &#x2F;&#x2F; 存入字段为json</span><br><span class="line">        var param &#x3D; &#123;&#125;;</span><br><span class="line">        param[&#39;color&#39;] &#x3D; this.color</span><br><span class="line">        param[&#39;size&#39;] &#x3D; this.size</span><br><span class="line">        param[&#39;season&#39;] &#x3D; this.season</span><br><span class="line">        &#x2F;&#x2F;转为json数据</span><br><span class="line">        param&#x3D;JSON.stringify(param)</span><br><span class="line">        &#x2F;&#x2F; 接收表单数据</span><br><span class="line">        var pc &#x3D; this.$refs.upload</span><br><span class="line">        let file &#x3D; pc.files[0]</span><br><span class="line">        var data &#x3D; new FormData()</span><br><span class="line">        data.append(&#39;img&#39;,file)</span><br><span class="line">        data.append(&#39;flows&#39;,this.flows)</span><br><span class="line">        &#x2F;&#x2F; 反向赋值</span><br><span class="line">        data.append(&#39;cid&#39;,this.cate[this.selected])</span><br><span class="line">        &#x2F;&#x2F; 声明请求头</span><br><span class="line">        let config&#x3D;&#123;</span><br><span class="line">            &#39;Content-Type&#39;:&#39;multipart&#x2F;form-data&#39;</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F; 发起请求</span><br><span class="line">        this.axios.post(&#39;http:&#x2F;&#x2F;127.0.0.1:8000&#x2F;addgoods&#x2F;&#39;,data,config).then((res&#x3D;&gt;&#123;</span><br><span class="line">            console.log(res)</span><br><span class="line">            this.$Message(res.data.msg)</span><br><span class="line">        &#125;))</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>把json数据存入规格字段中，cid存入外键的cid</p>
<p>之后，我们展示分类</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">// 定义规格名称</span><br><span class="line">color:<span class="string">''</span>,</span><br><span class="line">       size:<span class="string">''</span>,</span><br><span class="line">       season:<span class="string">''</span>,</span><br><span class="line">       // 分类表默认选中</span><br><span class="line">       selected:<span class="string">'衣服'</span>,</span><br><span class="line">       cate:[]，</span><br><span class="line">       // 接受商品分类</span><br><span class="line">       category:[]</span><br><span class="line">       </span><br><span class="line">       // 创建方法</span><br><span class="line">       	</span><br><span class="line">       // 获取商品分类</span><br><span class="line">       get_cate:function()&#123;</span><br><span class="line">           //发送请求</span><br><span class="line">           this.axios.get('http://127.0.0.1:8000/cate/').then((res=&gt;&#123;</span><br><span class="line">               console.log(res)</span><br><span class="line">               // 二次处理数据</span><br><span class="line">               var mycate=[]</span><br><span class="line">               <span class="keyword">for</span>(let i=<span class="number">0</span>;i&lt;res.data.length;i++)&#123;</span><br><span class="line">                   mycate.push(res.data[i][<span class="string">'name'</span>])</span><br><span class="line">                   // 反向赋值 将分类表的id存入goods表中</span><br><span class="line">                   this.cate[res.data[i][<span class="string">'name'</span>]] = res.data[i][<span class="string">'id'</span>];</span><br><span class="line">               &#125;</span><br><span class="line">               // 赋值</span><br><span class="line">               this.category = mycate</span><br><span class="line">           &#125;))</span><br><span class="line">       &#125;,</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>django</tag>
      </tags>
  </entry>
  <entry>
    <title>简述详情页</title>
    <url>/2020/05/11/detail/</url>
    <content><![CDATA[<h4 id="后端代码"><a href="#后端代码" class="headerlink" title="后端代码"></a>后端代码</h4><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 商品详情</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GoodInfo</span><span class="params">(APIView)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self,request)</span>:</span></span><br><span class="line">        id = request.GET.get(<span class="string">'id'</span>,<span class="literal">None</span>)</span><br><span class="line">        <span class="comment"># 查询</span></span><br><span class="line">        good = Goods.objects.get(id=id)</span><br><span class="line">        <span class="comment"># 序列化 </span></span><br><span class="line">        good_str = GoodsSer(good)</span><br><span class="line">        <span class="keyword">return</span> Response(good_str.data)</span><br></pre></td></tr></table></figure>

<p>前端代码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 带参跳转</span><br><span class="line">&lt;a :href&#x3D;&quot;&#39;http:&#x2F;&#x2F;127.0.0.1:8080&#x2F;item?id&#x3D;&#39;+item.id&quot;&gt;</span><br></pre></td></tr></table></figure>



<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 获取商品id</span><br><span class="line"> this.id &#x3D; this.$route.query.id</span><br></pre></td></tr></table></figure>



<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">param:&#123;&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"> &#x2F;&#x2F; 获取商品详情</span><br><span class="line">   get_good:function()&#123;</span><br><span class="line"> this.axios.get(&#39;http:&#x2F;&#x2F;127.0.0.1:8000&#x2F;goodinfo&#x2F;?id&#x3D;&#39;,&#123;params:&#123;&#39;id&#39;:this.id&#125;&#125;).then((res&#x3D;&gt;&#123;</span><br><span class="line">	 console.log(res)</span><br><span class="line">	 &#x2F;&#x2F; 赋值</span><br><span class="line">	 this.info&#x3D;res.data</span><br><span class="line">	 &#x2F;&#x2F; 类型转换</span><br><span class="line">	 this.param &#x3D; JSON.parse(this.info.params)</span><br><span class="line"> &#125;))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="展示规格"><a href="#展示规格" class="headerlink" title="展示规格"></a>展示规格</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">颜色：&#123;&#123;param.color&#125;&#125; </span><br><span class="line">&lt;br&gt;</span><br><span class="line">尺码：&#123;&#123;param.size&#125;&#125;</span><br><span class="line">&lt;br&gt;</span><br><span class="line">季节：&#123;&#123;param.season&#125;&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>django</tag>
      </tags>
  </entry>
  <entry>
    <title>Python基础数据类型</title>
    <url>/2020/07/06/shuju/</url>
    <content><![CDATA[<h4 id="python的主要数据类型包括："><a href="#python的主要数据类型包括：" class="headerlink" title="python的主要数据类型包括："></a>python的主要数据类型包括：</h4><ol>
<li>int (整形)</li>
<li>long(长整型)</li>
<li>float(浮点型)</li>
<li>complex（复数）</li>
<li>字符串</li>
<li>布尔型</li>
<li>列表</li>
<li>元组</li>
<li>字典</li>
<li>集合</li>
</ol>
<h5 id="int（整型）"><a href="#int（整型）" class="headerlink" title="int（整型）"></a>int（整型）</h5><p>在32位机器上，整数的位数是32位，取值范围是-231<del>231-1，即-2147483648</del>214748364；在64位系统上，整数的位数为64位，取值范围为-263<del>263-1，即9223372036854775808</del>9223372036854775807。</p>
<h5 id="long（长整型）"><a href="#long（长整型）" class="headerlink" title="long（长整型）"></a>long（长整型）</h5><p>Python长整型没有指定位宽，但是由于机器内存有限，使用长的长整数数值也不可能无限大。</p>
<h5 id="float（浮点型）"><a href="#float（浮点型）" class="headerlink" title="float（浮点型）"></a>float（浮点型）</h5><p>浮点型也就是带有小数点的数，其精度和机器有关。</p>
<h5 id="complex（复数）"><a href="#complex（复数）" class="headerlink" title="complex（复数）"></a>complex（复数）</h5><p>Python还支持复数，复数由实数部分和虚数部分构成，可以用 a + bj,或者 complex(a,b) 表示， 复数的实部 a 和虚部 b 都是浮点型。</p>
<h5 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h5><p>Python中的字符串有两种数据类型，分别是str类型和unicode类型，str类型采用的ASCII编码，无法表示中文，unicode类型采用unicode编码，能够表示任意字符，包括中文和其他语言。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">状态获取：islower，isupper，isdigit，isalpha，isalnum，istitle，startswith，endswith</span><br><span class="line">状态转换：lower，casefold，upper，swapcase，title(单词首字母大写)，capitalize(字符串首字母大写)</span><br><span class="line">格式转换：strip(去掉左右两边参数字符串中的字符)，ljust，rjust，center，zfill（左侧补零）</span><br><span class="line">拆分：partition，rpartiton，spilt，splitlines</span><br><span class="line">连接：join，+</span><br><span class="line">查询：index，find，count</span><br><span class="line">替换操作：replace，expandtabs</span><br><span class="line">基本操作：索引取值，len，max，min，<span class="keyword">in</span>，<span class="keyword">not</span> <span class="keyword">in</span></span><br></pre></td></tr></table></figure>



<h5 id="布尔型"><a href="#布尔型" class="headerlink" title="布尔型"></a>布尔型</h5><p>和其他编程语言一样，Python布尔类型也是用于逻辑运算，有两个值：True（真）和False（假）。</p>
<h5 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h5><p>列表是Python中使用最频繁的数据类型，集合中可以放任何数据类型，可对集合进行创建、查找、切片、增加、修改、删除、循环和排序操作。</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">增加：append,insert,extend</span><br><span class="line">删除：remove,pop,clear</span><br><span class="line">查询：index,count</span><br></pre></td></tr></table></figure>



<h5 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h5><p>元组和列表一样，也是一种序列，与列表不同的是，元组是不可修改的，元组用”()”标识，内部元素用逗号隔开。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">查询：index，count</span><br></pre></td></tr></table></figure>



<h5 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h5><p>字典是一种键值对的集合，是除列表以外Python之中最灵活的内置数据结构类型，列表是有序的对象集合，字典是无序的对象集合。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">增加：add</span><br><span class="line">删除：pop（第一个），clear，remove</span><br><span class="line">交集：&amp;</span><br><span class="line">并集：|</span><br><span class="line">差集：set1-set2</span><br><span class="line">对称差集：并集-交集</span><br></pre></td></tr></table></figure>



<h5 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h5><p>集合是一个无序的、不重复的数据组合，它的主要作用有两个，分别是去重和关系测试。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">增加:字典[<span class="string">'键'</span>] = 值</span><br><span class="line">删除：pop,popitem,clear</span><br><span class="line">修改：update(dict)</span><br><span class="line">查询：get,keys,items,values,setdefault:有对应的键则返回对应的值，没有则返回默认给定的值</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python算法时间复杂度</title>
    <url>/2020/07/06/sjfzd/</url>
    <content><![CDATA[<p> 时间复杂度分为：</p>
<ul>
<li><p>时间复杂度</p>
</li>
<li><p>空间复杂度</p>
<p>时间复杂度用于度量算法的计算工作量，空间复杂度用于度量算法占用的内存空间。 </p>
</li>
</ul>
<p><strong>渐进时间复杂度</strong></p>
<p>时间复杂度是算法运算所消耗的时间，因为不同大小的输入数据，算法处理所要消耗的时间是不同的，因此评估一个算运行时间是比较困难的，所以通常关注的是时间频度，即算法运行计算操作的次数，记为T(n)，其中n称为问题的规模。</p>
<p>同样，因为n是一个变量，n发生变化时，时间频度T(n) 也在发生变化，我们称时间复杂度的极限情形称为算法的渐近时间复杂度，记为O(n)，不包含函数的低阶和首项系数。</p>
<h5 id="时间复杂度分为："><a href="#时间复杂度分为：" class="headerlink" title="时间复杂度分为："></a>时间复杂度分为：</h5><ul>
<li>常数阶 O(1) </li>
<li>线性阶 O(n) </li>
<li>平方阶 O(n^2) </li>
<li>立方阶 O(n^3) </li>
<li>对数阶 O(logn) </li>
</ul>
]]></content>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python五大排序算法</title>
    <url>/2020/07/06/suan/</url>
    <content><![CDATA[<h5 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h5><p>插入排序：插入排序的基本操作就是将一个数据插入到已经排好序的有序数据中，从而得到一个新的、个数加一的有序数据，算法适用于少量数据的排序；首先将第一个作为已经排好序的，然后每次从后的取出插入到前面并排序；</p>
<p>时间复杂度：O(n²)</p>
<p>空间复杂度：O(1)</p>
<p>稳定性：稳定</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">insert_sort</span><span class="params">(ilist)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(ilist)):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(i):</span><br><span class="line">            <span class="keyword">if</span> ilist[i] &lt; ilist[j]:</span><br><span class="line">                ilist.insert(j, ilist.pop(i))</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">return</span> ilist</span><br></pre></td></tr></table></figure>

<h4 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h4><p>冒泡排序：它重复地走访过要排序的数列，一次比较两个元素，如果他们的顺序错误就把他们交换过来。走访数列的工作是重复地进行直到没有再需要交换，也就是说该数列已经排序完成</p>
<p>时间复杂度：O(n²)</p>
<p>空间复杂度：O(1)</p>
<p>稳定性：稳定</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bubble_sort</span><span class="params">(blist)</span>:</span></span><br><span class="line">    count = len(blist)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, count):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(i + <span class="number">1</span>, count):</span><br><span class="line">            <span class="keyword">if</span> blist[i] &gt; blist[j]:</span><br><span class="line">                blist[i], blist[j] = blist[j], blist[i]</span><br><span class="line">    <span class="keyword">return</span> blist</span><br><span class="line"></span><br><span class="line">blist = bubble_sort([<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">6</span>,<span class="number">9</span>,<span class="number">8</span>])</span><br><span class="line">print(blist)</span><br></pre></td></tr></table></figure>

<h4 id="快排"><a href="#快排" class="headerlink" title="快排"></a>快排</h4><p>快速排序：通过一趟排序将要排序的数据分割成独立的两部分，其中一部分的所有数据都比另外一部分的所有数据都要小，然后再按此方法对这两部分数据分别进行快速排序，整个排序过程可以递归进行，以此达到整个数据变成有序序列</p>
<p>时间复杂度：O(nlog₂n)</p>
<p>空间复杂度：O(nlog₂n)</p>
<p>稳定性：不稳定</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">quick_sort</span><span class="params">(qlist)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> qlist == []:</span><br><span class="line">        <span class="keyword">return</span> []</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        qfirst = qlist[<span class="number">0</span>]</span><br><span class="line">        qless = quick_sort([l <span class="keyword">for</span> l <span class="keyword">in</span> qlist[<span class="number">1</span>:] <span class="keyword">if</span> l &lt; qfirst])</span><br><span class="line">        qmore = quick_sort([m <span class="keyword">for</span> m <span class="keyword">in</span> qlist[<span class="number">1</span>:] <span class="keyword">if</span> m &gt;= qfirst])</span><br><span class="line">        <span class="keyword">return</span> qless + [qfirst] + qmore</span><br><span class="line"></span><br><span class="line">qlist = quick_sort([<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">6</span>,<span class="number">9</span>,<span class="number">8</span>])</span><br></pre></td></tr></table></figure>

<h4 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h4><p>选择排序：第1趟，在待排序记录r1 ~ r[n]中选出最小的记录，将它与r1交换；第2趟，在待排序记录r2 ~ r[n]中选出最小的记录，将它与r2交换；以此类推，第i趟在待排序记录r[i] ~ r[n]中选出最小的记录，将它与r[i]交换，使有序序列不断增长直到全部排序完毕</p>
<p>时间复杂度：O(n²)</p>
<p>空间复杂度：O(1)</p>
<p>稳定性：不稳定</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">select_sort</span><span class="params">(slist)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(slist)):</span><br><span class="line">        x = i</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(i, len(slist)):</span><br><span class="line">            <span class="keyword">if</span> slist[j] &lt; slist[x]:</span><br><span class="line">                x = j</span><br><span class="line">        slist[i], slist[x] = slist[x], slist[i]</span><br><span class="line">    <span class="keyword">return</span> slist</span><br><span class="line"></span><br><span class="line">slist = select_sort([<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">6</span>,<span class="number">9</span>,<span class="number">8</span>])</span><br></pre></td></tr></table></figure>

<h4 id="归并算法"><a href="#归并算法" class="headerlink" title="归并算法"></a>归并算法</h4><p>归并排序：采用分治法（Divide and Conquer）的一个非常典型的应用。将已有序的子序列合并，得到完全有序的序列；即先使每个子序列有序，再使子序列段间有序。若将两个有序表合并成一个有序表，称为二路归并</p>
<p>时间复杂度：O(nlog₂n)</p>
<p>空间复杂度：O(1)</p>
<p>稳定性：稳定</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">merge_sort</span><span class="params">(array)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">merge_arr</span><span class="params">(arr_l, arr_r)</span>:</span></span><br><span class="line">        array = []</span><br><span class="line">        <span class="keyword">while</span> len(arr_l) <span class="keyword">and</span> len(arr_r):</span><br><span class="line">            <span class="keyword">if</span> arr_l[<span class="number">0</span>] &lt;= arr_r[<span class="number">0</span>]:</span><br><span class="line">                array.append(arr_l.pop(<span class="number">0</span>))</span><br><span class="line">            <span class="keyword">elif</span> arr_l[<span class="number">0</span>] &gt; arr_r[<span class="number">0</span>]:</span><br><span class="line">                array.append(arr_r.pop(<span class="number">0</span>))</span><br><span class="line">        <span class="keyword">if</span> len(arr_l) != <span class="number">0</span>:</span><br><span class="line">            array += arr_l</span><br><span class="line">        <span class="keyword">elif</span> len(arr_r) != <span class="number">0</span>:</span><br><span class="line">            array += arr_r</span><br><span class="line">        <span class="keyword">return</span> array</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">recursive</span><span class="params">(array)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> len(array) == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> array</span><br><span class="line">        mid = len(array) // <span class="number">2</span></span><br><span class="line">        arr_l = recursive(array[:mid])</span><br><span class="line">        arr_r = recursive(array[mid:])</span><br><span class="line">        <span class="keyword">return</span> merge_arr(arr_l, arr_r)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> recursive(array)</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python面试算法题</title>
    <url>/2020/07/06/pyms/</url>
    <content><![CDATA[<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">num</span><span class="params">()</span>:</span></span><br><span class="line">          <span class="keyword">return</span> [<span class="keyword">lambda</span> x: i*x <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>)]</span><br><span class="line">print([m(<span class="number">2</span>) <span class="keyword">for</span> m <span class="keyword">in</span> num()])     <span class="comment"># 输出: [6, 6, 6, 6]</span></span><br></pre></td></tr></table></figure>

<h3 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h3><p>这题涉及到了闭包延时绑定，当循环执行完了之后才会执行传参，循环四次，每一次循环完 i=3 然后再和x相乘 所以结果是6，6，6，6。 如果把 [ lambda x: i<em>x for i in range(4) ] 改成 （ lambda x: i</em>x for i in range(4) ）这样就变成了一个生成器 自动实现迭代器协议，一边循环一边计算的机制， 这样结果就是 0，2，4，6.</p>
<hr>
<h2 id="两数之和"><a href="#两数之和" class="headerlink" title="两数之和"></a>两数之和</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">给定 nums &#x3D; [2, 7, 11, 15], target &#x3D; 9</span><br><span class="line">因为 nums[0] + nums[1] &#x3D; 2 + 7 &#x3D; 9</span><br><span class="line">所以返回 [0, 1]</span><br></pre></td></tr></table></figure>

<h3 id="思路：-1"><a href="#思路：-1" class="headerlink" title="思路："></a>思路：</h3><p>这里可以使用字典来解题，通过enumerate方法遍历获取数据的下标包括对应值，然后以key，value形式把该数据的下标和对应值存入字典，然后再出通过enumerate方法遍历数据，每一次获取数据就从字典拿出一个值，用目标值减去从字典拿出的这个值得到一个结果值，如果结果值存在字典当中，那么返回两个数的下标，如果为None，说明字典中没有这个值。</p>
<h3 id="实现代码："><a href="#实现代码：" class="headerlink" title="实现代码："></a>实现代码：</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_index_list</span><span class="params">(nums, target)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Todo 作为一个方法来实现，批量解决这个获取索引的问题</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    :params nums：传的参数的列表</span></span><br><span class="line"><span class="string">    :params target: 目标值</span></span><br><span class="line"><span class="string">    :return: 返回索引</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    dic = &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> a, b <span class="keyword">in</span> enumerate(nums):  <span class="comment"># a是下标 b是对应值</span></span><br><span class="line"></span><br><span class="line">        dic[b] = a  <span class="comment"># 对应值存入字典</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i, b <span class="keyword">in</span> enumerate(nums):</span><br><span class="line"></span><br><span class="line">        j = dic.get(target-b)  <span class="comment"># 从字典中拿出对应值 用目标值减去对应值</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> j <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:  <span class="comment"># 判断如果减去的对应值不为空，则返回下标</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> [i, j]</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="数组中重复的数字"><a href="#数组中重复的数字" class="headerlink" title="数组中重复的数字"></a>数组中重复的数字</h2><p>示例：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">输入:</span><br><span class="line">[<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">3</span>]</span><br><span class="line">输出: <span class="number">2</span> 或 <span class="number">3</span></span><br></pre></td></tr></table></figure>

<h3 id="思路：-2"><a href="#思路：-2" class="headerlink" title="思路："></a>思路：</h3><p>这道题想到的是，使用列表中的count方法，定义一个空列表，遍历数据然后进行判断，如果数据值出现个数大于或等于2，说明该数据是重复的，然后把重复的筛取出来之后存入空列表，再进行返回输出。</p>
<h3 id="实现代码：-1"><a href="#实现代码：-1" class="headerlink" title="实现代码："></a>实现代码：</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_number</span><span class="params">(nums)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    :params nums：传的参数的数组</span></span><br><span class="line"><span class="string">    :return: 返回重复数字</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    nub = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> nums:</span><br><span class="line">        <span class="keyword">if</span> nums.count(i) &gt;= <span class="number">2</span>:</span><br><span class="line">            <span class="keyword">if</span> str(i) <span class="keyword">not</span> <span class="keyword">in</span> nub:</span><br><span class="line">                nub.append(str(i))</span><br><span class="line"></span><br><span class="line">    print(<span class="string">'或'</span>.join(nub))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    get_number([<span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">3</span>])</span><br></pre></td></tr></table></figure>

<h2 id="队列实现一个栈"><a href="#队列实现一个栈" class="headerlink" title="队列实现一个栈"></a>队列实现一个栈</h2><h3 id="思路：-3"><a href="#思路：-3" class="headerlink" title="思路："></a>思路：</h3><p>使用一个队列，实现栈的一些基本操作，栈（后进先出）的特性。</p>
<h3 id="实现代码：-2"><a href="#实现代码：-2" class="headerlink" title="实现代码："></a>实现代码：</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 队列实现一个栈 （栈：后进先出）</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Stack</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 定义一个队列</span></span><br><span class="line">        self.lst = []</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">is_None</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 判断栈是否为空 返回 ture false</span></span><br><span class="line">        <span class="keyword">return</span> self.lst == []</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">push</span><span class="params">(self, i)</span>:</span></span><br><span class="line">        <span class="comment"># 加入元素</span></span><br><span class="line">        self.lst.append(i)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pop</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 出栈</span></span><br><span class="line">        <span class="keyword">return</span> self.lst.pop()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">stack_top</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 返回栈顶元素</span></span><br><span class="line">        <span class="keyword">return</span> self.lst[<span class="number">-1</span>]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">size</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 栈的大小</span></span><br><span class="line">        <span class="keyword">return</span> len(self.lst)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line"></span><br><span class="line">    stack = Stack()</span><br><span class="line">    print(stack.is_None())</span><br><span class="line">    stack.push(<span class="number">1</span>)</span><br><span class="line">    stack.push(<span class="number">2</span>)</span><br><span class="line">    stack.push(<span class="number">3</span>)</span><br><span class="line">    print(stack.lst)</span><br><span class="line">    print(stack.pop())</span><br><span class="line">    print(stack.stack_top())</span><br><span class="line">    print(stack.size())</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="回文数"><a href="#回文数" class="headerlink" title="回文数"></a>回文数</h2><p>判断一个整数是否是回文数。回文数是指正序（从左向右）和倒序（从右向左）读都是一样的整数。</p>
<p>示例1：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">输入: <span class="number">121</span></span><br><span class="line">输出: true</span><br></pre></td></tr></table></figure>

<p>示例2：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">输入: <span class="number">-121</span></span><br><span class="line">输出: false</span><br><span class="line">解释: 从左向右，为 <span class="number">-121</span> 。 从右向左读，为<span class="number">121</span>- 。 因此它不是一个回文数</span><br></pre></td></tr></table></figure>

<p>示例3：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: 10</span><br><span class="line">输出: false</span><br><span class="line">解释: 从右向左读，为 01 。 因此它不是一个回文数</span><br></pre></td></tr></table></figure>

<h3 id="思路：-4"><a href="#思路：-4" class="headerlink" title="思路："></a>思路：</h3><p>这题可以使用字符串 双指针的方法 将数据转化为字符串 首先定义好第一个元素下标和最后一个元素下标，while循环 只要条件不满足 一直循环 循环判断第一个和最后一个元素是否相等 不相等返回false 相等继续循环，如果循环条件满足之后都相等，返回 false</p>
<h3 id="实现代码：-3"><a href="#实现代码：-3" class="headerlink" title="实现代码："></a>实现代码：</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">palindromic_number</span><span class="params">(x)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    :params x：传的参数的列表</span></span><br><span class="line"><span class="string">    :return: 返回Ture False</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    lst = list(str(x))</span><br><span class="line">    print(lst)</span><br><span class="line">    L, R = <span class="number">0</span>, len(lst)<span class="number">-1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> L &lt;= R:</span><br><span class="line">        print(L, R)</span><br><span class="line">        <span class="keyword">if</span> lst[L] != lst[R]:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">        L += <span class="number">1</span></span><br><span class="line">        R -= <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    print(palindromic_number(<span class="number">1231</span>))</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="分别用生成器和迭代器生成斐波那契数列"><a href="#分别用生成器和迭代器生成斐波那契数列" class="headerlink" title="分别用生成器和迭代器生成斐波那契数列"></a>分别用生成器和迭代器生成斐波那契数列</h2><p>示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输出: 1 1 2 3 5 8 13</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用迭代器生成斐波那契数列</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fibonacii</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,all_num)</span>:</span></span><br><span class="line">        self.all_num = all_num</span><br><span class="line">        self.cur_idx = <span class="number">0</span></span><br><span class="line">        self.a = <span class="number">0</span>  </span><br><span class="line">        self.b = <span class="number">1</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__iter__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__next__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.cur_idx &gt;= self.all_num:</span><br><span class="line">            <span class="keyword">raise</span> StopIteration</span><br><span class="line">        ret = self.a</span><br><span class="line">        </span><br><span class="line">        self.a, self.b = self.b, self.a + self.b</span><br><span class="line">        self.cur_idx += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> ret</span><br><span class="line"> </span><br><span class="line">fibo = Fibonacii(<span class="number">10</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> fibo:</span><br><span class="line">    print(i)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用生成器生成斐波那契数列</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fibnacii</span><span class="params">(count)</span>:</span></span><br><span class="line">    num = <span class="number">0</span></span><br><span class="line">    a, b = <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> num &lt; count:</span><br><span class="line">        <span class="keyword">yield</span> a</span><br><span class="line">        a, b = b, a+b</span><br><span class="line">        num += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">fi = fibnacii(<span class="number">10</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> fi:</span><br><span class="line">    print(i)</span><br></pre></td></tr></table></figure>

<h2 id="反转字符数组"><a href="#反转字符数组" class="headerlink" title="反转字符数组"></a>反转字符数组</h2><h3 id="思路：-5"><a href="#思路：-5" class="headerlink" title="思路："></a>思路：</h3><p>直接使用反转</p>
<h3 id="实现代码：-4"><a href="#实现代码：-4" class="headerlink" title="实现代码："></a>实现代码：</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 反转字符串</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">reverseString</span><span class="params">(s)</span>:</span></span><br><span class="line">    s[<span class="number">0</span>::] = s[::<span class="number">-1</span>]</span><br><span class="line">    print(s)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    reverseString([<span class="string">'b'</span>, <span class="string">''</span>, <span class="string">'a'</span>, <span class="string">'r'</span>])</span><br></pre></td></tr></table></figure>











]]></content>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>验证码的时效性</title>
    <url>/2020/07/14/redis1/</url>
    <content><![CDATA[<p>redis场景，服务器内存不够了，怎么办（或者说被人干蹦了），我们的redis信息是不是就没了，redis服务hi不是挂了，如何优化？容灾方式？分配redis多大内存，是否满足我们的生产的需求，一般我们会缓存到多大的一个数据量，峰值是多少？</p>
<h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>Redis场景，服务器内存不够了：</p>
<p>一，增加内存</p>
<p>redis存储在内存中，数据太多，占用大多内存，那么增加内存就是直接的方法，但是这个方法一般不采用，因为内存满了就加内存，满了就加，那代价太大，相当于用钱解决的问题，不首先考虑，一般有方面都做到最优化，才考虑此方法。</p>
<p>二，搭建Redis集群</p>
<ol>
<li>所有的redis节点批次互联（PING-PONG机制),内部使用二进制协议优化传输速度和宽带。</li>
<li>节点的fail是通过集群中超过半数的节点检测时效时才生效。</li>
<li>客户端与redis节点智联，不需要中间proxy层，客户端不需要连接集群所有的节点，连接集群中任何一个可用的节点即可。</li>
<li>redis-cluster把所有的物理节点映射到[0-16383]slot上，cluster负责维护node&lt;-&gt;slot&lt;-&gt;value</li>
</ol>
<p>Redis 集群中内置了 16384 个哈希槽，当需要在 Redis 集群中放置一个 key-value 时，redis 先对 key 使用 crc16 算法算出一个结果，然后把结果对 16384 求余数，这样每个 key 都会对应一个编号在 0-16383 之间的哈希槽，redis 会根据节点数量大致均等的将哈希槽映射到不同的节点，最多16384个节点。</p>
<p>节点间相互通信，一半以上节点ping不同一个节点，则说明此节点挂掉，从节点顶上</p>
<p>(1)集群中所有master参与投票,如果半数以上master节点与其中一个master节点通信超过(cluster-node-timeout),认为该master节点挂掉.</p>
<p>(2):什么时候整个集群不可用(cluster_state:fail)? </p>
<ul>
<li>如果集群任意master挂掉,且当前master没有slave，则集群进入fail状态。也可以理解成集群的[0-16383]slot映射不完全时进入fail状态。</li>
<li>如果集群超过半数以上master挂掉，无论是否有slave，集群进入fail状态。</li>
</ul>
<h4 id="Redis服务器因某种原因崩掉了，redis的信息是不是就没了-（容灾方式）"><a href="#Redis服务器因某种原因崩掉了，redis的信息是不是就没了-（容灾方式）" class="headerlink" title="Redis服务器因某种原因崩掉了，redis的信息是不是就没了 （容灾方式）"></a>Redis服务器因某种原因崩掉了，redis的信息是不是就没了 （容灾方式）</h4><p>redis 持久化策略：</p>
<p>　　RDB：对redis中的数据周期性的持久化</p>
<h4 id="优点"><a href="#优点" class="headerlink" title="　　　优点"></a>　　　优点</h4><p>​              1、会生成多个数据文件，每个数据文件都代表了某一个时间的全部数据。非常适合做冷备。可以将数据上传到云服务备份。</p>
<p>　　　　2、RDB对redis对外提供的服务影响小，可以让redis保持高性能。</p>
<p>　　　　3、相比较来说，基于RDB文件重启恢复redis更快</p>
<p>　　AOF：对每条写入命令作为日志。以append-only模式写入日志。</p>
<h4 id="优点-1"><a href="#优点-1" class="headerlink" title="　　　优点"></a>　　　优点</h4><p>​              1、可以更好的保护数据不丢失，一般AOF每隔1秒，通过后台线程执行一次fsync操作。最多丢失1s数据</p>
<p>　　　　2、文件以append-only模式写入，没有io开销。文件不容易损坏。损坏也很容易恢复。</p>
<p>　　　　3、AOF日志文件即使过大的时候，出现后台重写操作，也不会影响客户端的读写。因为在rewrite log的时候，会对其中的指导进行压缩，创建出一份需要恢复数据的最小日志出来。再创建新日志文件的时候，老的日志文件还是照常写入。当新的merge后的日志文件ready的时候，再交换新老日志文件即可。</p>
<p>　　　　4、日志文件可读性强。适合做灾难性的误删除的紧急恢复。</p>
<p>一般线上环境我们会将2中机制都开启。具体的RDB策略和AOF策略都可以在redis.conf里面配置</p>
<p>RDB： save 60 1000 : 表示每60s有超过1000条数据更新就备份。</p>
<p>AOF： append-only : true 开启aof策略</p>
<p>　　　　everysec: 每秒备份</p>
<p>　　　　auto-aof-rewrite-percentage 100 : 当aof大小膨胀到上次2倍就备份</p>
<p>　　　　auto-aof-rewrite-min-size 64mb ： 和上面是 且 关系。 aof文件必须超过64m才会备份</p>
<h4 id="通过RDB恢复数据的步骤："><a href="#通过RDB恢复数据的步骤：" class="headerlink" title="通过RDB恢复数据的步骤："></a>通过RDB恢复数据的步骤：</h4><p>先将云服务的RDB备份数据copy到redis配置的备份目录。然后将aof关闭（一定要关闭，否则优先从aof日志文件本分，但是如果没有的话就创建空的。所以redis是无法加载rdb备份文件的）。然后重启redis，此时我们redis-cli 进入redis发现redis已经自动加载备份的rdb文件数据了。这时候手动命令启动aof。这时候redis就会备份aof日志。这启动aof是暂时的。我们停掉redis，在配置文件中修改将aof开启，然后再开启，现在redis已经恢复数据，且AOF已经开启了。</p>
]]></content>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux文件操作</title>
    <url>/2020/07/14/linux1/</url>
    <content><![CDATA[<h2 id="Linux文件操作（看大小，tail-f-n-grep-head-cut-wc-sort）"><a href="#Linux文件操作（看大小，tail-f-n-grep-head-cut-wc-sort）" class="headerlink" title="Linux文件操作（看大小，tail -f -n grep head cut wc sort）"></a>Linux文件操作（看大小，tail -f -n grep head cut wc sort）</h2><p>命令head默认是查看文件的前10行，通过命令head /etc/passwd查看文件的前10行，也可以增加参数-n 15查看前15行，参数n在这里是指定行数的意思。我们可以通过命令man head查看更多的参数使用方法。</p>
<p>命令tail默认是查看文件的最后10行，通过命令tail /etc/passwd查看文件的最后10行，也可以增加参数-n 5查看最后5行，参数n在这里是指定行数的意思。我们可以通过man tail查看更多的参数使用方法。命令tail经常被用来查看最新的日志信息。可以用tailf命令或者tail –f来实时查看日志信息。</p>
<p>命令grep用来过滤信息，通过命令cat /etc/passwd | grep thomas从passwd文件中快速找到还有thomas信息的内容。通过命令cat /etc/passwd | grep –n tcpdump从passwd文件中快速找到tcpdump信息的内容并显示出行号，参数-v是取反，如上面2个例子找的信息里面不包括thomas和tcpdump的信息，我们通过man grep可以学习更多的参数使用方法。</p>
<p>命令cut可以只显示某一列的内容，如果我们只想看某个文件的第一列的话可以用cut –d: -f1 /etc/passwd,参数f1在这里的意思是第一列，我们可以通过man cut来查看更多的参数使用方法。</p>
<p>命令wc是用来统计字符数的，为文件信息的搜集提供帮助，如我们想知道根目录下有多少个目录，直接可以用ls / | wc –l直接计算出根目录下有多少行数，在目录和文件数特别多的时候非常好用。如我们用ls –R /etc | wc –l来查看/etc目录和文件数行数是多少，其中参数R是递归查找，意思是可以查到目录下面的文件。通过man wc查看更多的参数使用方法。</p>
<p>命令sort是用来排序的，我们用命令sort –n 参数n是以数字排列顺序，参数t是以什么为分隔符，参数k是选择第几列，通过命令sort –n –t: -k3 /etc/passwd来对/etc/目录下passwd文件已冒号为分界符第3列用数字排序。我们通过man sort可以查看更多的参数使用方法。</p>
]]></content>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>django之redis和django-redis的使用</title>
    <url>/2020/07/15/redis_cz/</url>
    <content><![CDATA[<p>-redis</p>
<p>　　-非关系型内存数据（nosql:mongodb,redis），key-value的存储<br>　　-单线程单进程，qps:10w<br>　　-Memcached：多线程，支持的数据类型少：只支持字符串类型，不支持持久化<br>　　-redis：5大数据类型<br>　　　　k1:‘123‘, 字符串<br>　　　　k2:[1,2,3,4], 列表/数组<br>　　　　k3:{1,2,3,4} 集合：去重，爬虫去重<br>　　　　k4:{name:lqz,age:12} 字典/哈希表<br>　　　　k5:{(‘lqz‘,18),(‘egon‘,33)} 有序集合：游戏排行榜<br>　　-redis支持持久化：两种持久化的方案</p>
<p>-python操作redis<br>　　from redis import Redis<br>　　conn=Redis()</p>
<p>-redis连接池<br>　　#pool需要做成单例<br>　　pool=ConnectionPool(host=‘127.0.0.1‘,port=6379,max_connections=100)<br>　　conn=Redis(connection_pool=pool)</p>
<p>-redis之字符串操作<br>　　-set<br>　　-get<br>　　-mset<br>　　-mget<br>　　-incr<br>　　-decr<br>　　-append</p>
<p>-redis之hash操作<br>　　-hset<br>　　-hmset<br>　　-hget<br>　　-hmget<br>　　-hgetall<br>　　-hlen<br>　　-hdel<br>　　-hincrby<br>　　-hscan<br>　　-hscan_iter</p>
<p>-redis之列表操作<br>　　-lpush<br>　　-llen<br>　　-linsert<br>　　-lpop<br>　　-blpop</p>
<p>　　-自定义增量迭代</p>
<p>只支持一层的5大数据类型：也就是说字典的value值只能是字符串，列表的value值只能是字符串</p>
<p>-redis的其他操作<br>　　-delete<br>　　-exisit<br>　　-rename<br>　　-keys 模糊匹配key值<br>　　-expire<br>　　-type</p>
<p>-事务（重点）<br>　　conn=Redis()<br>　　pipe = conn.pipeline(transaction=True)<br>　　pipe.multi()<br>　　pipe.set(‘name‘, ‘alex‘)<br>　　pipe.set(‘role‘, ‘sb‘)<br>　　pipe.execute()</p>
<p>-在django中使用redis<br>　　-所有框架都能用的方式：<br>　　　　-先新建一个py文件，生成一个redis连接池<br>　　　　-在哪用，导过来，<br>　　　　　　conn=Redis(connection_pool=POOL)<br>　　　　　　conn.set(‘xxx‘,‘yyyy‘)<br>　　-django中使用：django-redis模块<br>　　　　-在setting中配置：<br>　　　　　　CACHES = {<br>　　　　　　　　“default”: {<br>　　　　　　　　　　“BACKEND”: “django_redis.cache.RedisCache”,<br>　　　　　　　　　　“LOCATION”: “redis://127.0.0.1:6379”,<br>　　　　　　　　　　“OPTIONS”: {<br>　　　　　　　　　　　　“CLIENT_CLASS”: “django_redis.client.DefaultClient”,<br>　　　　　　　　　　　　“CONNECTION_POOL_KWARGS”: {“max_connections”: 100}}}}<br>　　　　-使用<br>　　　　　　在使用的位置：<br>　　　　　　from django_redis import get_redis_connection<br>　　　　　　conn=get_redis_connection()<br>　　　　　　conn.set</p>
]]></content>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>Celery+Redis</title>
    <url>/2020/07/17/celery/</url>
    <content><![CDATA[<p>1、任务（tasks）–用户定义的函数，用于实现用户的功能，比如执行一个耗时很长的任务</p>
<p>2、中间介（Broker）–用于存放tasks的地方，但是这个中间介需要解决一个问题，就是可能需要存放非常非常多的tasks，而且要保证Worker能够从这里拿取</p>
<p>3、执行者（Worker）–用于执行tasks，也就是真正调用我们在tasks中定义的函数</p>
<p>4、存储（Backend）–把执行tasks返回的结果进行存储，以供用户查看或调用</p>
<h2 id="1、各模块功能"><a href="#1、各模块功能" class="headerlink" title="1、各模块功能"></a>1、各模块功能</h2><p>Celery中，以上组件具体功能如下：</p>
<p><strong>任务模块 Task</strong></p>
<p>包含异步任务和定时任务。其中，异步任务通常在业务逻辑中被触发并发往任务队列，而定时任务由 Celery Beat 进程周期性地将任务发往任务队列。</p>
<p><strong>消息中间件 Broker</strong></p>
<p>Broker，即为任务调度队列，接收任务生产者发来的消息（即任务），将任务存入队列。Celery 本身不提供队列服务，官方推荐使用 RabbitMQ 和 Redis 等。</p>
<p><strong>任务执行单元 Worker</strong></p>
<p>Worker 是执行任务的处理单元，它实时监控消息队列，获取队列中调度的任务，并执行它。</p>
<p><strong>任务结果存储 Backend</strong></p>
<p>Backend 用于存储任务的执行结果，以供查询。同消息中间件一样，存储也可使用 RabbitMQ, Redis 和 MongoDB 等。</p>
]]></content>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>关于mysql优化</title>
    <url>/2020/07/14/mysql_yh/</url>
    <content><![CDATA[<h4 id="优化数据的访问"><a href="#优化数据的访问" class="headerlink" title="优化数据的访问"></a>优化数据的访问</h4><ol>
<li><p>确认应用程序是否检索了大量超过需要的数据。通常以为访问太多的行，或者访问太多的列</p>
</li>
<li><p>确认mysql服务器层是否存在分析大量超过需要的数据行</p>
</li>
<li><p>当访问量过大时，考虑数据库读写分离原则，当我们使用分离，数据库的压力还是很大的时候，这就需要使用数据拆分了。数据库的拆分原则：就是通过某种特定的条件，按照某个维度，将我们存放同一个数据库中的数据分散存到多个数据库（主机）上面已达到分散单裤（主机）负载的效果。</p>
<ul>
<li><p>首选是垂直拆分：一个数据库是由多个表组成，每个表对应着不同的业务，垂直切分指按照业务进行分类，分布到不同的数据库上面，这样也就将压力分布到不同的数据库上。 <strong>优点</strong> ：1 拆分后业务清晰，拆分规则明确 2 系统之间整合或扩展容易 3 数据维护简单 <strong>缺点</strong> ：1 部分代码无法join，只能通过接口方式解决，提高了系统复杂度 2 事物处理复杂</p>
</li>
<li><p>水平拆分：相似与垂直拆分，水平拆分不是将表的数据做分类，而是按照某个字段的某种规则分散到多个库之中，每个表包含一部分数据。简单来说，我们可以将数据的水平切分理解为是按照数据行进行切分，就是讲表中的某些行切分到一个数据库，而另外的某些行又切分到其他的数据库中。</p>
</li>
<li><p><strong>总</strong> ： 如果分库后仍然查的满的话，按照分库的思想做分表的工作数据库采用分布式数据库（所有的节点加起来才是整体数据），服务器满足不了大型系统增长的业务需求，数据库读写分离随着业务的发展，最终也无法满足，需要分布式数据库及分布式文件系统来支撑。</p>
<p>优先考虑缓存讲题对数据库的操作</p>
<p>在考录读写分离，降低数据库写操作</p>
<p>首先垂直拆分在水平拆分</p>
<p>先分库在分表</p>
</li>
</ul>
</li>
</ol>
]]></content>
      <tags>
        <tag>Mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>啊这！生成器</title>
    <url>/2020/07/29/scq/</url>
    <content><![CDATA[<p>在python中，一边循环一边计算的机制，称之为生成器（generator）</p>
<h4 id="生成器的存在："><a href="#生成器的存在：" class="headerlink" title="生成器的存在："></a>生成器的存在：</h4><p>列表所有的数据都在内存中，如果有海量的数据将会非常消耗内存。<br>如：仅仅需要访问前面几个元素，那后面绝大多数元素占用的空间都白白浪费了。<br>如果列表元素按照某种算法退出来，那我们就可以在循环的过程中不断推算出后续的元素，这样就不必创建完整的list，从而节省大量的空间。</p>
<p>说白点！！ 要想得到庞大的数据，又想让它占用空间少，就就就就用生成器！</p>
<p>第一种生成生成器的方法把【】改成（）则就是生成器</p>
<p>第二种 如果一个函数中包含yield关键字，那么这个函数就不在是个普通的函数，而是一个generator。调用函数就是创建了一个生成器。</p>
<h4 id="生成器的工作原理："><a href="#生成器的工作原理：" class="headerlink" title="生成器的工作原理："></a>生成器的工作原理：</h4><p>首先，生成器是一种特殊的迭代器，它的yield方法将迭代器的next，封装到了yield关键字中，他与return不同的是：遇见return就已经返回了，而遇见yield则我们去计算下一个元素的位置。</p>
<p>我们也可以通过next（）进行取值，也可以利用for循环（每次执行一次，取生成器里面一个值） 可以使用send（）强行修改yield的值。</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>什么是生成器？<br>生成器仅仅保存了一套生成数值的算法，并且没有让这个算法现在就开始执行，而是我什么时候调它，它什么时候开始计算一个新的值，并给你返回。</p>
]]></content>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>微服务</title>
    <url>/2020/07/29/vfw/</url>
    <content><![CDATA[<p>微服务（Microservice）这个概念是2012年出现的，作为加快Web和移动应用程序开发进程的一种方法，2014年开始受到各方的关注，而2015年，可以说是微服务的元年；</p>
<p>越来越多的论坛、社区、blog以及互联网行业巨头开始对微服务进行讨论、实践，可以说这样更近一步推动了微服务的发展和创新。而微服务的流行，Martin Fowler功不可没。</p>
<p>1 互联网的快速发展</p>
<p>2 敏捷开发 精益方法的深入人心</p>
<p>3 容器技术的成熟</p>
<h4 id="传统的项目架构？"><a href="#传统的项目架构？" class="headerlink" title="传统的项目架构？"></a>传统的项目架构？</h4><p><strong>优点：</strong></p>
<p>①开发简单，集中式管理</p>
<p>②基本不会重复开发</p>
<p>③功能都在本地，没有分布式的管理和调用消耗</p>
<p><strong>缺点：</strong></p>
<p>1、效率低：开发都在同一个项目改代码，相互等待，冲突不断</p>
<p>2、维护难：代码功功能耦合在一起，新人不知道何从下手</p>
<p>3、不灵活：构建时间长，任何小修改都要重构整个项目，耗时</p>
<p>4、稳定性差：一个微小的问题，都可能导致整个应用挂掉</p>
<p>5、扩展性不够：无法满足高并发下的业务需求</p>
<p><strong>常见的系统架构遵循的三个标准和业务驱动力：</strong></p>
<p>1、提高敏捷性：及时响应业务需求，促进企业发展</p>
<p>2、提升用户体验：提升用户体验，减少用户流失</p>
<p>3、降低成本：降低增加产品、客户或业务方案的成本</p>
<h4 id="现在我们来看一下微服务必须需要的原则？"><a href="#现在我们来看一下微服务必须需要的原则？" class="headerlink" title="现在我们来看一下微服务必须需要的原则？"></a>现在我们来看一下微服务必须需要的原则？</h4><p>1，单一功能职责</p>
<p>   单一功能职责是SOLID设计模式之一，它意味着一个单元，无论是类、函数还是微服务，都应该有且只有一个职责。在任何时候，一个微服务都不应该有一个以上的职责。</p>
<p>2，围绕着业务功能设计</p>
<p>   微服务应该专注于特定的业务功能，并确保它有助于完成任务。微服务绝不应限制自己采用最适合解决业务目的的适当技术栈或后端数据库存储。当我们设计单个应用程序时，这常常是一个约束，我们试图在某些领域中使用一些折中来解决多个业务解决方案。微服务使您能够选择最适合当前问题的解决方案。（某个微服务不仅仅只为一个微服务来服务，他要为其他的微服务提供支持，也就是全局的架构）</p>
<p>3，你建造它，你拥有它。</p>
<p>这种设计的另一个重要方面与开发前后的职责有关。在大型组织中，通常由一个团队开发app location(应用)，经过一些知识转移会议后，将项目移交给维护团队。在微服务中，构建服务的团队拥有它，并负责在将来维护它。这使开发人员能够接触到他们的软件的日常操作，并且他们能够更好地理解他们构建的产品在现实世界中是如何被客户使用的。</p>
<p>4，基础设施自动化</p>
<p>准备和构建微服务的基础设施是另一个非常重要的需求，服务应该是可独立部署的，并且应该捆绑所有依赖项，包括库依赖项，甚至是执行环境，如抽象物理资源（web服务器和容器或虚拟机）。</p>
<p>微服务和SOA之间的一个主要区别在于它们的自治级别。虽然大多数SOA实现提供了服务级抽象，但是微服务更进一步抽象了实现和执行环境。</p>
<p>在传统的应用程序开发中，我们构建一个WAR或EAR，然后将其部署到JEE应用程序服务器中，例如使用JBoss、WebLogic、WebSphere等等。我们可以将多个应用程序部署到同一个JEE容器中。在理想的场景中，在微服务方法中，每个微服务将构建为一个胖Jar，嵌入所有依赖项，并作为独立的Java进程运行。</p>
<p>5，容错设计</p>
<p>微服务的设计应考虑到故障情况。如果服务失败，或者宕机一段时间，该怎么办?这些都是非常重要的问题，必须在实际编码开始之前解决——以便清楚地估计服务故障将如何影响用户体验。</p>
<p>快速故障是另一个用于构建容错、弹性系统的概念。这种哲学提倡预期失败的系统，而不是构建永远不会失败的系统。由于服务在任何时候都可能失败，因此能够快速检测故障并在可能的情况下自动恢复服务非常重要。</p>
<p>微服务应用程序非常重视应用程序的实时监控，检查体系结构元素(数据库每秒接收多少请求)和业务相关指标(例如每分钟接收多少订单)。语义监视可以提供出错的早期预警系统，从而触发开发团队进行跟踪和调查。</p>
<h4 id="微服务的目的？"><a href="#微服务的目的？" class="headerlink" title="微服务的目的？"></a>微服务的目的？</h4><p><strong>目的：</strong>有效的拆分应用，实现敏捷开发和部署</p>
<h4 id="微服务的优点-？"><a href="#微服务的优点-？" class="headerlink" title="微服务的优点 ？"></a>微服务的优点 ？</h4><p>微服务有许多优点相比传统的多层架构（单体庞大应用），微服务的优点如下：</p>
<p>1，使用微服务，架构师和开发人员可以为每个微服务选择适合于特定用途的架构和技术(通晓多种语言对应的熟悉语言的架构)。这为以更经济有效的方式设计更适合的解决方案提供了灵活性。</p>
<p>2，由于服务相当简单，而且规模更小，企业可以试验新的流程、算法、业务逻辑等等。它通过提供快速试验和失败的能力，使企业能够进行颠覆性创新。</p>
<p>3，微服务能够实现选择性的可伸缩性，即每个服务都可以独立地伸缩，而且伸缩的成本相对于单体应用方面要低。</p>
<p>4，微服务是自包含的、独立的部署模块，当第二个微服务没有按照我们的需要执行时，可以使用另一个类似的微服务替换一个微服务。它有助于做出正确的“购买构建”决策，而这通常是许多企业面临的挑战。</p>
<p>5，微服务帮助我们构建本质上是有机的系统(有机的系统是通过添加越来越多的功能在一段时间内横向增长的系统)。因为微服务都是关于独立可管理的服务——它允许在需要时添加越来越多的服务，而对现有服务的影响最小。</p>
<p>6，技术变化是软件开发中的障碍之一。使用微服务，可以单独更改或升级每个服务的技术，而不是升级整个应用程序。</p>
<p>7，由于microservices将服务运行时环境和服务本身打包在一起，因此允许在同一环境中共存多个版本的服务。</p>
<p>8，最后，微服务还支持更小、更专注的敏捷开发团队。团队将根据微服务的边界进行组织。</p>
]]></content>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>面向对象五大原则SOLID</title>
    <url>/2020/07/29/solid/</url>
    <content><![CDATA[<h4 id="浅谈面向对象五大原则-S-O-L-I-D"><a href="#浅谈面向对象五大原则-S-O-L-I-D" class="headerlink" title="浅谈面向对象五大原则 S.O.L.I.D"></a>浅谈面向对象五大原则 S.O.L.I.D</h4><p>设计模式中的SOLID原则，分别是单一原则、开闭原则、里氏替换原则、接口隔离原则、依赖倒置原则。前辈们总结出来的，遵循五大原则可以使程序解决紧耦合，更加健壮。<br>s<br>SRP    单一责任原则<br>OCP    开放封闭原则<br>LSP    里氏替换原则<br>ISP    接口隔离原则<br>DIP    依赖倒置原则</p>
<h4 id="单一责任原则"><a href="#单一责任原则" class="headerlink" title="单一责任原则"></a>单一责任原则</h4><p>指的是一个类或者一个方法只做一件事。如果一个类承担的职责过多，就等于把这些职责耦合在一起，一个职责的变化就可能抑制或者削弱这个类完成其他职责的能力。例如餐厅服务员负责把订单给厨师去做，而不是服务员又要订单又要炒菜。</p>
<h4 id="开放封闭原则"><a href="#开放封闭原则" class="headerlink" title="开放封闭原则"></a>开放封闭原则</h4><p>对扩展开放，对修改关闭。意为一个类独立之后就不应该去修改它，而是以扩展的方式适应新需求。例如一开始做了普通计算器程序，突然添加新需求，要再做一个程序员计算器，这时不应该修改普通计算器内部，应该使用面向接口编程，组合实现扩展</p>
<h4 id="里氏替换原则"><a href="#里氏替换原则" class="headerlink" title="里氏替换原则"></a>里氏替换原则</h4><p>所有基类出现的地方都可以用派生类替换而不会程序产生错误。子类可以扩展父类的功能，但不能改变父类原有的功能。例如机动车必须有轮胎和发动机，子类宝马和奔驰不应该改写没轮胎或者没发动机。</p>
<h4 id="依赖倒置原则"><a href="#依赖倒置原则" class="headerlink" title="依赖倒置原则"></a>依赖倒置原则</h4><p>指的是高级模块不应该依赖低级模块，而是依赖抽象。抽象不能依赖细节，细节要依赖抽象。比如类A内有类B对象，称为类A依赖类B，但是不应该这样做，而是选择类A去依赖抽象。例如垃圾收集器不管垃圾是什么类型，要是垃圾就行。</p>
<h4 id="总述"><a href="#总述" class="headerlink" title="总述"></a>总述</h4><p>没人写一款程序能完全遵守SOLID原则，甚至有些设计模式是违反SOLID原则。如何权衡就要看利是否大于弊。不足之处望指教。s</p>
<p>转载于：<a><a href="https://www.cnblogs.com/suli0827/p/9515842.html" target="_blank" rel="noopener">https://www.cnblogs.com/suli0827/p/9515842.html</a></a></p>
]]></content>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
</search>
